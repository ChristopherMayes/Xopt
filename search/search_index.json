{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#xopt","title":"Xopt","text":"<p>Flexible optimization of arbitrary problems in Python.</p> <p>The goal of this package is to provide advanced algorithmic support for arbitrary  simulations/control systems with minimal required coding. Users can easily connect  arbitrary evaluation functions to advanced algorithms with minimal coding with  support for multi-threaded or MPI-enabled execution.</p> <p>Currenty Xopt provides:</p> <ul> <li>optimization algorithms:<ul> <li><code>cnsga</code> Continuous NSGA-II with constraints.</li> <li><code>upper_confidence_bound</code> Single objective Bayesian optimization (w/ or w/o     constraints, serial or parallel).</li> <li><code>mobo</code> Multi-objective Bayesian optimization (w/ or w/o constraints, serial or parallel).</li> <li><code>bayesian_exploration</code> Bayesian exploration.</li> </ul> </li> <li>sampling algorithms:<ul> <li><code>random sampler</code></li> </ul> </li> <li>Convenient YAML/JSON based input format.</li> <li>Driver programs:<ul> <li><code>xopt.mpi.run</code> Parallel MPI execution using this input format.</li> </ul> </li> </ul> <p>Xopt does not provide:  - your custom simulation via an <code>evaluate</code> function.</p> <p>Rather, Xopt asks you to define this function.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Xopt Overview PDF gives an overview of Xopt's design and  usage.</p> <p>Xopt Built-In Generators provides a list of available algorithms  implemented in the Xopt <code>Generator</code> framework.</p> <p>Simple Bayesian Optimization Example shows  Xopt usage for a simple optimization problem.</p>"},{"location":"#configuring-an-xopt-run","title":"Configuring an Xopt run","text":"<p>Xopt runs are specified via a dictionary that can be directly imported from a YAML  file.</p> <pre><code>xopt:\nmax_evaluations: 6400\n\ngenerator:\nname: cnsga\npopulation_size: 64\npopulation_file: test.csv\noutput_path: .\n\nevaluator:\nfunction: xopt.resources.test_functions.tnk.evaluate_TNK\nfunction_kwargs:\nraise_probability: 0.1\n\nvocs:\nvariables:\nx1: [0, 3.14159]\nx2: [0, 3.14159]\nobjectives: {y1: MINIMIZE, y2: MINIMIZE}\nconstraints:\nc1: [GREATER_THAN, 0]\nc2: [LESS_THAN, 0.5]\nconstants: {a: dummy_constant}\n</code></pre>"},{"location":"#defining-evaluation-function","title":"Defining evaluation function","text":"<p>Xopt can interface with arbitrary evaluate functions (defined in Python) with the  following form: <pre><code>evaluate(inputs: dict) -&gt; dict\n</code></pre> Evaluate functions must accept a dictionary object that at least has the keys  specified in <code>variables, constants, linked_variables</code> and returns a dictionary  containing at least the  keys contained in <code>objectives, constraints</code>. Extra dictionary keys are tracked and  used in the evaluate function but are not modified by xopt.</p>"},{"location":"#using-mpi","title":"Using MPI","text":"<p>Example MPI run, with <code>xopt.yaml</code> as the only user-defined file: <pre><code>mpirun -n 64 python -m mpi4py.futures -m xopt.mpi.run xopt.yaml\n</code></pre></p>"},{"location":"algorithms/","title":"Pre-Configured Generators in Xopt","text":"<p>A number of algorithms are implemented in Xopt using the <code>Generator</code> class for  off-the-shelf usage.  Below is a  description of the different generators that are available in Xopt and their target  use cases.</p>"},{"location":"algorithms/#randomgenerator","title":"RandomGenerator","text":"<p>Generates random points in the input space according to <code>VOCS</code>.</p>"},{"location":"algorithms/#bayesian-generators","title":"Bayesian Generators","text":"<p>All of the generators here use Bayesian optimization (BO) type methods to solve single  objective, multi objective and characterization problems. Bayesian generators  incorperate unknown constrianing functions into optimization based on what is  specified in <code>VOCS</code></p> <ul> <li><code>ExpectedImprovementGenerator</code>: implements Expected Improvement single    objective BO. Automatically balances trade-offs between exploration and    exploitation and is thus useful for general purpose optimization. </li> <li><code>UpperConfidenceBoundGenerator</code>: implements Upper Confidence Bound single    objective BO. Requires a hyperparameter <code>beta</code> that explicitly sets the tradeoff    between exploration and exploitation. Default value of <code>beta=2</code> is a good    starting point. Increase $\\beta$ to prioritize exploration and decrease <code>beta</code> to    prioritize exploitation.</li> <li><code>BayesianExplorationGenerator</code>: implements the Bayesian Exploration algorithm    for function characterization. This algorithm selects observation points that    maximize model uncertainty, thus picking points that maximize the information gain    about the target function at each iteration. If the target function is found to be    more sensative to one parameter this generator will adjust sampling frequency to    adapt. Note: specifying <code>vocs.objective[1]</code>   to <code>MAXIMIZE</code> or <code>MINIMIZE</code> does not change the behavior of this generator.</li> <li><code>MOBOGenerator</code>: implements Multi-Objective BO using the    Expected Hypervolume Improvement (EHVI) acquisition function. This is an ideal    general purpose multi-objective optimizer when objective evaluations cannot be    massively parallelized (&lt; 10 parallel evaluations).</li> <li><code>MGGPOGenerator</code>: implements Multi-Generation Gaussian Process Optimization using    the    Expected Hypervolume Improvement (EHVI) acquisition function. This is an ideal    general purpose multi-objective optimizer when objective evaluations can be    massively parallelized (&gt; 10 parallel evaluations) .</li> <li><code>MultiFidelityGenerator</code>: implements Multi-Fidelity BO which can take    advantage of lower fidelity evaluations of objectives and constraints to reduce    the computational cost of solving single or multi-objective optimization problems    in sequential or small scale parallel (&lt; 10 parallel evaluations)    contexts. </li> </ul>"},{"location":"algorithms/#evolutionary-generators","title":"Evolutionary Generators","text":"<ul> <li><code>CNSGAGenerator</code>: implements Continuous Non-dominated Sorted Genetic Algorithm    which as a good general purpose evolutionary algorithm used for solving    multi-objective optimization problems where evaluating the objective is relatively    cheap and massively parallelizable (above 5-10 parallel evaluations).</li> </ul>"},{"location":"algorithms/#extremum-seeking-generators","title":"Extremum Seeking Generators","text":"<ul> <li><code>ExtremumSeekingGenerator</code>: implements the Extremum Seeking algorithm which is    ideal for solving optimization problems that are suceptable to drifts.</li> </ul>"},{"location":"algorithms/#scipy-generators","title":"Scipy Generators","text":"<p>These generators serve as wrappers for algorithms implemented in scipy. - <code>NelderMeadGenerator</code>: implements Nelder-Mead (simplex) optimization.</p>"},{"location":"algorithms/#rcds-generators","title":"RCDS Generators","text":"<ul> <li><code>RCDSGenerator</code>: implements the RCDS algorithm. RCDS could be applied in noisy   online optimization scenarios</li> </ul>"},{"location":"algorithms/#custom-generators","title":"Custom Generators","text":"<p>Any general algorithm can be implemented by subclassing the abstract <code>Generator</code> class and used in the Xopt framework. If you implement a generator for your use case please consider opening a pull request so that we can add it to Xopt!</p>"},{"location":"installation/","title":"Installing Xopt","text":"<p>Installing <code>xopt</code> from the <code>conda-forge</code> channel can be achieved by adding <code>conda-forge</code> to your channels with:</p> <pre><code>conda config --add channels conda-forge\n</code></pre> <p>Once the <code>conda-forge</code> channel has been enabled, <code>xopt</code> can be installed with:</p> <pre><code>conda install xopt\n</code></pre> <p>It is possible to list all of the versions of <code>xopt</code> available on your platform with:</p> <pre><code>conda search xopt --channel conda-forge\n</code></pre>"},{"location":"installation/#developers","title":"Developers","text":"<p>Clone this repository: <pre><code>git clone https://github.com/ChristopherMayes/Xopt.git\n</code></pre></p> <p>Create an environment <code>xopt-dev</code> with all the dependencies: <pre><code>conda env create -f environment.yml\n</code></pre></p> <p>Install as editable: <pre><code>conda activate xopt-dev\npip install --no-dependencies -e .\n</code></pre></p>"},{"location":"installation/#cori-nersc-setup","title":"Cori (NERSC) setup","text":"<p><pre><code>conda install -c conda-forge xopt\n</code></pre> Follow instructions to build mpi4py: https://docs.nersc.gov/programming/high-level-environments/python/ Note that there is a bug in Jupyterhub terminals. Type: <pre><code>module swap PrgEnv-gnu PrgEnv-gnu\n</code></pre> to get the C compiler activated. </p>"},{"location":"api/evaluator/","title":"Evaluator","text":""},{"location":"api/evaluator/#xopt.evaluator.Evaluator","title":"<code>xopt.evaluator.Evaluator</code>","text":"<p>         Bases: <code>XoptBaseModel</code></p> <p>Xopt Evaluator for handling the parallel execution of an evaluate function.</p> <p>Parameters:</p> Name Type Description Default <code>function</code> <code>Callable</code> <p>Function to evaluate.</p> required <code>function_kwargs</code> <code>dict</code> <p>Any kwargs to pass on to this function.</p> <code>{}</code> <code>max_workers</code> <code>int</code> <p>Maximum number of workers.</p> <code>1</code> <code>executor</code> <code>NormalExecutor</code> <p>NormalExecutor or any instantiated Executor object</p> required <code>vectorized</code> <code>bool</code> <p>If true,</p> <code>False</code> Source code in <code>xopt/evaluator.py</code> <pre><code>class Evaluator(XoptBaseModel):\n\"\"\"\n    Xopt Evaluator for handling the parallel execution of an evaluate function.\n\n    Parameters\n    ----------\n    function : Callable\n        Function to evaluate.\n    function_kwargs : dict, default={}\n        Any kwargs to pass on to this function.\n    max_workers : int, default=1\n        Maximum number of workers.\n    executor : NormalExecutor\n        NormalExecutor or any instantiated Executor object\n    vectorized : bool, default=False\n        If true,\n    \"\"\"\n\n    function: Callable\n    max_workers: int = 1\n    executor: NormalExecutor = Field(exclude=True)  # Do not serialize\n    function_kwargs: dict = {}\n    vectorized: bool = False\n\n    class Config:\n\"\"\"config\"\"\"\n\n        arbitrary_types_allowed = True\n\n    @root_validator(pre=True)\n    def validate_all(cls, values):\n        f = get_function(values[\"function\"])\n        kwargs = values.get(\"function_kwargs\", {})\n        kwargs = {**get_function_defaults(f), **kwargs}\n        values[\"function\"] = f\n        values[\"function_kwargs\"] = kwargs\n\n        max_workers = values.pop(\"max_workers\", 1)\n\n        executor = values.pop(\"executor\", None)\n        if not executor:\n            if max_workers &gt; 1:\n                executor = ProcessPoolExecutor(max_workers=max_workers)\n            else:\n                executor = DummyExecutor()\n\n        # Cast as a NormalExecutor\n        values[\"executor\"] = NormalExecutor[type(executor)](executor=executor)\n        values[\"max_workers\"] = max_workers\n\n        return values\n\n    def evaluate(self, input: Dict, **kwargs):\n\"\"\"\n        Evaluate a single input dict using Evaluator.function with\n        Evaluator.function_kwargs.\n\n        Further kwargs are passed to the function.\n\n        Inputs:\n            inputs: dict of inputs to be evaluated\n            **kwargs: additional kwargs to pass to the function\n\n        Returns:\n            function(input, **function_kwargs_updated)\n\n        \"\"\"\n        return self.safe_function(input, **{**self.function_kwargs, **kwargs})\n\n    def evaluate_data(self, input_data: pd.DataFrame):\n\"\"\"evaluate dataframe of inputs\"\"\"\n        input_data = pd.DataFrame(input_data)\n\n        if self.vectorized:\n            output_data = self.safe_function(input_data, **self.function_kwargs)\n        else:\n            # This construction is needed to avoid a pickle error\n            inputs = input_data.to_dict(\"records\")\n\n            funcs = [self.function] * len(inputs)\n            kwargs = [self.function_kwargs] * len(inputs)\n\n            output_data = self.executor.map(\n                safe_function1_for_map,\n                funcs,\n                inputs,\n                kwargs,\n            )\n\n        return pd.DataFrame(output_data, index=input_data.index)\n\n    def safe_function(self, *args, **kwargs):\n\"\"\"\n        Safely call the function, handling exceptions.\n\n        Note that this should not be submitted to fuu\n        \"\"\"\n        return safe_function(self.function, *args, **kwargs)\n\n    def submit(self, input: Dict):\n\"\"\"submit a single input to the executor\n\n        Parameters\n        ----------\n        input : dict\n\n        Returns\n        -------\n        Future  : Future object\n        \"\"\"\n        if not isinstance(input, dict):\n            raise ValueError(\"input must be a dictionary\")\n        # return self.executor.submit(self.function, input, **self.function_kwargs)\n        # Must call a function outside of the classs\n        # See: https://stackoverflow.com/questions/44144584/typeerror-cant-pickle-thread-lock-objects\n        return self.executor.submit(\n            safe_function, self.function, input, **self.function_kwargs\n        )\n\n    def submit_data(self, input_data: pd.DataFrame):\n\"\"\"submit dataframe of inputs to executor\"\"\"\n        input_data = pd.DataFrame(input_data)  # cast to dataframe for consistency\n\n        if self.vectorized:\n            # Single submission, cast to numpy array\n            inputs = input_data.to_dict(orient=\"list\")\n            for key, value in inputs.items():\n                inputs[key] = np.array(value)\n            futures = [self.submit(inputs)]  # Single item\n        else:\n            # Do not use iterrows or itertuples.\n            futures = [self.submit(inputs) for inputs in input_data.to_dict(\"records\")]\n\n        return futures\n</code></pre>"},{"location":"api/evaluator/#xopt.evaluator.Evaluator.Config","title":"<code>Config</code>","text":"<p>config</p> Source code in <code>xopt/evaluator.py</code> <pre><code>class Config:\n\"\"\"config\"\"\"\n\n    arbitrary_types_allowed = True\n</code></pre>"},{"location":"api/evaluator/#xopt.evaluator.Evaluator.evaluate","title":"<code>evaluate(input, **kwargs)</code>","text":"<p>Evaluate a single input dict using Evaluator.function with Evaluator.function_kwargs.</p> <p>Further kwargs are passed to the function.</p> <p>Inputs:     inputs: dict of inputs to be evaluated     **kwargs: additional kwargs to pass to the function</p> <p>Returns:     function(input, **function_kwargs_updated)</p> Source code in <code>xopt/evaluator.py</code> <pre><code>def evaluate(self, input: Dict, **kwargs):\n\"\"\"\n    Evaluate a single input dict using Evaluator.function with\n    Evaluator.function_kwargs.\n\n    Further kwargs are passed to the function.\n\n    Inputs:\n        inputs: dict of inputs to be evaluated\n        **kwargs: additional kwargs to pass to the function\n\n    Returns:\n        function(input, **function_kwargs_updated)\n\n    \"\"\"\n    return self.safe_function(input, **{**self.function_kwargs, **kwargs})\n</code></pre>"},{"location":"api/evaluator/#xopt.evaluator.Evaluator.evaluate_data","title":"<code>evaluate_data(input_data)</code>","text":"<p>evaluate dataframe of inputs</p> Source code in <code>xopt/evaluator.py</code> <pre><code>def evaluate_data(self, input_data: pd.DataFrame):\n\"\"\"evaluate dataframe of inputs\"\"\"\n    input_data = pd.DataFrame(input_data)\n\n    if self.vectorized:\n        output_data = self.safe_function(input_data, **self.function_kwargs)\n    else:\n        # This construction is needed to avoid a pickle error\n        inputs = input_data.to_dict(\"records\")\n\n        funcs = [self.function] * len(inputs)\n        kwargs = [self.function_kwargs] * len(inputs)\n\n        output_data = self.executor.map(\n            safe_function1_for_map,\n            funcs,\n            inputs,\n            kwargs,\n        )\n\n    return pd.DataFrame(output_data, index=input_data.index)\n</code></pre>"},{"location":"api/evaluator/#xopt.evaluator.Evaluator.safe_function","title":"<code>safe_function(*args, **kwargs)</code>","text":"<p>Safely call the function, handling exceptions.</p> <p>Note that this should not be submitted to fuu</p> Source code in <code>xopt/evaluator.py</code> <pre><code>def safe_function(self, *args, **kwargs):\n\"\"\"\n    Safely call the function, handling exceptions.\n\n    Note that this should not be submitted to fuu\n    \"\"\"\n    return safe_function(self.function, *args, **kwargs)\n</code></pre>"},{"location":"api/evaluator/#xopt.evaluator.Evaluator.submit","title":"<code>submit(input)</code>","text":"<p>submit a single input to the executor</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>dict</code> required <p>Returns:</p> Name Type Description <code>Future</code> <code>Future object</code> Source code in <code>xopt/evaluator.py</code> <pre><code>def submit(self, input: Dict):\n\"\"\"submit a single input to the executor\n\n    Parameters\n    ----------\n    input : dict\n\n    Returns\n    -------\n    Future  : Future object\n    \"\"\"\n    if not isinstance(input, dict):\n        raise ValueError(\"input must be a dictionary\")\n    # return self.executor.submit(self.function, input, **self.function_kwargs)\n    # Must call a function outside of the classs\n    # See: https://stackoverflow.com/questions/44144584/typeerror-cant-pickle-thread-lock-objects\n    return self.executor.submit(\n        safe_function, self.function, input, **self.function_kwargs\n    )\n</code></pre>"},{"location":"api/evaluator/#xopt.evaluator.Evaluator.submit_data","title":"<code>submit_data(input_data)</code>","text":"<p>submit dataframe of inputs to executor</p> Source code in <code>xopt/evaluator.py</code> <pre><code>def submit_data(self, input_data: pd.DataFrame):\n\"\"\"submit dataframe of inputs to executor\"\"\"\n    input_data = pd.DataFrame(input_data)  # cast to dataframe for consistency\n\n    if self.vectorized:\n        # Single submission, cast to numpy array\n        inputs = input_data.to_dict(orient=\"list\")\n        for key, value in inputs.items():\n            inputs[key] = np.array(value)\n        futures = [self.submit(inputs)]  # Single item\n    else:\n        # Do not use iterrows or itertuples.\n        futures = [self.submit(inputs) for inputs in input_data.to_dict(\"records\")]\n\n    return futures\n</code></pre>"},{"location":"api/generators/","title":"Base generator class","text":""},{"location":"api/generators/#xopt.generator","title":"<code>xopt.generator</code>","text":""},{"location":"api/generators/#xopt.generator.Generator","title":"<code>Generator</code>","text":"<p>         Bases: <code>XoptBaseModel</code>, <code>ABC</code></p> Source code in <code>xopt/generator.py</code> <pre><code>class Generator(XoptBaseModel, ABC):\n    name: ClassVar[str] = Field(description=\"generator name\")\n    vocs: VOCS = Field(description=\"generator VOCS\", exclude=True)\n    data: pd.DataFrame = Field(\n        pd.DataFrame(), description=\"generator data\", exclude=True\n    )\n\n    supports_batch_generation: ClassVar[bool] = Field(\n        default=False,\n        description=\"flag that describes if this \"\n        \"generator can generate \"\n        \"batches of points\",\n    )\n    supports_multi_objective: ClassVar[bool] = Field(\n        default=False,\n        description=\"flag that describes if this generator can solve multi-objective \"\n        \"problems\",\n    )\n\n    # @validator(\"vocs\", pre=True)\n    # def vocs_validation(cls, v):\n    #     # do vocs first\n    #     return v\n\n    class Config:\n        validate_assignment = True\n\n    def __init__(self, **kwargs):\n\"\"\"\n        Initialize the generator.\n\n        Args:\n            vocs: The vocs to use.\n            options: The options to use.\n        \"\"\"\n        super().__init__(**kwargs)\n        _check_vocs(self.vocs, self.supports_multi_objective)\n        logger.info(f\"Initialized generator {self.name}\")\n\n    @abstractmethod\n    def generate(self, n_candidates) -&gt; pd.DataFrame:\n\"\"\"\n        generate `n_candidates` candidates\n\n        \"\"\"\n        pass\n\n    def add_data(self, new_data: pd.DataFrame):\n\"\"\"\n        update dataframe with results from new evaluations.\n\n        This is intended for generators that maintain their own data.\n\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/generators/#xopt.generator.Generator.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Initialize the generator.</p> <p>Args:     vocs: The vocs to use.     options: The options to use.</p> Source code in <code>xopt/generator.py</code> <pre><code>def __init__(self, **kwargs):\n\"\"\"\n    Initialize the generator.\n\n    Args:\n        vocs: The vocs to use.\n        options: The options to use.\n    \"\"\"\n    super().__init__(**kwargs)\n    _check_vocs(self.vocs, self.supports_multi_objective)\n    logger.info(f\"Initialized generator {self.name}\")\n</code></pre>"},{"location":"api/generators/#xopt.generator.Generator.add_data","title":"<code>add_data(new_data)</code>","text":"<p>update dataframe with results from new evaluations.</p> <p>This is intended for generators that maintain their own data.</p> Source code in <code>xopt/generator.py</code> <pre><code>def add_data(self, new_data: pd.DataFrame):\n\"\"\"\n    update dataframe with results from new evaluations.\n\n    This is intended for generators that maintain their own data.\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/generators/#xopt.generator.Generator.generate","title":"<code>generate(n_candidates)</code>  <code>abstractmethod</code>","text":"<p>generate <code>n_candidates</code> candidates</p> Source code in <code>xopt/generator.py</code> <pre><code>@abstractmethod\ndef generate(self, n_candidates) -&gt; pd.DataFrame:\n\"\"\"\n    generate `n_candidates` candidates\n\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/vocs/","title":"Vocs","text":""},{"location":"api/vocs/#xopt.vocs.VOCS","title":"<code>xopt.vocs.VOCS</code>","text":"<p>         Bases: <code>XoptBaseModel</code></p> <p>Variables, Objectives, Constraints, and other Settings (VOCS) data structure to describe optimization problems.</p> Source code in <code>xopt/vocs.py</code> <pre><code>class VOCS(XoptBaseModel):\n\"\"\"\n    Variables, Objectives, Constraints, and other Settings (VOCS) data structure\n    to describe optimization problems.\n    \"\"\"\n\n    variables: Dict[str, conlist(float, min_items=2, max_items=2)] = Field(\n        default={},\n        description=\"input variable names with a list of minimum and maximum values\",\n    )\n    constraints: Dict[\n        str, conlist(Union[float, ConstraintEnum], min_items=2, max_items=2)\n    ] = Field(\n        default={},\n        description=\"constraint names with a list of constraint type and value\",\n    )\n    objectives: Dict[str, ObjectiveEnum] = Field(\n        default={}, description=\"objective names with type of objective\"\n    )\n    constants: Dict[str, Any] = Field(\n        default={}, description=\"constant names and values passed to evaluate function\"\n    )\n    observables: List[str] = Field(\n        default=[],\n        description=\"observation names tracked alongside objectives and constraints\",\n    )\n\n    class Config:\n        validate_assignment = True  # Not sure this helps in this case\n        use_enum_values = True\n\n    @classmethod\n    def from_yaml(cls, yaml_text):\n        return cls.parse_obj(yaml.safe_load(yaml_text))\n\n    def as_yaml(self):\n        return yaml.dump(self.dict(), default_flow_style=None, sort_keys=False)\n\n    @property\n    def bounds(self):\n\"\"\"\n        Returns a bounds array (mins, maxs) of shape (2, n_variables)\n        Arrays of lower and upper bounds can be extracted by:\n            mins, maxs = vocs.bounds\n        \"\"\"\n        return np.array([v for _, v in sorted(self.variables.items())]).T\n\n    @property\n    def variable_names(self):\n\"\"\"Returns a sorted list of variable names\"\"\"\n        return list(sorted(self.variables.keys()))\n\n    @property\n    def objective_names(self):\n\"\"\"Returns a sorted list of objective names\"\"\"\n        return list(sorted(self.objectives.keys()))\n\n    @property\n    def constraint_names(self):\n\"\"\"Returns a sorted list of constraint names\"\"\"\n        if self.constraints is None:\n            return []\n        return list(sorted(self.constraints.keys()))\n\n    @property\n    def observable_names(self):\n        return sorted(self.observables)\n\n    @property\n    def output_names(self):\n\"\"\"\n        Returns a sorted list of objective and constraint names (objectives first\n        then constraints)\n        \"\"\"\n        return self.objective_names + self.constraint_names + self.observable_names\n\n    @property\n    def constant_names(self):\n\"\"\"Returns a sorted list of constraint names\"\"\"\n        if self.constants is None:\n            return []\n        return list(sorted(self.constants.keys()))\n\n    @property\n    def all_names(self):\n\"\"\"Returns all vocs names (variables, constants, objectives, constraints\"\"\"\n        return (\n            self.variable_names\n            + self.constant_names\n            + self.objective_names\n            + self.constraint_names\n            + self.observable_names\n        )\n\n    @property\n    def n_variables(self):\n\"\"\"Returns the number of variables\"\"\"\n        return len(self.variables)\n\n    @property\n    def n_constants(self):\n\"\"\"Returns the number of constants\"\"\"\n        return len(self.constants)\n\n    @property\n    def n_inputs(self):\n\"\"\"Returns the number of inputs (variables and constants)\"\"\"\n        return self.n_variables + self.n_constants\n\n    @property\n    def n_objectives(self):\n\"\"\"Returns the number of objectives\"\"\"\n        return len(self.objectives)\n\n    @property\n    def n_constraints(self):\n\"\"\"Returns the number of constraints\"\"\"\n        return len(self.constraints)\n\n    @property\n    def n_observables(self):\n\"\"\"Returns the number of constraints\"\"\"\n        return len(self.observables)\n\n    @property\n    def n_outputs(self):\n\"\"\"Returns the number of outputs (objectives and constraints)\"\"\"\n        return self.n_objectives + self.n_constraints + self.n_observables\n\n    def random_inputs(\n        self,\n        n: int = None,\n        custom_bounds: dict = None,\n        include_constants: bool = True,\n        seed: int = None,\n    ):\n\"\"\"\n        Uniform sampling of the variables.\n\n        Returns a dict of inputs.\n\n        If include_constants, the vocs.constants are added to the dict.\n\n        Optional:\n            n (integer) to make arrays of inputs, of size n.\n            seed (integer) to initialize the random number generator\n\n        \"\"\"\n        inputs = {}\n        if seed is None:\n            rng_sample_function = np.random.random\n        else:\n            rng = np.random.default_rng(seed=seed)\n            rng_sample_function = rng.random\n\n        # get bounds\n        # if custom_bounds is specified then they will be clipped inside\n        # vocs variable bounds\n        if custom_bounds is None:\n            bounds = self.variables\n        else:\n            variable_bounds = pd.DataFrame(self.variables)\n            custom_bounds = pd.DataFrame(custom_bounds)\n            custom_bounds = custom_bounds.clip(\n                variable_bounds.iloc[0], variable_bounds.iloc[1], axis=1\n            )\n            bounds = custom_bounds.to_dict()\n            for k in bounds.keys():\n                bounds[k] = [bounds[k][i] for i in range(2)]\n\n        for key, val in bounds.items():  # No need to sort here\n            a, b = val\n            x = rng_sample_function(n)\n            inputs[key] = x * a + (1 - x) * b\n\n        # Constants\n        if include_constants and self.constants is not None:\n            inputs.update(self.constants)\n\n        return inputs\n\n    def convert_dataframe_to_inputs(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"\n        Extracts only inputs from a dataframe.\n        This will add constants.\n        \"\"\"\n        # make sure that the df keys contain the vocs variables\n        if not set(self.variable_names).issubset(set(data.keys())):\n            raise RuntimeError(\n                \"input dataframe must at least contain the vocs variables\"\n            )\n\n        # only keep the variables\n        in_copy = data[self.variable_names].copy()\n\n        # append constants\n        constants = self.constants\n        if constants is not None:\n            for name, val in constants.items():\n                in_copy[name] = val\n\n        return in_copy\n\n    def convert_numpy_to_inputs(self, inputs: np.ndarray) -&gt; pd.DataFrame:\n\"\"\"\n        convert 2D numpy array to list of dicts (inputs) for evaluation\n        Assumes that the columns of the array match correspond to\n        `sorted(self.vocs.variables.keys())\n\n        \"\"\"\n        df = pd.DataFrame(inputs, columns=self.variable_names)\n        return self.convert_dataframe_to_inputs(df)\n\n    # Extract optimization data (in correct column order)\n    def variable_data(\n        self,\n        data: Union[pd.DataFrame, List[Dict], List[Dict]],\n        prefix: str = \"variable_\",\n    ) -&gt; pd.DataFrame:\n\"\"\"\n        Returns a dataframe containing variables according to `vocs.variables` in sorted\n        order\n\n        Args:\n            data: Data to be processed.\n            prefix: Prefix added to column names.\n\n        Returns:\n            result: processed Dataframe\n        \"\"\"\n        return form_variable_data(self.variables, data, prefix=prefix)\n\n    def objective_data(\n        self,\n        data: Union[pd.DataFrame, List[Dict], List[Dict]],\n        prefix: str = \"objective_\",\n        return_raw=False,\n    ) -&gt; pd.DataFrame:\n\"\"\"\n        Returns a dataframe containing objective data transformed according to\n        `vocs.objectives` such that we always assume minimization.\n\n        Args:\n            data: data to be processed.\n            prefix: prefix added to column names.\n\n        Returns:\n            result: processed Dataframe\n        \"\"\"\n        return form_objective_data(self.objectives, data, prefix, return_raw)\n\n    def constraint_data(\n        self,\n        data: Union[pd.DataFrame, List[Dict], List[Dict]],\n        prefix: str = \"constraint_\",\n    ) -&gt; pd.DataFrame:\n\"\"\"\n        Returns a dataframe containing constraint data transformed according to\n        `vocs.constraints` such that values that satisfy each constraint are negative.\n\n        Args:\n            data: data to be processed.\n            prefix: prefix added to column names.\n\n        Returns:\n            result: processed Dataframe\n        \"\"\"\n        return form_constraint_data(self.constraints, data, prefix)\n\n    def observable_data(\n        self,\n        data: Union[pd.DataFrame, List[Dict], List[Dict]],\n        prefix: str = \"observable_\",\n    ) -&gt; pd.DataFrame:\n\"\"\"\n        Returns a dataframe containing observable data\n\n        Args:\n            data: data to be processed.\n            prefix: prefix added to column names.\n\n        Returns:\n            result: processed Dataframe\n        \"\"\"\n        return form_observable_data(self.observable_names, data, prefix)\n\n    def feasibility_data(\n        self,\n        data: Union[pd.DataFrame, List[Dict], List[Dict]],\n        prefix: str = \"feasible_\",\n    ) -&gt; pd.DataFrame:\n\"\"\"\n        Returns a dataframe containing booleans denoting if a constraint is satisfied or\n        not. Returned dataframe also contains a column `feasibility` which denotes if\n        all constraints are satisfied.\n\n        Args:\n            data: data to be processed.\n            prefix: prefix added to column names.\n\n        Returns:\n            result: processed Dataframe\n        \"\"\"\n        return form_feasibility_data(self.constraints, data, prefix)\n\n    def validate_input_data(self, input_points: pd.DataFrame) -&gt; None:\n\"\"\"\n        Validates input data. Raises an error if the input data does not satisfy\n        requirements given by vocs.\n\n        Args:\n            input_points: input data to be validated.\n\n        Returns:\n            None\n\n        Raises:\n            ValueError: if input data does not satisfy requirements.\n        \"\"\"\n        validate_input_data(self, input_points)\n\n    def extract_data(self, data: pd.DataFrame, return_raw=False):\n\"\"\"\n        split dataframe into seperate dataframes for variables, objectives and\n        constraints based on vocs - objective data is transformed based on\n        `vocs.objectives` properties\n\n        Args:\n            data: dataframe to be split\n            return_raw: if True, return untransformed objective data\n\n        Returns:\n            variable_data: dataframe containing variable data\n            objective_data: dataframe containing objective data\n            constraint_data: dataframe containing constraint data\n        \"\"\"\n        variable_data = self.variable_data(data, \"\")\n        objective_data = self.objective_data(data, \"\", return_raw)\n        constraint_data = self.constraint_data(data, \"\")\n        return variable_data, objective_data, constraint_data\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.all_names","title":"<code>all_names</code>  <code>property</code>","text":"<p>Returns all vocs names (variables, constants, objectives, constraints</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.bounds","title":"<code>bounds</code>  <code>property</code>","text":"<p>Returns a bounds array (mins, maxs) of shape (2, n_variables) Arrays of lower and upper bounds can be extracted by:     mins, maxs = vocs.bounds</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.constant_names","title":"<code>constant_names</code>  <code>property</code>","text":"<p>Returns a sorted list of constraint names</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.constraint_names","title":"<code>constraint_names</code>  <code>property</code>","text":"<p>Returns a sorted list of constraint names</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.n_constants","title":"<code>n_constants</code>  <code>property</code>","text":"<p>Returns the number of constants</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.n_constraints","title":"<code>n_constraints</code>  <code>property</code>","text":"<p>Returns the number of constraints</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.n_inputs","title":"<code>n_inputs</code>  <code>property</code>","text":"<p>Returns the number of inputs (variables and constants)</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.n_objectives","title":"<code>n_objectives</code>  <code>property</code>","text":"<p>Returns the number of objectives</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.n_observables","title":"<code>n_observables</code>  <code>property</code>","text":"<p>Returns the number of constraints</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.n_outputs","title":"<code>n_outputs</code>  <code>property</code>","text":"<p>Returns the number of outputs (objectives and constraints)</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.n_variables","title":"<code>n_variables</code>  <code>property</code>","text":"<p>Returns the number of variables</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.objective_names","title":"<code>objective_names</code>  <code>property</code>","text":"<p>Returns a sorted list of objective names</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.output_names","title":"<code>output_names</code>  <code>property</code>","text":"<p>Returns a sorted list of objective and constraint names (objectives first then constraints)</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.variable_names","title":"<code>variable_names</code>  <code>property</code>","text":"<p>Returns a sorted list of variable names</p>"},{"location":"api/vocs/#xopt.vocs.VOCS.constraint_data","title":"<code>constraint_data(data, prefix='constraint_')</code>","text":"<p>Returns a dataframe containing constraint data transformed according to <code>vocs.constraints</code> such that values that satisfy each constraint are negative.</p> <p>Args:     data: data to be processed.     prefix: prefix added to column names.</p> <p>Returns:     result: processed Dataframe</p> Source code in <code>xopt/vocs.py</code> <pre><code>def constraint_data(\n    self,\n    data: Union[pd.DataFrame, List[Dict], List[Dict]],\n    prefix: str = \"constraint_\",\n) -&gt; pd.DataFrame:\n\"\"\"\n    Returns a dataframe containing constraint data transformed according to\n    `vocs.constraints` such that values that satisfy each constraint are negative.\n\n    Args:\n        data: data to be processed.\n        prefix: prefix added to column names.\n\n    Returns:\n        result: processed Dataframe\n    \"\"\"\n    return form_constraint_data(self.constraints, data, prefix)\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.convert_dataframe_to_inputs","title":"<code>convert_dataframe_to_inputs(data)</code>","text":"<p>Extracts only inputs from a dataframe. This will add constants.</p> Source code in <code>xopt/vocs.py</code> <pre><code>def convert_dataframe_to_inputs(self, data: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"\n    Extracts only inputs from a dataframe.\n    This will add constants.\n    \"\"\"\n    # make sure that the df keys contain the vocs variables\n    if not set(self.variable_names).issubset(set(data.keys())):\n        raise RuntimeError(\n            \"input dataframe must at least contain the vocs variables\"\n        )\n\n    # only keep the variables\n    in_copy = data[self.variable_names].copy()\n\n    # append constants\n    constants = self.constants\n    if constants is not None:\n        for name, val in constants.items():\n            in_copy[name] = val\n\n    return in_copy\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.convert_numpy_to_inputs","title":"<code>convert_numpy_to_inputs(inputs)</code>","text":"<p>convert 2D numpy array to list of dicts (inputs) for evaluation Assumes that the columns of the array match correspond to `sorted(self.vocs.variables.keys())</p> Source code in <code>xopt/vocs.py</code> <pre><code>def convert_numpy_to_inputs(self, inputs: np.ndarray) -&gt; pd.DataFrame:\n\"\"\"\n    convert 2D numpy array to list of dicts (inputs) for evaluation\n    Assumes that the columns of the array match correspond to\n    `sorted(self.vocs.variables.keys())\n\n    \"\"\"\n    df = pd.DataFrame(inputs, columns=self.variable_names)\n    return self.convert_dataframe_to_inputs(df)\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.extract_data","title":"<code>extract_data(data, return_raw=False)</code>","text":"<p>split dataframe into seperate dataframes for variables, objectives and constraints based on vocs - objective data is transformed based on <code>vocs.objectives</code> properties</p> <p>Args:     data: dataframe to be split     return_raw: if True, return untransformed objective data</p> <p>Returns:     variable_data: dataframe containing variable data     objective_data: dataframe containing objective data     constraint_data: dataframe containing constraint data</p> Source code in <code>xopt/vocs.py</code> <pre><code>def extract_data(self, data: pd.DataFrame, return_raw=False):\n\"\"\"\n    split dataframe into seperate dataframes for variables, objectives and\n    constraints based on vocs - objective data is transformed based on\n    `vocs.objectives` properties\n\n    Args:\n        data: dataframe to be split\n        return_raw: if True, return untransformed objective data\n\n    Returns:\n        variable_data: dataframe containing variable data\n        objective_data: dataframe containing objective data\n        constraint_data: dataframe containing constraint data\n    \"\"\"\n    variable_data = self.variable_data(data, \"\")\n    objective_data = self.objective_data(data, \"\", return_raw)\n    constraint_data = self.constraint_data(data, \"\")\n    return variable_data, objective_data, constraint_data\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.feasibility_data","title":"<code>feasibility_data(data, prefix='feasible_')</code>","text":"<p>Returns a dataframe containing booleans denoting if a constraint is satisfied or not. Returned dataframe also contains a column <code>feasibility</code> which denotes if all constraints are satisfied.</p> <p>Args:     data: data to be processed.     prefix: prefix added to column names.</p> <p>Returns:     result: processed Dataframe</p> Source code in <code>xopt/vocs.py</code> <pre><code>def feasibility_data(\n    self,\n    data: Union[pd.DataFrame, List[Dict], List[Dict]],\n    prefix: str = \"feasible_\",\n) -&gt; pd.DataFrame:\n\"\"\"\n    Returns a dataframe containing booleans denoting if a constraint is satisfied or\n    not. Returned dataframe also contains a column `feasibility` which denotes if\n    all constraints are satisfied.\n\n    Args:\n        data: data to be processed.\n        prefix: prefix added to column names.\n\n    Returns:\n        result: processed Dataframe\n    \"\"\"\n    return form_feasibility_data(self.constraints, data, prefix)\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.objective_data","title":"<code>objective_data(data, prefix='objective_', return_raw=False)</code>","text":"<p>Returns a dataframe containing objective data transformed according to <code>vocs.objectives</code> such that we always assume minimization.</p> <p>Args:     data: data to be processed.     prefix: prefix added to column names.</p> <p>Returns:     result: processed Dataframe</p> Source code in <code>xopt/vocs.py</code> <pre><code>def objective_data(\n    self,\n    data: Union[pd.DataFrame, List[Dict], List[Dict]],\n    prefix: str = \"objective_\",\n    return_raw=False,\n) -&gt; pd.DataFrame:\n\"\"\"\n    Returns a dataframe containing objective data transformed according to\n    `vocs.objectives` such that we always assume minimization.\n\n    Args:\n        data: data to be processed.\n        prefix: prefix added to column names.\n\n    Returns:\n        result: processed Dataframe\n    \"\"\"\n    return form_objective_data(self.objectives, data, prefix, return_raw)\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.observable_data","title":"<code>observable_data(data, prefix='observable_')</code>","text":"<p>Returns a dataframe containing observable data</p> <p>Args:     data: data to be processed.     prefix: prefix added to column names.</p> <p>Returns:     result: processed Dataframe</p> Source code in <code>xopt/vocs.py</code> <pre><code>def observable_data(\n    self,\n    data: Union[pd.DataFrame, List[Dict], List[Dict]],\n    prefix: str = \"observable_\",\n) -&gt; pd.DataFrame:\n\"\"\"\n    Returns a dataframe containing observable data\n\n    Args:\n        data: data to be processed.\n        prefix: prefix added to column names.\n\n    Returns:\n        result: processed Dataframe\n    \"\"\"\n    return form_observable_data(self.observable_names, data, prefix)\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.random_inputs","title":"<code>random_inputs(n=None, custom_bounds=None, include_constants=True, seed=None)</code>","text":"<p>Uniform sampling of the variables.</p> <p>Returns a dict of inputs.</p> <p>If include_constants, the vocs.constants are added to the dict.</p> <p>Optional:     n (integer) to make arrays of inputs, of size n.     seed (integer) to initialize the random number generator</p> Source code in <code>xopt/vocs.py</code> <pre><code>def random_inputs(\n    self,\n    n: int = None,\n    custom_bounds: dict = None,\n    include_constants: bool = True,\n    seed: int = None,\n):\n\"\"\"\n    Uniform sampling of the variables.\n\n    Returns a dict of inputs.\n\n    If include_constants, the vocs.constants are added to the dict.\n\n    Optional:\n        n (integer) to make arrays of inputs, of size n.\n        seed (integer) to initialize the random number generator\n\n    \"\"\"\n    inputs = {}\n    if seed is None:\n        rng_sample_function = np.random.random\n    else:\n        rng = np.random.default_rng(seed=seed)\n        rng_sample_function = rng.random\n\n    # get bounds\n    # if custom_bounds is specified then they will be clipped inside\n    # vocs variable bounds\n    if custom_bounds is None:\n        bounds = self.variables\n    else:\n        variable_bounds = pd.DataFrame(self.variables)\n        custom_bounds = pd.DataFrame(custom_bounds)\n        custom_bounds = custom_bounds.clip(\n            variable_bounds.iloc[0], variable_bounds.iloc[1], axis=1\n        )\n        bounds = custom_bounds.to_dict()\n        for k in bounds.keys():\n            bounds[k] = [bounds[k][i] for i in range(2)]\n\n    for key, val in bounds.items():  # No need to sort here\n        a, b = val\n        x = rng_sample_function(n)\n        inputs[key] = x * a + (1 - x) * b\n\n    # Constants\n    if include_constants and self.constants is not None:\n        inputs.update(self.constants)\n\n    return inputs\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.validate_input_data","title":"<code>validate_input_data(input_points)</code>","text":"<p>Validates input data. Raises an error if the input data does not satisfy requirements given by vocs.</p> <p>Args:     input_points: input data to be validated.</p> <p>Returns:     None</p> <p>Raises:     ValueError: if input data does not satisfy requirements.</p> Source code in <code>xopt/vocs.py</code> <pre><code>def validate_input_data(self, input_points: pd.DataFrame) -&gt; None:\n\"\"\"\n    Validates input data. Raises an error if the input data does not satisfy\n    requirements given by vocs.\n\n    Args:\n        input_points: input data to be validated.\n\n    Returns:\n        None\n\n    Raises:\n        ValueError: if input data does not satisfy requirements.\n    \"\"\"\n    validate_input_data(self, input_points)\n</code></pre>"},{"location":"api/vocs/#xopt.vocs.VOCS.variable_data","title":"<code>variable_data(data, prefix='variable_')</code>","text":"<p>Returns a dataframe containing variables according to <code>vocs.variables</code> in sorted order</p> <p>Args:     data: Data to be processed.     prefix: Prefix added to column names.</p> <p>Returns:     result: processed Dataframe</p> Source code in <code>xopt/vocs.py</code> <pre><code>def variable_data(\n    self,\n    data: Union[pd.DataFrame, List[Dict], List[Dict]],\n    prefix: str = \"variable_\",\n) -&gt; pd.DataFrame:\n\"\"\"\n    Returns a dataframe containing variables according to `vocs.variables` in sorted\n    order\n\n    Args:\n        data: Data to be processed.\n        prefix: Prefix added to column names.\n\n    Returns:\n        result: processed Dataframe\n    \"\"\"\n    return form_variable_data(self.variables, data, prefix=prefix)\n</code></pre>"},{"location":"api/xopt/","title":"Xopt","text":""},{"location":"api/xopt/#xopt.Xopt","title":"<code>xopt.Xopt</code>","text":"<p>Object to handle a single optimization problem.</p> Source code in <code>xopt/base.py</code> <pre><code>class Xopt:\n\"\"\"\n\n    Object to handle a single optimization problem.\n\n    \"\"\"\n\n    def __init__(\n        self,\n        config: dict = None,\n        *,\n        generator: Generator = None,\n        evaluator: Evaluator = None,\n        vocs: VOCS = None,\n        options: XoptOptions = None,\n        data: pd.DataFrame = None,\n    ):\n\"\"\"\n        Initialize Xopt object using either a config dictionary or explicitly\n\n        Args:\n            config: dict, or YAML or JSON str or file. This overrides all other arguments.\n\n            generator: Generator object\n            evaluator: Evaluator object\n            vocs: VOCS object\n            options: XoptOptions object\n            data: initial data to use\n\n        \"\"\"\n        logger.info(\"Initializing Xopt object\")\n\n        # if config is provided, load it and re-init. Otherwise, init normally.\n        if config is not None:\n            self.__init__(**parse_config(config))\n            # TODO: Allow overrides\n            return\n\n        # initialize Xopt object\n        self._generator = generator\n        self._evaluator = evaluator\n        self._vocs = vocs\n\n        logger.debug(f\"Xopt initialized with generator: {self._generator}\")\n        logger.debug(f\"Xopt initialized with evaluator: {self._evaluator}\")\n\n        self.options = options or XoptOptions()\n        logger.debug(f\"Xopt initialized with options: {self.options.dict()}\")\n\n        # add data to xopt object and generator\n        self._new_data = pd.DataFrame()\n        self._data = pd.DataFrame()\n        if (data is not None) and (not data.empty):\n            self.add_data(data)\n\n        self._futures = {}  # unfinished futures\n        self._input_data = None  # dataframe for unfinished futures inputs\n        self._ix_last = len(self.data)  # index of last sample generated\n        self._is_done = False\n        self.n_unfinished_futures = 0\n\n        # check internals\n        self.check_components()\n        logger.info(\"Xopt object initialized\")\n\n    def run(self):\n\"\"\"run until either xopt is done or the generator is done\"\"\"\n        while not self.is_done:\n            # Stopping criteria\n            if self.options.max_evaluations:\n                if len(self.data) &gt;= self.options.max_evaluations:\n                    self._is_done = True\n                    logger.info(\n                        \"Xopt is done. \"\n                        f\"Max evaluations {self.options.max_evaluations} reached.\"\n                    )\n                    break\n\n            self.step()\n\n    def evaluate_data(self, input_data: pd.DataFrame):\n\"\"\"\n        Evaluate data using the evaluator.\n        Adds to the internal dataframe.\n        \"\"\"\n        logger.debug(f\"Evaluating {len(input_data)} inputs\")\n        input_data = self.prepare_input_data(input_data)\n        output_data = self.evaluator.evaluate_data(input_data)\n\n        if self.options.strict:\n            validate_outputs(output_data)\n        new_data = pd.concat([input_data, output_data], axis=1)\n\n        self.add_data(new_data)\n        return new_data\n\n    def submit_data(self, input_data: pd.DataFrame):\n\"\"\"\n        Submit data to evaluator and return futures indexed to internal futures list.\n\n        Args:\n            input_data: dataframe containing input data\n\n        \"\"\"\n        logger.debug(f\"Submitting {len(input_data)} inputs\")\n        input_data = self.prepare_input_data(input_data)\n\n        # submit data to evaluator. Futures are keyed on the index of the input data.\n        futures = self.evaluator.submit_data(input_data)\n        index = input_data.index\n        # Special handling for vectorized evaluations\n        if self.evaluator.vectorized:\n            assert len(futures) == 1\n            new_futures = {tuple(index): futures[0]}\n        else:\n            new_futures = dict(zip(index, futures))\n\n        # add futures to internal list\n        for key, future in new_futures.items():\n            assert key not in self._futures\n            self._futures[key] = future\n        # self._futures.update(new_futures)\n        return futures\n\n    def prepare_input_data(self, input_data: pd.DataFrame):\n\"\"\"\n        re-index and validate input data.\n        \"\"\"\n        input_data = pd.DataFrame(input_data, copy=True)  # copy for reindexing\n\n        # Reindex input dataframe\n        input_data.index = np.arange(\n            self._ix_last + 1, self._ix_last + 1 + len(input_data)\n        )\n        self._ix_last += len(input_data)\n        self._input_data = pd.concat([self._input_data, input_data])\n\n        # validate data before submission\n        self.vocs.validate_input_data(self._input_data)\n\n        return input_data\n\n    def step(self):\n\"\"\"\n        run one optimization cycle\n\n        - determine the number of candidates to request from the generator\n        - pass candidate request to generator\n        - submit candidates to evaluator\n        - wait until all (asynch == False) or at least one (asynch == True) evaluation\n            is finished\n        - update data storage and generator data storage (if applicable)\n\n        \"\"\"\n        logger.info(\"Running Xopt step\")\n\n        # check if Xopt is set up to step\n        self.check_components()\n\n        if self.is_done:\n            logger.debug(\"Xopt is done, will not step.\")\n            return\n\n        # get number of candidates to generate\n        if self.options.asynch:\n            n_generate = self.evaluator.max_workers - self.n_unfinished_futures\n        else:\n            n_generate = self.evaluator.max_workers\n\n        # generate samples and submit to evaluator\n        logger.debug(f\"Generating {n_generate} candidates\")\n        new_samples = pd.DataFrame(self.generator.generate(n_generate))\n\n        # generator is done when it returns no new samples\n        if len(new_samples) == 0:\n            logger.debug(\"Generator returned 0 samples =&gt; optimization is done.\")\n            assert self.generator.is_done\n            self._is_done = self.generator.is_done  # terminate the run\n            return\n\n        #  Blocking submission/evaluation\n        if self.options.asynch:\n            # Submit data\n            self.submit_data(new_samples)\n            # Process futures\n            self.n_unfinished_futures = self.process_futures()\n        else:\n            # Evaluate data\n            self.evaluate_data(new_samples)\n\n        # dump data to file if specified\n        self.dump_state()\n\n    def process_futures(self):\n\"\"\"\n        wait for futures to finish (specified by asynch) and then internal dataframes\n        of Xopt and generator, finally return the number of unfinished futures\n\n        \"\"\"\n        if self.options.asynch:\n            logger.debug(\"Waiting for at least one future to complete\")\n            return_when = concurrent.futures.FIRST_COMPLETED\n        else:\n            logger.debug(\"Waiting for all futures to complete\")\n            return_when = concurrent.futures.ALL_COMPLETED\n        logger.debug(f\"done. {self.n_unfinished_futures} futures remaining\")\n\n        # wait for futures to finish (depending on return_when)\n        finished_futures, unfinished_futures = concurrent.futures.wait(\n            self._futures.values(), None, return_when\n        )\n\n        # Get done indexes.\n        ix_done = [ix for ix, future in self._futures.items() if future.done()]\n\n        # Get results from futures\n        output_data = []\n        for ix in ix_done:\n            future = self._futures.pop(ix)  # remove from futures\n            outputs = future.result()  # Exceptions are already handled by the evaluator\n            if self.options.strict:\n                if future.exception() is not None:\n                    raise future.exception()\n                validate_outputs(outputs)\n            output_data.append(outputs)\n\n        # Special handling of a vectorized futures.\n        # Dict keys have all indexes of the input data.\n        if self.evaluator.vectorized:\n            output_data = pd.concat([pd.DataFrame([output]) for output in output_data])\n            index = []\n            for ix in ix_done:\n                index.extend(list(ix))\n        else:\n            index = ix_done\n\n        # Collect done inputs and outputs\n        input_data_done = self._input_data.loc[index]\n        output_data = pd.DataFrame(output_data, index=index)\n\n        # Form completed evaluation\n        new_data = pd.concat([input_data_done, output_data], axis=1)\n\n        # Add to internal dataframes\n        self.add_data(new_data)\n\n        # Cleanup\n        self._input_data.drop(index, inplace=True)\n\n        return len(unfinished_futures)\n\n    def check_components(self):\n\"\"\"check to make sure everything is in place to step\"\"\"\n        if not isinstance(self.options, XoptOptions):\n            raise ValueError(\"options must of type `XoptOptions`\")\n\n        if self.generator is None:\n            raise XoptError(\"Xopt generator not specified\")\n\n        if self.evaluator is None:\n            raise XoptError(\"Xopt evaluator not specified\")\n\n        if self.vocs is None:\n            raise XoptError(\"Xopt VOCS is not specified\")\n\n    def dump_state(self):\n\"\"\"dump data to file\"\"\"\n        if self.options.dump_file is not None:\n            output = state_to_dict(self)\n            with open(self.options.dump_file, \"w\") as f:\n                yaml.dump(output, f)\n            logger.debug(f\"Dumped state to YAML file: {self.options.dump_file}\")\n\n    @property\n    def data(self):\n        return self._data\n\n    @data.setter\n    def data(self, data: pd.DataFrame):\n        # Replace xopt dataframe\n        self._data = pd.DataFrame(data)\n\n        # do not do anything with generator.\n        # Generator data should be handled with add_data.\n\n    def add_data(self, new_data: pd.DataFrame):\n\"\"\"\n        Concatenate new data to internal dataframe,\n        and also adds this data to the generator if it exists.\n        \"\"\"\n        logger.debug(f\"Adding {len(new_data)} new data to internal dataframes\")\n\n        # Set internal dataframe. Don't use self.data =\n        new_data = pd.DataFrame(new_data, copy=True)  # copy for reindexing\n        new_data.index = np.arange(\n            len(self._data) + 1, len(self._data) + len(new_data) + 1\n        )\n        self._data = pd.concat([self._data, new_data], axis=0)\n        self._new_data = new_data\n\n        if self.generator is not None:\n            self.generator.add_data(new_data)\n\n    @property\n    def is_done(self):\n        return self._is_done\n\n    @property\n    def new_data(self):\n        return self._new_data\n\n    @property\n    def vocs(self):\n        return self._vocs\n\n    @property\n    def evaluator(self):\n        return self._evaluator\n\n    @property\n    def generator(self):\n        return self._generator\n\n    @classmethod\n    def from_dict(cls, config_dict):\n        pass\n        # return cls(**xopt_kwargs_from_dict(config_dict))\n\n    @classmethod\n    def from_yaml(cls, yaml_str):\n        if os.path.exists(yaml_str):\n            yaml_str = open(yaml_str)\n        return cls.from_dict(yaml.safe_load(yaml_str))\n\n    def yaml(self, filename=None, *, include_data=False):\n\"\"\"\n        YAML representation of the Xopt object.\n        \"\"\"\n        config = state_to_dict(self, include_data=include_data)\n        s = yaml.dump(config, default_flow_style=None, sort_keys=False)\n\n        if filename:\n            with open(filename, \"w\") as f:\n                f.write(s)\n\n        return s\n\n    def __repr__(self):\n\"\"\"\n        Returns infor about the Xopt object, including the YAML representation without data.\n        \"\"\"\n        return f\"\"\"\n            Xopt\n________________________________\nVersion: {__version__}\nData size: {len(self.data)}\nConfig as YAML:\n{self.yaml()}\n\"\"\"\n\n    def __str__(self):\n        return self.__repr__()\n\n    # Convenience methods\n\n    def random_inputs(self, n_samples=1, seed=None, **kwargs):\n\"\"\"\n        Convenence method to call vocs.random_inputs\n        \"\"\"\n        return self.vocs.random_inputs(n_samples, seed=seed, **kwargs)\n\n    def evaluate(self, inputs: Dict, **kwargs):\n\"\"\"\n        Convenience method to call evaluator.evaluate\n        \"\"\"\n        return self.evaluator.evaluate(inputs, **kwargs)\n\n    def random_evaluate(self, n_samples=1, seed=None, **kwargs):\n\"\"\"\n        Convenience method to generate random inputs using vocs\n        and evaluate them (adding data to Xopt object and generator.\n        \"\"\"\n        index = [1] if n_samples == 1 else None\n        random_inputs = pd.DataFrame(\n            self.random_inputs(n_samples, seed=seed, **kwargs), index=index\n        )\n        result = self.evaluate_data(random_inputs)\n        return result\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.__init__","title":"<code>__init__(config=None, *, generator=None, evaluator=None, vocs=None, options=None, data=None)</code>","text":"<p>Initialize Xopt object using either a config dictionary or explicitly</p> <p>Args:     config: dict, or YAML or JSON str or file. This overrides all other arguments.</p> <pre><code>generator: Generator object\nevaluator: Evaluator object\nvocs: VOCS object\noptions: XoptOptions object\ndata: initial data to use\n</code></pre> Source code in <code>xopt/base.py</code> <pre><code>def __init__(\n    self,\n    config: dict = None,\n    *,\n    generator: Generator = None,\n    evaluator: Evaluator = None,\n    vocs: VOCS = None,\n    options: XoptOptions = None,\n    data: pd.DataFrame = None,\n):\n\"\"\"\n    Initialize Xopt object using either a config dictionary or explicitly\n\n    Args:\n        config: dict, or YAML or JSON str or file. This overrides all other arguments.\n\n        generator: Generator object\n        evaluator: Evaluator object\n        vocs: VOCS object\n        options: XoptOptions object\n        data: initial data to use\n\n    \"\"\"\n    logger.info(\"Initializing Xopt object\")\n\n    # if config is provided, load it and re-init. Otherwise, init normally.\n    if config is not None:\n        self.__init__(**parse_config(config))\n        # TODO: Allow overrides\n        return\n\n    # initialize Xopt object\n    self._generator = generator\n    self._evaluator = evaluator\n    self._vocs = vocs\n\n    logger.debug(f\"Xopt initialized with generator: {self._generator}\")\n    logger.debug(f\"Xopt initialized with evaluator: {self._evaluator}\")\n\n    self.options = options or XoptOptions()\n    logger.debug(f\"Xopt initialized with options: {self.options.dict()}\")\n\n    # add data to xopt object and generator\n    self._new_data = pd.DataFrame()\n    self._data = pd.DataFrame()\n    if (data is not None) and (not data.empty):\n        self.add_data(data)\n\n    self._futures = {}  # unfinished futures\n    self._input_data = None  # dataframe for unfinished futures inputs\n    self._ix_last = len(self.data)  # index of last sample generated\n    self._is_done = False\n    self.n_unfinished_futures = 0\n\n    # check internals\n    self.check_components()\n    logger.info(\"Xopt object initialized\")\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.add_data","title":"<code>add_data(new_data)</code>","text":"<p>Concatenate new data to internal dataframe, and also adds this data to the generator if it exists.</p> Source code in <code>xopt/base.py</code> <pre><code>def add_data(self, new_data: pd.DataFrame):\n\"\"\"\n    Concatenate new data to internal dataframe,\n    and also adds this data to the generator if it exists.\n    \"\"\"\n    logger.debug(f\"Adding {len(new_data)} new data to internal dataframes\")\n\n    # Set internal dataframe. Don't use self.data =\n    new_data = pd.DataFrame(new_data, copy=True)  # copy for reindexing\n    new_data.index = np.arange(\n        len(self._data) + 1, len(self._data) + len(new_data) + 1\n    )\n    self._data = pd.concat([self._data, new_data], axis=0)\n    self._new_data = new_data\n\n    if self.generator is not None:\n        self.generator.add_data(new_data)\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.check_components","title":"<code>check_components()</code>","text":"<p>check to make sure everything is in place to step</p> Source code in <code>xopt/base.py</code> <pre><code>def check_components(self):\n\"\"\"check to make sure everything is in place to step\"\"\"\n    if not isinstance(self.options, XoptOptions):\n        raise ValueError(\"options must of type `XoptOptions`\")\n\n    if self.generator is None:\n        raise XoptError(\"Xopt generator not specified\")\n\n    if self.evaluator is None:\n        raise XoptError(\"Xopt evaluator not specified\")\n\n    if self.vocs is None:\n        raise XoptError(\"Xopt VOCS is not specified\")\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.dump_state","title":"<code>dump_state()</code>","text":"<p>dump data to file</p> Source code in <code>xopt/base.py</code> <pre><code>def dump_state(self):\n\"\"\"dump data to file\"\"\"\n    if self.options.dump_file is not None:\n        output = state_to_dict(self)\n        with open(self.options.dump_file, \"w\") as f:\n            yaml.dump(output, f)\n        logger.debug(f\"Dumped state to YAML file: {self.options.dump_file}\")\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.evaluate","title":"<code>evaluate(inputs, **kwargs)</code>","text":"<p>Convenience method to call evaluator.evaluate</p> Source code in <code>xopt/base.py</code> <pre><code>def evaluate(self, inputs: Dict, **kwargs):\n\"\"\"\n    Convenience method to call evaluator.evaluate\n    \"\"\"\n    return self.evaluator.evaluate(inputs, **kwargs)\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.evaluate_data","title":"<code>evaluate_data(input_data)</code>","text":"<p>Evaluate data using the evaluator. Adds to the internal dataframe.</p> Source code in <code>xopt/base.py</code> <pre><code>def evaluate_data(self, input_data: pd.DataFrame):\n\"\"\"\n    Evaluate data using the evaluator.\n    Adds to the internal dataframe.\n    \"\"\"\n    logger.debug(f\"Evaluating {len(input_data)} inputs\")\n    input_data = self.prepare_input_data(input_data)\n    output_data = self.evaluator.evaluate_data(input_data)\n\n    if self.options.strict:\n        validate_outputs(output_data)\n    new_data = pd.concat([input_data, output_data], axis=1)\n\n    self.add_data(new_data)\n    return new_data\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.prepare_input_data","title":"<code>prepare_input_data(input_data)</code>","text":"<p>re-index and validate input data.</p> Source code in <code>xopt/base.py</code> <pre><code>def prepare_input_data(self, input_data: pd.DataFrame):\n\"\"\"\n    re-index and validate input data.\n    \"\"\"\n    input_data = pd.DataFrame(input_data, copy=True)  # copy for reindexing\n\n    # Reindex input dataframe\n    input_data.index = np.arange(\n        self._ix_last + 1, self._ix_last + 1 + len(input_data)\n    )\n    self._ix_last += len(input_data)\n    self._input_data = pd.concat([self._input_data, input_data])\n\n    # validate data before submission\n    self.vocs.validate_input_data(self._input_data)\n\n    return input_data\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.process_futures","title":"<code>process_futures()</code>","text":"<p>wait for futures to finish (specified by asynch) and then internal dataframes of Xopt and generator, finally return the number of unfinished futures</p> Source code in <code>xopt/base.py</code> <pre><code>def process_futures(self):\n\"\"\"\n    wait for futures to finish (specified by asynch) and then internal dataframes\n    of Xopt and generator, finally return the number of unfinished futures\n\n    \"\"\"\n    if self.options.asynch:\n        logger.debug(\"Waiting for at least one future to complete\")\n        return_when = concurrent.futures.FIRST_COMPLETED\n    else:\n        logger.debug(\"Waiting for all futures to complete\")\n        return_when = concurrent.futures.ALL_COMPLETED\n    logger.debug(f\"done. {self.n_unfinished_futures} futures remaining\")\n\n    # wait for futures to finish (depending on return_when)\n    finished_futures, unfinished_futures = concurrent.futures.wait(\n        self._futures.values(), None, return_when\n    )\n\n    # Get done indexes.\n    ix_done = [ix for ix, future in self._futures.items() if future.done()]\n\n    # Get results from futures\n    output_data = []\n    for ix in ix_done:\n        future = self._futures.pop(ix)  # remove from futures\n        outputs = future.result()  # Exceptions are already handled by the evaluator\n        if self.options.strict:\n            if future.exception() is not None:\n                raise future.exception()\n            validate_outputs(outputs)\n        output_data.append(outputs)\n\n    # Special handling of a vectorized futures.\n    # Dict keys have all indexes of the input data.\n    if self.evaluator.vectorized:\n        output_data = pd.concat([pd.DataFrame([output]) for output in output_data])\n        index = []\n        for ix in ix_done:\n            index.extend(list(ix))\n    else:\n        index = ix_done\n\n    # Collect done inputs and outputs\n    input_data_done = self._input_data.loc[index]\n    output_data = pd.DataFrame(output_data, index=index)\n\n    # Form completed evaluation\n    new_data = pd.concat([input_data_done, output_data], axis=1)\n\n    # Add to internal dataframes\n    self.add_data(new_data)\n\n    # Cleanup\n    self._input_data.drop(index, inplace=True)\n\n    return len(unfinished_futures)\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.random_evaluate","title":"<code>random_evaluate(n_samples=1, seed=None, **kwargs)</code>","text":"<p>Convenience method to generate random inputs using vocs and evaluate them (adding data to Xopt object and generator.</p> Source code in <code>xopt/base.py</code> <pre><code>def random_evaluate(self, n_samples=1, seed=None, **kwargs):\n\"\"\"\n    Convenience method to generate random inputs using vocs\n    and evaluate them (adding data to Xopt object and generator.\n    \"\"\"\n    index = [1] if n_samples == 1 else None\n    random_inputs = pd.DataFrame(\n        self.random_inputs(n_samples, seed=seed, **kwargs), index=index\n    )\n    result = self.evaluate_data(random_inputs)\n    return result\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.random_inputs","title":"<code>random_inputs(n_samples=1, seed=None, **kwargs)</code>","text":"<p>Convenence method to call vocs.random_inputs</p> Source code in <code>xopt/base.py</code> <pre><code>def random_inputs(self, n_samples=1, seed=None, **kwargs):\n\"\"\"\n    Convenence method to call vocs.random_inputs\n    \"\"\"\n    return self.vocs.random_inputs(n_samples, seed=seed, **kwargs)\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.run","title":"<code>run()</code>","text":"<p>run until either xopt is done or the generator is done</p> Source code in <code>xopt/base.py</code> <pre><code>def run(self):\n\"\"\"run until either xopt is done or the generator is done\"\"\"\n    while not self.is_done:\n        # Stopping criteria\n        if self.options.max_evaluations:\n            if len(self.data) &gt;= self.options.max_evaluations:\n                self._is_done = True\n                logger.info(\n                    \"Xopt is done. \"\n                    f\"Max evaluations {self.options.max_evaluations} reached.\"\n                )\n                break\n\n        self.step()\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.step","title":"<code>step()</code>","text":"<p>run one optimization cycle</p> <ul> <li>determine the number of candidates to request from the generator</li> <li>pass candidate request to generator</li> <li>submit candidates to evaluator</li> <li>wait until all (asynch == False) or at least one (asynch == True) evaluation     is finished</li> <li>update data storage and generator data storage (if applicable)</li> </ul> Source code in <code>xopt/base.py</code> <pre><code>def step(self):\n\"\"\"\n    run one optimization cycle\n\n    - determine the number of candidates to request from the generator\n    - pass candidate request to generator\n    - submit candidates to evaluator\n    - wait until all (asynch == False) or at least one (asynch == True) evaluation\n        is finished\n    - update data storage and generator data storage (if applicable)\n\n    \"\"\"\n    logger.info(\"Running Xopt step\")\n\n    # check if Xopt is set up to step\n    self.check_components()\n\n    if self.is_done:\n        logger.debug(\"Xopt is done, will not step.\")\n        return\n\n    # get number of candidates to generate\n    if self.options.asynch:\n        n_generate = self.evaluator.max_workers - self.n_unfinished_futures\n    else:\n        n_generate = self.evaluator.max_workers\n\n    # generate samples and submit to evaluator\n    logger.debug(f\"Generating {n_generate} candidates\")\n    new_samples = pd.DataFrame(self.generator.generate(n_generate))\n\n    # generator is done when it returns no new samples\n    if len(new_samples) == 0:\n        logger.debug(\"Generator returned 0 samples =&gt; optimization is done.\")\n        assert self.generator.is_done\n        self._is_done = self.generator.is_done  # terminate the run\n        return\n\n    #  Blocking submission/evaluation\n    if self.options.asynch:\n        # Submit data\n        self.submit_data(new_samples)\n        # Process futures\n        self.n_unfinished_futures = self.process_futures()\n    else:\n        # Evaluate data\n        self.evaluate_data(new_samples)\n\n    # dump data to file if specified\n    self.dump_state()\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.submit_data","title":"<code>submit_data(input_data)</code>","text":"<p>Submit data to evaluator and return futures indexed to internal futures list.</p> <p>Args:     input_data: dataframe containing input data</p> Source code in <code>xopt/base.py</code> <pre><code>def submit_data(self, input_data: pd.DataFrame):\n\"\"\"\n    Submit data to evaluator and return futures indexed to internal futures list.\n\n    Args:\n        input_data: dataframe containing input data\n\n    \"\"\"\n    logger.debug(f\"Submitting {len(input_data)} inputs\")\n    input_data = self.prepare_input_data(input_data)\n\n    # submit data to evaluator. Futures are keyed on the index of the input data.\n    futures = self.evaluator.submit_data(input_data)\n    index = input_data.index\n    # Special handling for vectorized evaluations\n    if self.evaluator.vectorized:\n        assert len(futures) == 1\n        new_futures = {tuple(index): futures[0]}\n    else:\n        new_futures = dict(zip(index, futures))\n\n    # add futures to internal list\n    for key, future in new_futures.items():\n        assert key not in self._futures\n        self._futures[key] = future\n    # self._futures.update(new_futures)\n    return futures\n</code></pre>"},{"location":"api/xopt/#xopt.base.Xopt.yaml","title":"<code>yaml(filename=None, *, include_data=False)</code>","text":"<p>YAML representation of the Xopt object.</p> Source code in <code>xopt/base.py</code> <pre><code>def yaml(self, filename=None, *, include_data=False):\n\"\"\"\n    YAML representation of the Xopt object.\n    \"\"\"\n    config = state_to_dict(self, include_data=include_data)\n    s = yaml.dump(config, default_flow_style=None, sort_keys=False)\n\n    if filename:\n        with open(filename, \"w\") as f:\n            f.write(s)\n\n    return s\n</code></pre>"},{"location":"api/generators/bayesian/","title":"Bayesian generators","text":""},{"location":"api/generators/bayesian/#xopt.generators.bayesian.bayesian_generator.BayesianGenerator","title":"<code>xopt.generators.bayesian.bayesian_generator.BayesianGenerator</code>","text":"<p>         Bases: <code>Generator</code>, <code>ABC</code></p> Source code in <code>xopt/generators/bayesian/bayesian_generator.py</code> <pre><code>class BayesianGenerator(Generator, ABC):\n    name = \"base_bayesian_generator\"\n    model: Model = Field(\n        None, description=\"botorch model used by the generator to perform optimization\"\n    )\n    n_monte_carlo_samples = Field(\n        128, description=\"number of monte carlo samples to use\"\n    )\n    turbo_controller: TurboController = Field(\n        default=None, description=\"turbo controller for trust-region BO\"\n    )\n    use_cuda: bool = Field(False, description=\"flag to enable cuda usage if available\")\n    model_constructor: ModelConstructor = Field(\n        StandardModelConstructor(), description=\"constructor used to generate model\"\n    )\n    numerical_optimizer: NumericalOptimizer = Field(\n        LBFGSOptimizer(),\n        description=\"optimizer used to optimize the acquisition \" \"function\",\n    )\n    max_travel_distances: List[float] = Field(\n        None,\n        description=\"limits for travel distance between points in normalized space\",\n    )\n\n    @validator(\"model_constructor\", pre=True)\n    def validate_model_constructor(cls, value):\n        constructor_dict = {\"standard\": StandardModelConstructor}\n        if value is None:\n            value = StandardModelConstructor()\n        elif isinstance(value, ModelConstructor):\n            value = value\n        elif isinstance(value, str):\n            if value in constructor_dict:\n                value = constructor_dict[value]()\n            else:\n                raise ValueError(f\"{value} not found\")\n        elif isinstance(value, dict):\n            name = value.pop(\"name\")\n            if name in constructor_dict:\n                value = constructor_dict[name](**value)\n            else:\n                raise ValueError(f\"{value} not found\")\n\n        return value\n\n    @validator(\"numerical_optimizer\", pre=True)\n    def validate_numerical_optimizer(cls, value):\n        optimizer_dict = {\"grid\": GridOptimizer, \"LBFGS\": LBFGSOptimizer}\n        if value is None:\n            value = LBFGSOptimizer()\n        elif isinstance(value, NumericalOptimizer):\n            pass\n        elif isinstance(value, str):\n            if value in optimizer_dict:\n                value = optimizer_dict[value]()\n            else:\n                raise ValueError(f\"{value} not found\")\n        elif isinstance(value, dict):\n            name = value.pop(\"name\")\n            if name in optimizer_dict:\n                value = optimizer_dict[name](**value)\n            else:\n                raise ValueError(f\"{value} not found\")\n        return value\n\n    @validator(\"turbo_controller\", pre=True)\n    def validate_turbo_controller(cls, value, values):\n\"\"\"note default behavior is no use of turbo\"\"\"\n        optimizer_dict = {\n            \"optimize\": OptimizeTurboController(values[\"vocs\"]),\n            \"safety\": SafetyTurboController(values[\"vocs\"]),\n        }\n        if isinstance(value, TurboController):\n            pass\n        elif isinstance(value, str):\n            if value in optimizer_dict:\n                value = optimizer_dict[value]\n            else:\n                raise ValueError(f\"{value} not found\")\n        elif isinstance(value, dict):\n            name = value.pop(\"name\")\n            if name in optimizer_dict:\n                value = optimizer_dict[name](**value)\n            else:\n                raise ValueError(f\"{value} not found\")\n        return value\n\n    def add_data(self, new_data: pd.DataFrame):\n        self.data = pd.concat([self.data, new_data], axis=0)\n\n    def generate(self, n_candidates: int) -&gt; pd.DataFrame:\n        if n_candidates &gt; 1 and not self.supports_batch_generation:\n            raise NotImplementedError(\n                \"This Bayesian algorithm does not currently support parallel candidate \"\n                \"generation\"\n            )\n\n        # if no data exists raise error\n        if self.data.empty:\n            raise RuntimeError(\n                \"no data contained in generator, call `add_data` \"\n                \"method to add data, see also `Xopt.random_evaluate()`\"\n            )\n\n        else:\n            # update internal model with internal data\n            model = self.train_model(self.data)\n\n            # update TurBO state if used\n            if self.turbo_controller is not None:\n                self.turbo_controller.update_state(self.data)\n\n            # calculate optimization bounds\n            bounds = self._get_optimization_bounds()\n\n            # get acquisition function\n            acq_funct = self.get_acquisition(model)\n\n            # get candidates\n            candidates = self.numerical_optimizer.optimize(\n                acq_funct, bounds, n_candidates\n            )\n\n            # post process candidates\n            result = self._process_candidates(candidates)\n\n            return result\n\n    def train_model(self, data: pd.DataFrame = None, update_internal=True) -&gt; Module:\n\"\"\"\n        Returns a ModelListGP containing independent models for the objectives and\n        constraints\n\n        \"\"\"\n        if data is None:\n            data = self.data\n        if data.empty:\n            raise ValueError(\"no data available to build model\")\n\n        _model = self.model_constructor.build_model_from_vocs(self.vocs, data, **self._tkwargs)\n\n        if update_internal:\n            self.model = _model\n        return _model\n\n    def get_input_data(self, data):\n        return torch.tensor(\n            self.vocs.variable_data(data, \"\").to_numpy(), **self._tkwargs\n        )\n\n    def get_acquisition(self, model):\n\"\"\"\n        Returns a function that can be used to evaluate the acquisition function\n        \"\"\"\n        if model is None:\n            raise ValueError(\"model cannot be None\")\n\n        # get base acquisition function\n        acq = self._get_acquisition(model)\n\n        try:\n            sampler = acq.sampler\n        except AttributeError:\n            sampler = SobolQMCNormalSampler(\n                sample_shape=torch.Size([self.n_monte_carlo_samples])\n            )\n\n        # apply constraints if specified in vocs\n        if len(self.vocs.constraints):\n            acq = ConstrainedMCAcquisitionFunction(\n                model, acq, self._get_constraint_callables(), sampler=sampler\n            )\n\n        return acq\n\n    def get_optimum(self):\n\"\"\"select the best point(s) (for multi-objective generators, given by the\n        model using the Posterior mean\"\"\"\n        c_posterior_mean = ConstrainedMCAcquisitionFunction(\n            self.model,\n            qUpperConfidenceBound(\n                model=self.model, beta=0.0, objective=self._get_objective()\n            ),\n            self._get_constraint_callables(),\n        )\n\n        result = self.numerical_optimizer.optimize(\n            c_posterior_mean, self._get_bounds(), 1\n        )\n\n        return self._process_candidates(result)\n\n    def _process_candidates(self, candidates):\n        logger.debug(\"Best candidate from optimize\", candidates)\n        return self.vocs.convert_numpy_to_inputs(candidates.detach().cpu().numpy())\n\n    def _get_sampler(self, model):\n        input_data = self.get_input_data(self.data)\n        sampler = get_sampler(\n            model.posterior(input_data),\n            sample_shape=torch.Size([self.n_monte_carlo_samples]),\n        )\n        return sampler\n\n    @abstractmethod\n    def _get_acquisition(self, model):\n        pass\n\n    def _get_objective(self):\n\"\"\"return default objective (scalar objective) determined by vocs\"\"\"\n        return create_mc_objective(self.vocs, self._tkwargs)\n\n    def _get_constraint_callables(self):\n\"\"\"return default objective (scalar objective) determined by vocs\"\"\"\n        constraint_callables = create_constraint_callables(self.vocs)\n        if len(constraint_callables) == 0:\n            constraint_callables = None\n        return constraint_callables\n\n    @property\n    def _tkwargs(self):\n        # set device and data type for generator\n        device = \"cpu\"\n        if self.use_cuda:\n            if torch.cuda.is_available():\n                device = \"cuda\"\n            else:\n                warnings.warn(\n                    \"Cuda requested in generator options but not found on \"\n                    \"machine! Using CPU instead\"\n                )\n\n        return {\"dtype\": torch.double, \"device\": device}\n\n    def _get_bounds(self):\n\"\"\"convert bounds from vocs to torch tensors\"\"\"\n        return torch.tensor(self.vocs.bounds, **self._tkwargs)\n\n    def _get_optimization_bounds(self):\n\"\"\"\n        gets optimization bounds based on the union of several domains\n        - if use_turbo is True include trust region\n        - if max_travel_distances is not None limit max travel distance\n\n        \"\"\"\n        bounds = deepcopy(self._get_bounds())\n\n        # if specified modify bounds to limit maximum travel distances\n        if self.max_travel_distances is not None:\n            max_travel_bounds = self.get_max_travel_distances_region(bounds)\n            bounds = rectilinear_domain_union(bounds, max_travel_bounds)\n\n        # if using turbo, update turbo state and set bounds according to turbo state\n        if self.turbo_controller is not None:\n            # set the best value\n            turbo_bounds = self.turbo_controller.get_trust_region(self.model)\n            bounds = rectilinear_domain_union(bounds, turbo_bounds)\n\n        return bounds\n\n    def get_max_travel_distances_region(self, bounds):\n\"\"\"get region based on max travel distances and last observation\"\"\"\n        if len(self.max_travel_distances) != bounds.shape[-1]:\n            raise ValueError(\n                f\"length of max_travel_distances must match the number of \"\n                f\"variables {bounds.shape[-1]}\"\n            )\n\n        # get last point\n        if self.data.empty:\n            raise ValueError(\n                \"No data exists to specify max_travel_distances \"\n                \"from, add data first to use during BO\"\n            )\n        last_point = torch.tensor(\n            self.data[self.vocs.variable_names].iloc[-1].to_numpy(), **self._tkwargs\n        )\n\n        # bound lengths based on vocs for normalization\n        lengths = self.vocs.bounds[1, :] - self.vocs.bounds[0, :]\n\n        # get maximum travel distances\n        max_travel_distances = (\n            torch.tensor(self.max_travel_distances, **self._tkwargs) * lengths\n        )\n        max_travel_bounds = torch.stack(\n            (last_point - max_travel_distances, last_point + max_travel_distances)\n        )\n\n        return max_travel_bounds\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.bayesian_generator.BayesianGenerator.get_acquisition","title":"<code>get_acquisition(model)</code>","text":"<p>Returns a function that can be used to evaluate the acquisition function</p> Source code in <code>xopt/generators/bayesian/bayesian_generator.py</code> <pre><code>def get_acquisition(self, model):\n\"\"\"\n    Returns a function that can be used to evaluate the acquisition function\n    \"\"\"\n    if model is None:\n        raise ValueError(\"model cannot be None\")\n\n    # get base acquisition function\n    acq = self._get_acquisition(model)\n\n    try:\n        sampler = acq.sampler\n    except AttributeError:\n        sampler = SobolQMCNormalSampler(\n            sample_shape=torch.Size([self.n_monte_carlo_samples])\n        )\n\n    # apply constraints if specified in vocs\n    if len(self.vocs.constraints):\n        acq = ConstrainedMCAcquisitionFunction(\n            model, acq, self._get_constraint_callables(), sampler=sampler\n        )\n\n    return acq\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.bayesian_generator.BayesianGenerator.get_max_travel_distances_region","title":"<code>get_max_travel_distances_region(bounds)</code>","text":"<p>get region based on max travel distances and last observation</p> Source code in <code>xopt/generators/bayesian/bayesian_generator.py</code> <pre><code>def get_max_travel_distances_region(self, bounds):\n\"\"\"get region based on max travel distances and last observation\"\"\"\n    if len(self.max_travel_distances) != bounds.shape[-1]:\n        raise ValueError(\n            f\"length of max_travel_distances must match the number of \"\n            f\"variables {bounds.shape[-1]}\"\n        )\n\n    # get last point\n    if self.data.empty:\n        raise ValueError(\n            \"No data exists to specify max_travel_distances \"\n            \"from, add data first to use during BO\"\n        )\n    last_point = torch.tensor(\n        self.data[self.vocs.variable_names].iloc[-1].to_numpy(), **self._tkwargs\n    )\n\n    # bound lengths based on vocs for normalization\n    lengths = self.vocs.bounds[1, :] - self.vocs.bounds[0, :]\n\n    # get maximum travel distances\n    max_travel_distances = (\n        torch.tensor(self.max_travel_distances, **self._tkwargs) * lengths\n    )\n    max_travel_bounds = torch.stack(\n        (last_point - max_travel_distances, last_point + max_travel_distances)\n    )\n\n    return max_travel_bounds\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.bayesian_generator.BayesianGenerator.get_optimum","title":"<code>get_optimum()</code>","text":"<p>select the best point(s) (for multi-objective generators, given by the model using the Posterior mean</p> Source code in <code>xopt/generators/bayesian/bayesian_generator.py</code> <pre><code>def get_optimum(self):\n\"\"\"select the best point(s) (for multi-objective generators, given by the\n    model using the Posterior mean\"\"\"\n    c_posterior_mean = ConstrainedMCAcquisitionFunction(\n        self.model,\n        qUpperConfidenceBound(\n            model=self.model, beta=0.0, objective=self._get_objective()\n        ),\n        self._get_constraint_callables(),\n    )\n\n    result = self.numerical_optimizer.optimize(\n        c_posterior_mean, self._get_bounds(), 1\n    )\n\n    return self._process_candidates(result)\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.bayesian_generator.BayesianGenerator.train_model","title":"<code>train_model(data=None, update_internal=True)</code>","text":"<p>Returns a ModelListGP containing independent models for the objectives and constraints</p> Source code in <code>xopt/generators/bayesian/bayesian_generator.py</code> <pre><code>def train_model(self, data: pd.DataFrame = None, update_internal=True) -&gt; Module:\n\"\"\"\n    Returns a ModelListGP containing independent models for the objectives and\n    constraints\n\n    \"\"\"\n    if data is None:\n        data = self.data\n    if data.empty:\n        raise ValueError(\"no data available to build model\")\n\n    _model = self.model_constructor.build_model_from_vocs(self.vocs, data, **self._tkwargs)\n\n    if update_internal:\n        self.model = _model\n    return _model\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.bayesian_generator.BayesianGenerator.validate_turbo_controller","title":"<code>validate_turbo_controller(value, values)</code>","text":"<p>note default behavior is no use of turbo</p> Source code in <code>xopt/generators/bayesian/bayesian_generator.py</code> <pre><code>@validator(\"turbo_controller\", pre=True)\ndef validate_turbo_controller(cls, value, values):\n\"\"\"note default behavior is no use of turbo\"\"\"\n    optimizer_dict = {\n        \"optimize\": OptimizeTurboController(values[\"vocs\"]),\n        \"safety\": SafetyTurboController(values[\"vocs\"]),\n    }\n    if isinstance(value, TurboController):\n        pass\n    elif isinstance(value, str):\n        if value in optimizer_dict:\n            value = optimizer_dict[value]\n        else:\n            raise ValueError(f\"{value} not found\")\n    elif isinstance(value, dict):\n        name = value.pop(\"name\")\n        if name in optimizer_dict:\n            value = optimizer_dict[name](**value)\n        else:\n            raise ValueError(f\"{value} not found\")\n    return value\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.bayesian_exploration.BayesianExplorationGenerator","title":"<code>xopt.generators.bayesian.bayesian_exploration.BayesianExplorationGenerator</code>","text":"<p>         Bases: <code>BayesianGenerator</code></p> Source code in <code>xopt/generators/bayesian/bayesian_exploration.py</code> <pre><code>class BayesianExplorationGenerator(BayesianGenerator):\n    name = \"bayesian_exploration\"\n    supports_batch_generation = True\n\n    def _get_acquisition(self, model):\n        sampler = self._get_sampler(model)\n        qPV = qPosteriorVariance(\n            model,\n            sampler=sampler,\n            objective=self._get_objective(),\n        )\n\n        return qPV\n\n    def _get_objective(self):\n\"\"\"return exploration objective, which only captures the output of the first\n        model output\"\"\"\n\n        return create_exploration_objective(self.vocs, self._tkwargs)\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.mobo.MOBOGenerator","title":"<code>xopt.generators.bayesian.mobo.MOBOGenerator</code>","text":"<p>         Bases: <code>MultiObjectiveBayesianGenerator</code></p> Source code in <code>xopt/generators/bayesian/mobo.py</code> <pre><code>class MOBOGenerator(MultiObjectiveBayesianGenerator):\n    name = \"mobo\"\n    __doc__ = \"\"\"Implements Multi-Objective Bayesian Optimization using the Expected\n            Hypervolume Improvement acquisition function\"\"\"\n\n    def _get_objective(self):\n        return create_mobo_objective(self.vocs, self._tkwargs)\n\n    def get_acquisition(self, model):\n\"\"\"\n        Returns a function that can be used to evaluate the acquisition function\n        \"\"\"\n        if model is None:\n            raise ValueError(\"model cannot be None\")\n\n        # get base acquisition function\n        acq = self._get_acquisition(model)\n        return acq\n\n    def _get_acquisition(self, model):\n        inputs = self.get_input_data(self.data)\n        sampler = self._get_sampler(model)\n\n        # fix problem with qNEHVI interpretation with constraints\n        acq = qNoisyExpectedHypervolumeImprovement(\n            model,\n            X_baseline=inputs,\n            constraints=self._get_constraint_callables(),\n            ref_point=self.torch_reference_point,\n            sampler=sampler,\n            objective=self._get_objective(),\n            cache_root=False,\n            prune_baseline=True,\n        )\n\n        return acq\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.mobo.MOBOGenerator.get_acquisition","title":"<code>get_acquisition(model)</code>","text":"<p>Returns a function that can be used to evaluate the acquisition function</p> Source code in <code>xopt/generators/bayesian/mobo.py</code> <pre><code>def get_acquisition(self, model):\n\"\"\"\n    Returns a function that can be used to evaluate the acquisition function\n    \"\"\"\n    if model is None:\n        raise ValueError(\"model cannot be None\")\n\n    # get base acquisition function\n    acq = self._get_acquisition(model)\n    return acq\n</code></pre>"},{"location":"api/generators/bayesian/#xopt.generators.bayesian.upper_confidence_bound.UpperConfidenceBoundGenerator","title":"<code>xopt.generators.bayesian.upper_confidence_bound.UpperConfidenceBoundGenerator</code>","text":"<p>         Bases: <code>BayesianGenerator</code></p> Source code in <code>xopt/generators/bayesian/upper_confidence_bound.py</code> <pre><code>class UpperConfidenceBoundGenerator(BayesianGenerator):\n    name = \"upper_confidence_bound\"\n    beta: float = Field(2.0, description=\"Beta parameter for UCB optimization\")\n    supports_batch_generation = True\n    __doc__ = \"\"\"Implements Bayeisan Optimization using the Upper Confidence Bound\n    acquisition function\"\"\"\n\n    def _get_acquisition(self, model):\n        sampler = self._get_sampler(model)\n        qUCB = qUpperConfidenceBound(\n            model,\n            sampler=sampler,\n            objective=self._get_objective(),\n            beta=self.beta,\n        )\n\n        return qUCB\n</code></pre>"},{"location":"api/generators/genetic/","title":"Genetic generators","text":""},{"location":"api/generators/genetic/#xopt.generators.ga.cnsga.CNSGAGenerator","title":"<code>xopt.generators.ga.cnsga.CNSGAGenerator</code>","text":"<p>         Bases: <code>Generator</code></p> Source code in <code>xopt/generators/ga/cnsga.py</code> <pre><code>class CNSGAGenerator(Generator):\n    name = \"cnsga\"\n    supports_multi_objective = True\n    population_size: int = Field(64, description=\"Population size\")\n    crossover_probability: confloat(ge=0, le=1) = Field(\n        0.9, description=\"Crossover probability\"\n    )\n    mutation_probability: confloat(ge=0, le=1) = Field(\n        1.0, description=\"Mutation probability\"\n    )\n    population_file: str = Field(\n        None, description=\"Population file to load (CSV format)\"\n    )\n    output_path: str = Field(None, description=\"Output path for population files\")\n\n    class Config:\n        extra = \"allow\"\n\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        # Internal data structures\n        self.children = (\n            []\n        )  # list of unevaluated inputs. This should be a list of dicts.\n        self.population = None  # The latest population data (fully evaluated)\n        self.offspring = None  # Newly evaluated data, but not yet added to population\n\n        self._loaded_population = (\n            None  # use these to generate children until the first pop is made\n        )\n\n        # DEAP toolbox (internal)\n        self.toolbox = cnsga_toolbox(self.vocs, selection=\"auto\")\n\n        if self.population_file is not None:\n            self.load_population_csv(self.population_file)\n\n        if self.output_path is not None:\n            assert os.path.isdir(self.output_path), \"Output directory does not exist\"\n\n        # if data is not None:\n        #    self.population = cnsga_select(data, n_pop, vocs, self.toolbox)\n\n    def old__init__(\n        self,\n        vocs,\n        *,\n        n_pop,\n        data=None,\n        crossover_probability=0.9,\n        mutation_probability=1.0,\n    ):\n        self._vocs = vocs  # TODO: use proper options\n        self.n_pop = n_pop\n        self.crossover_probability = crossover_probability\n        self.mutation_probability = mutation_probability\n\n        # Internal data structures\n        self.children = []  # unevaluated inputs. This should be a list of dicts.\n        self.population = None  # The latest population (fully evaluated)\n        self.offspring = None  # Newly evaluated data, but not yet added to population\n\n        # DEAP toolbox (internal)\n        self.toolbox = cnsga_toolbox(vocs, selection=\"auto\")\n\n        if data is not None:\n            self.population = cnsga_select(data, n_pop, vocs, self.toolbox)\n\n    def create_children(self):\n        # No population, so create random children\n        if self.population is None:\n            # Special case when pop is loaded from file\n            if self._loaded_population is None:\n                return [self.vocs.random_inputs() for _ in range(self.n_pop)]\n            else:\n                pop = self._loaded_population\n        else:\n            pop = self.population\n\n        # Use population to create children\n        inputs = cnsga_variation(\n            pop,\n            self.vocs,\n            self.toolbox,\n            crossover_probability=self.crossover_probability,\n            mutation_probability=self.mutation_probability,\n        )\n        return inputs.to_dict(orient=\"records\")\n\n    def add_data(self, new_data: pd.DataFrame):\n        self.offspring = pd.concat([self.offspring, new_data])\n\n        # Next generation\n        if len(self.offspring) &gt;= self.n_pop:\n            candidates = pd.concat([self.population, self.offspring])\n            self.population = cnsga_select(\n                candidates, self.n_pop, self.vocs, self.toolbox\n            )\n\n            if self.output_path is not None:\n                self.write_offspring()\n                self.write_population()\n\n            self.children = []  # reset children\n            self.offspring = None  # reset offspring\n\n    def generate(self, n_candidates) -&gt; List[Dict]:\n\"\"\"\n        generate `n_candidates` candidates\n\n        \"\"\"\n\n        # Make sure we have enough children to fulfill the request\n        while len(self.children) &lt; n_candidates:\n            self.children.extend(self.create_children())\n\n        return [self.children.pop() for _ in range(n_candidates)]\n\n    def write_offspring(self, filename=None):\n\"\"\"\n        Write the current offspring to a CSV file.\n\n        Similar to write_population\n        \"\"\"\n        if self.offspring is None:\n            logger.warning(\"No offspring to write\")\n            return\n\n        if filename is None:\n            filename = f\"{self.name}_offspring_{xopt.utils.isotime(include_microseconds=True)}.csv\"\n            filename = os.path.join(self.output_path, filename)\n\n        self.offspring.to_csv(filename, index_label=\"xopt_index\")\n\n    def write_population(self, filename=None):\n\"\"\"\n        Write the current population to a CSV file.\n\n        Similar to write_offspring\n        \"\"\"\n        if self.population is None:\n            logger.warning(\"No population to write\")\n            return\n\n        if filename is None:\n            filename = f\"{self.name}_population_{xopt.utils.isotime(include_microseconds=True)}.csv\"\n            filename = os.path.join(self.output_path, filename)\n\n        self.population.to_csv(filename, index_label=\"xopt_index\")\n\n    def load_population_csv(self, filename):\n\"\"\"\n        Read a population from a CSV file.\n        These will be reverted back to children for re-evaluation.\n        \"\"\"\n        pop = pd.read_csv(filename, index_col=\"xopt_index\")\n        self._loaded_population = pop\n        # This is a list of dicts\n        self.children = self.vocs.convert_dataframe_to_inputs(pop).to_dict(\n            orient=\"records\"\n        )\n        logger.info(f\"Loaded population of len {len(pop)} from file: {filename}\")\n\n    @property\n    def n_pop(self):\n\"\"\"\n        Convenience name for `options.population_size`\n        \"\"\"\n        return self.population_size\n</code></pre>"},{"location":"api/generators/genetic/#xopt.generators.ga.cnsga.CNSGAGenerator.n_pop","title":"<code>n_pop</code>  <code>property</code>","text":"<p>Convenience name for <code>options.population_size</code></p>"},{"location":"api/generators/genetic/#xopt.generators.ga.cnsga.CNSGAGenerator.generate","title":"<code>generate(n_candidates)</code>","text":"<p>generate <code>n_candidates</code> candidates</p> Source code in <code>xopt/generators/ga/cnsga.py</code> <pre><code>def generate(self, n_candidates) -&gt; List[Dict]:\n\"\"\"\n    generate `n_candidates` candidates\n\n    \"\"\"\n\n    # Make sure we have enough children to fulfill the request\n    while len(self.children) &lt; n_candidates:\n        self.children.extend(self.create_children())\n\n    return [self.children.pop() for _ in range(n_candidates)]\n</code></pre>"},{"location":"api/generators/genetic/#xopt.generators.ga.cnsga.CNSGAGenerator.load_population_csv","title":"<code>load_population_csv(filename)</code>","text":"<p>Read a population from a CSV file. These will be reverted back to children for re-evaluation.</p> Source code in <code>xopt/generators/ga/cnsga.py</code> <pre><code>def load_population_csv(self, filename):\n\"\"\"\n    Read a population from a CSV file.\n    These will be reverted back to children for re-evaluation.\n    \"\"\"\n    pop = pd.read_csv(filename, index_col=\"xopt_index\")\n    self._loaded_population = pop\n    # This is a list of dicts\n    self.children = self.vocs.convert_dataframe_to_inputs(pop).to_dict(\n        orient=\"records\"\n    )\n    logger.info(f\"Loaded population of len {len(pop)} from file: {filename}\")\n</code></pre>"},{"location":"api/generators/genetic/#xopt.generators.ga.cnsga.CNSGAGenerator.write_offspring","title":"<code>write_offspring(filename=None)</code>","text":"<p>Write the current offspring to a CSV file.</p> <p>Similar to write_population</p> Source code in <code>xopt/generators/ga/cnsga.py</code> <pre><code>def write_offspring(self, filename=None):\n\"\"\"\n    Write the current offspring to a CSV file.\n\n    Similar to write_population\n    \"\"\"\n    if self.offspring is None:\n        logger.warning(\"No offspring to write\")\n        return\n\n    if filename is None:\n        filename = f\"{self.name}_offspring_{xopt.utils.isotime(include_microseconds=True)}.csv\"\n        filename = os.path.join(self.output_path, filename)\n\n    self.offspring.to_csv(filename, index_label=\"xopt_index\")\n</code></pre>"},{"location":"api/generators/genetic/#xopt.generators.ga.cnsga.CNSGAGenerator.write_population","title":"<code>write_population(filename=None)</code>","text":"<p>Write the current population to a CSV file.</p> <p>Similar to write_offspring</p> Source code in <code>xopt/generators/ga/cnsga.py</code> <pre><code>def write_population(self, filename=None):\n\"\"\"\n    Write the current population to a CSV file.\n\n    Similar to write_offspring\n    \"\"\"\n    if self.population is None:\n        logger.warning(\"No population to write\")\n        return\n\n    if filename is None:\n        filename = f\"{self.name}_population_{xopt.utils.isotime(include_microseconds=True)}.csv\"\n        filename = os.path.join(self.output_path, filename)\n\n    self.population.to_csv(filename, index_label=\"xopt_index\")\n</code></pre>"},{"location":"api/generators/scipy/","title":"SciPy generators","text":""},{"location":"api/generators/scipy/#xopt.generators.scipy.neldermead.NelderMeadGenerator","title":"<code>xopt.generators.scipy.neldermead.NelderMeadGenerator</code>","text":"<p>         Bases: <code>ScipyOptimizeGenerator</code></p> <p>Nelder-Mead algorithm from SciPy in Xopt's Generator form.</p> Source code in <code>xopt/generators/scipy/neldermead.py</code> <pre><code>class NelderMeadGenerator(ScipyOptimizeGenerator):\n\"\"\"\n    Nelder-Mead algorithm from SciPy in Xopt's Generator form.\n    \"\"\"\n\n    name = \"neldermead\"\n\n    def _init_algorithm(self):\n\"\"\"\n        sets self._algorithm to the generator function (initializing it).\n        \"\"\"\n\n        if self.initial_simplex:\n            sim = np.array(\n                [self.initial_simplex[k] for k in self.vocs.variable_names]\n            ).T\n        else:\n            sim = None\n\n        self._algorithm = _neldermead_generator(  # adapted from scipy.optimize\n            self.func,  # Handled by base class\n            self.x0,  # Handled by base class\n            adaptive=self.adaptive,\n            xatol=self.xatol,\n            fatol=self.fatol,\n            initial_simplex=sim,\n            bounds=self.vocs.bounds,\n        )\n\n    @property\n    def simplex(self):\n\"\"\"\n        Returns the simplex in the current state.\n        \"\"\"\n        sim = self._state\n        return dict(zip(self.vocs.variable_names, sim.T))\n</code></pre>"},{"location":"api/generators/scipy/#xopt.generators.scipy.neldermead.NelderMeadGenerator.simplex","title":"<code>simplex</code>  <code>property</code>","text":"<p>Returns the simplex in the current state.</p>"},{"location":"examples/basic/checkpointing_and_restarts/","title":"Checkpointing and Restarts","text":"In\u00a0[1]: Copied! <pre># Import the class\nfrom xopt import Xopt\n\n# Make a proper input file.\nYAML = \"\"\"\nxopt:\n    dump_file: dump.yaml\n\ngenerator:\n    name: random\n\nevaluator:\n    function: xopt.resources.test_functions.tnk.evaluate_TNK\n    function_kwargs:\n        a: 999\n\nvocs:\n    variables:\n        x1: [0, 3.14159]\n        x2: [0, 3.14159]\n    objectives: {y1: MINIMIZE, y2: MINIMIZE}\n    constraints:\n        c1: [GREATER_THAN, 0]\n        c2: [LESS_THAN, 0.5]\n    constants: {a: dummy_constant}\n\n\"\"\"\n</pre> # Import the class from xopt import Xopt  # Make a proper input file. YAML = \"\"\" xopt:     dump_file: dump.yaml  generator:     name: random  evaluator:     function: xopt.resources.test_functions.tnk.evaluate_TNK     function_kwargs:         a: 999  vocs:     variables:         x1: [0, 3.14159]         x2: [0, 3.14159]     objectives: {y1: MINIMIZE, y2: MINIMIZE}     constraints:         c1: [GREATER_THAN, 0]         c2: [LESS_THAN, 0.5]     constants: {a: dummy_constant}  \"\"\" In\u00a0[2]: Copied! <pre>import yaml\n\n# create Xopt object.\nX = Xopt(YAML)\n\n# take 10 steps and view data\nfor _ in range(10):\n    X.step()\n\nX.data\n</pre> import yaml  # create Xopt object. X = Xopt(YAML)  # take 10 steps and view data for _ in range(10):     X.step()  X.data Out[2]: x1 x2 a y1 y2 c1 c2 some_array xopt_runtime xopt_error 1 2.597124 0.432225 dummy_constant 2.597124 0.432225 6.019489 4.402524 [1, 2, 3] 0.000061 False 2 2.661942 1.977737 dummy_constant 2.661942 1.977737 10.067124 6.857701 [1, 2, 3] 0.000029 False 3 2.207116 0.799853 dummy_constant 2.207116 0.799853 4.435969 3.004156 [1, 2, 3] 0.000026 False 4 0.304730 2.523095 dummy_constant 0.304730 2.523095 5.493377 4.131046 [1, 2, 3] 0.000025 False 5 1.063887 1.349968 dummy_constant 1.063887 1.349968 1.985407 1.040413 [1, 2, 3] 0.000025 False 6 1.634312 2.577732 dummy_constant 1.634312 2.577732 8.408396 5.603633 [1, 2, 3] 0.000025 False 7 2.318721 1.859248 dummy_constant 2.318721 1.859248 7.851348 5.155302 [1, 2, 3] 0.000024 False 8 2.256753 1.332721 dummy_constant 2.256753 1.332721 5.932043 3.779607 [1, 2, 3] 0.000024 False 9 2.101555 0.467051 dummy_constant 2.101555 0.467051 3.728352 2.566064 [1, 2, 3] 0.000025 False 10 2.058355 1.513532 dummy_constant 2.058355 1.513532 5.602800 3.455717 [1, 2, 3] 0.000024 False In\u00a0[3]: Copied! <pre>config = yaml.safe_load(open(\"dump.yaml\"))\nX2 = Xopt(config)\nprint(X2.options)\nprint(X2.generator)\nprint(X2.evaluator)\n\nX2.data\n</pre> config = yaml.safe_load(open(\"dump.yaml\")) X2 = Xopt(config) print(X2.options) print(X2.generator) print(X2.evaluator)  X2.data <pre>asynch=False strict=False dump_file='dump.yaml' max_evaluations=None\nvocs=VOCS(variables={'x1': [0.0, 3.14159], 'x2': [0.0, 3.14159]}, constraints={'c1': ['GREATER_THAN', 0.0], 'c2': ['LESS_THAN', 0.5]}, objectives={'y1': 'MINIMIZE', 'y2': 'MINIMIZE'}, constants={'a': 'dummy_constant'}, observables=[]) data=Empty DataFrame\nColumns: []\nIndex: []\nfunction=&lt;function evaluate_TNK at 0x7f95d4fe4280&gt; max_workers=1 executor=NormalExecutor[DummyExecutor](loader=ObjLoader[DummyExecutor](object=None, loader=CallableModel(callable=&lt;class 'xopt.evaluator.DummyExecutor'&gt;, signature=Kwargs_DummyExecutor(args=[], kwarg_order=[])), object_type=&lt;class 'xopt.evaluator.DummyExecutor'&gt;), executor_type=&lt;class 'xopt.evaluator.DummyExecutor'&gt;, submit_callable='submit', map_callable='map', shutdown_callable='shutdown', executor=&lt;xopt.evaluator.DummyExecutor object at 0x7f958dd09190&gt;) function_kwargs={'sleep': 0, 'random_sleep': 0, 'raise_probability': 0, 'a': 999} vectorized=False\n</pre> Out[3]: a c1 c2 some_array x1 x2 xopt_error xopt_runtime y1 y2 1 dummy_constant 6.019489 4.402524 [1, 2, 3] 2.597124 0.432225 False 0.000061 2.597124 0.432225 2 dummy_constant 5.602800 3.455717 [1, 2, 3] 2.058355 1.513532 False 0.000024 2.058355 1.513532 3 dummy_constant 10.067124 6.857701 [1, 2, 3] 2.661942 1.977737 False 0.000029 2.661942 1.977737 4 dummy_constant 4.435969 3.004156 [1, 2, 3] 2.207116 0.799853 False 0.000026 2.207116 0.799853 5 dummy_constant 5.493377 4.131046 [1, 2, 3] 0.304730 2.523095 False 0.000025 0.304730 2.523095 6 dummy_constant 1.985407 1.040413 [1, 2, 3] 1.063887 1.349968 False 0.000025 1.063887 1.349968 7 dummy_constant 8.408396 5.603633 [1, 2, 3] 1.634312 2.577732 False 0.000025 1.634312 2.577732 8 dummy_constant 7.851348 5.155302 [1, 2, 3] 2.318721 1.859248 False 0.000024 2.318721 1.859248 9 dummy_constant 5.932043 3.779607 [1, 2, 3] 2.256753 1.332721 False 0.000024 2.256753 1.332721 10 dummy_constant 3.728352 2.566064 [1, 2, 3] 2.101555 0.467051 False 0.000025 2.101555 0.467051 In\u00a0[4]: Copied! <pre>for _ in range(10):\n    X2.step()\n\nX2.data\n</pre> for _ in range(10):     X2.step()  X2.data Out[4]: a c1 c2 some_array x1 x2 xopt_error xopt_runtime y1 y2 1 dummy_constant 6.019489 4.402524 [1, 2, 3] 2.597124 0.432225 False 0.000061 2.597124 0.432225 2 dummy_constant 5.602800 3.455717 [1, 2, 3] 2.058355 1.513532 False 0.000024 2.058355 1.513532 3 dummy_constant 10.067124 6.857701 [1, 2, 3] 2.661942 1.977737 False 0.000029 2.661942 1.977737 4 dummy_constant 4.435969 3.004156 [1, 2, 3] 2.207116 0.799853 False 0.000026 2.207116 0.799853 5 dummy_constant 5.493377 4.131046 [1, 2, 3] 0.304730 2.523095 False 0.000025 0.304730 2.523095 6 dummy_constant 1.985407 1.040413 [1, 2, 3] 1.063887 1.349968 False 0.000025 1.063887 1.349968 7 dummy_constant 8.408396 5.603633 [1, 2, 3] 1.634312 2.577732 False 0.000025 1.634312 2.577732 8 dummy_constant 7.851348 5.155302 [1, 2, 3] 2.318721 1.859248 False 0.000024 2.318721 1.859248 9 dummy_constant 5.932043 3.779607 [1, 2, 3] 2.256753 1.332721 False 0.000024 2.256753 1.332721 10 dummy_constant 3.728352 2.566064 [1, 2, 3] 2.101555 0.467051 False 0.000025 2.101555 0.467051 11 dummy_constant 5.489916 3.640724 [1, 2, 3] 2.309594 1.105057 False 0.000040 2.309594 1.105057 12 dummy_constant 17.409494 12.920608 [1, 2, 3] 3.115539 2.965677 False 0.000029 3.115539 2.965677 13 dummy_constant 6.044756 4.653133 [1, 2, 3] 2.642929 0.253046 False 0.000027 2.642929 0.253046 14 dummy_constant 0.342221 0.211525 [1, 2, 3] 0.895634 0.734518 False 0.000026 0.895634 0.734518 15 dummy_constant 11.078360 7.687497 [1, 2, 3] 2.206258 2.685448 False 0.000030 2.206258 2.685448 16 dummy_constant 2.367144 1.280506 [1, 2, 3] 0.964027 1.532078 False 0.000032 0.964027 1.532078 17 dummy_constant -0.209298 0.038290 [1, 2, 3] 0.686754 0.558420 False 0.000029 0.686754 0.558420 18 dummy_constant 3.275212 1.854445 [1, 2, 3] 1.612860 1.284848 False 0.000029 1.612860 1.284848 19 dummy_constant 1.909438 1.353558 [1, 2, 3] 0.309585 1.647737 False 0.000030 0.309585 1.647737 20 dummy_constant 2.117214 1.141538 [1, 2, 3] 1.140871 1.354881 False 0.000030 1.140871 1.354881 In\u00a0[4]: Copied! <pre>\n</pre>"},{"location":"examples/basic/checkpointing_and_restarts/#checkpointing-and-restarts","title":"Checkpointing and Restarts\u00b6","text":"<p>If <code>dump_file</code> is provided Xopt will save the data and the Xopt configuration in a yaml file. This can be used directly to create a new Xopt object.</p>"},{"location":"examples/basic/checkpointing_and_restarts/#checkpoints","title":"Checkpoints\u00b6","text":"<p>Since we specified a dump file Xopt will dump the data and all of the options required to create a new Xopt object that continues the run.</p>"},{"location":"examples/basic/checkpointing_and_restarts/#create-xopt-object-from-dump-file","title":"Create Xopt object from dump file\u00b6","text":""},{"location":"examples/basic/xopt_basic/","title":"Xopt basic example","text":"In\u00a0[1]: Copied! <pre># Import the class\nfrom xopt import Xopt\n</pre> # Import the class from xopt import Xopt In\u00a0[2]: Copied! <pre># Nicer plotting\n%config InlineBackend.figure_format = 'retina'\n</pre> # Nicer plotting %config InlineBackend.figure_format = 'retina' In\u00a0[3]: Copied! <pre># Make a proper input file.\nYAML = \"\"\"\nxopt: {}\nevaluator:\n    function: xopt.resources.test_functions.tnk.evaluate_TNK\n    function_kwargs:\n        a: 999\n\ngenerator:\n    name: random\n\nvocs:\n    variables:\n        x1: [0, 3.14159]\n        x2: [0, 3.14159]\n    objectives: {y1: MINIMIZE, y2: MINIMIZE}\n    constraints:\n        c1: [GREATER_THAN, 0]\n        c2: [LESS_THAN, 0.5]\n    constants: {a: dummy_constant}\n\n\"\"\"\n</pre> # Make a proper input file. YAML = \"\"\" xopt: {} evaluator:     function: xopt.resources.test_functions.tnk.evaluate_TNK     function_kwargs:         a: 999  generator:     name: random  vocs:     variables:         x1: [0, 3.14159]         x2: [0, 3.14159]     objectives: {y1: MINIMIZE, y2: MINIMIZE}     constraints:         c1: [GREATER_THAN, 0]         c2: [LESS_THAN, 0.5]     constants: {a: dummy_constant}  \"\"\" In\u00a0[4]: Copied! <pre># create Xopt object.\nX = Xopt(YAML)\n</pre> # create Xopt object. X = Xopt(YAML) In\u00a0[5]: Copied! <pre># Convenient representation of the state.\nX\n</pre> # Convenient representation of the state. X Out[5]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: null}\ngenerator: {name: random}\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 1\n  function_kwargs: {sleep: 0, random_sleep: 0, raise_probability: 0, a: 999}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE, y2: MINIMIZE}\n  constants: {a: dummy_constant}\n  observables: []\n</pre> In\u00a0[6]: Copied! <pre>X.random_evaluate(10)\n</pre> X.random_evaluate(10) Out[6]: x1 x2 a y1 y2 c1 c2 some_array xopt_runtime xopt_error 1 2.776879 1.601700 dummy_constant 2.776879 1.601700 9.325924 6.397920 [1, 2, 3] 0.000067 False 2 0.755737 0.133636 dummy_constant 0.755737 0.133636 -0.316770 0.199624 [1, 2, 3] 0.000013 False 3 0.712666 0.975330 dummy_constant 0.712666 0.975330 0.537440 0.271166 [1, 2, 3] 0.000010 False 4 2.754530 1.209652 dummy_constant 2.754530 1.209652 7.956335 5.586510 [1, 2, 3] 0.000008 False 5 0.041433 1.757630 dummy_constant 0.041433 1.757630 1.998006 1.791917 [1, 2, 3] 0.000009 False 6 0.163652 2.297101 dummy_constant 0.163652 2.297101 4.261512 3.342703 [1, 2, 3] 0.000009 False 7 2.007573 1.434512 dummy_constant 2.007573 1.434512 5.175833 3.146088 [1, 2, 3] 0.000008 False 8 1.759215 0.487382 dummy_constant 1.759215 0.487382 2.370224 1.585781 [1, 2, 3] 0.000008 False 9 0.702064 2.402438 dummy_constant 0.702064 2.402438 5.280867 3.660100 [1, 2, 3] 0.000008 False 10 3.014374 1.264489 dummy_constant 3.014374 1.264489 9.585639 6.906518 [1, 2, 3] 0.000011 False In\u00a0[7]: Copied! <pre>import numpy as np\nnp.random.seed(10)\n</pre> import numpy as np np.random.seed(10) In\u00a0[8]: Copied! <pre># Take one step (generate a single point)\nX.step()\n</pre> # Take one step (generate a single point) X.step() In\u00a0[9]: Copied! <pre># examine the results\nX.data\n</pre> # examine the results X.data Out[9]: x1 x2 a y1 y2 c1 c2 some_array xopt_runtime xopt_error 1 2.776879 1.601700 dummy_constant 2.776879 1.601700 9.325924 6.397920 [1, 2, 3] 0.000067 False 2 0.755737 0.133636 dummy_constant 0.755737 0.133636 -0.316770 0.199624 [1, 2, 3] 0.000013 False 3 0.712666 0.975330 dummy_constant 0.712666 0.975330 0.537440 0.271166 [1, 2, 3] 0.000010 False 4 2.754530 1.209652 dummy_constant 2.754530 1.209652 7.956335 5.586510 [1, 2, 3] 0.000008 False 5 0.041433 1.757630 dummy_constant 0.041433 1.757630 1.998006 1.791917 [1, 2, 3] 0.000009 False 6 0.163652 2.297101 dummy_constant 0.163652 2.297101 4.261512 3.342703 [1, 2, 3] 0.000009 False 7 2.007573 1.434512 dummy_constant 2.007573 1.434512 5.175833 3.146088 [1, 2, 3] 0.000008 False 8 1.759215 0.487382 dummy_constant 1.759215 0.487382 2.370224 1.585781 [1, 2, 3] 0.000008 False 9 0.702064 2.402438 dummy_constant 0.702064 2.402438 5.280867 3.660100 [1, 2, 3] 0.000008 False 10 3.014374 1.264489 dummy_constant 3.014374 1.264489 9.585639 6.906518 [1, 2, 3] 0.000011 False 11 0.718417 3.076396 dummy_constant 0.718417 3.076396 9.066664 6.685522 [1, 2, 3] 0.000183 False In\u00a0[10]: Copied! <pre># take a couple of steps and examine the results\nfor _ in range(10):\n    X.step()\nX.data\n</pre> # take a couple of steps and examine the results for _ in range(10):     X.step() X.data Out[10]: x1 x2 a y1 y2 c1 c2 some_array xopt_runtime xopt_error 1 2.776879 1.601700 dummy_constant 2.776879 1.601700 9.325924 6.397920 [1, 2, 3] 0.000067 False 2 0.755737 0.133636 dummy_constant 0.755737 0.133636 -0.316770 0.199624 [1, 2, 3] 0.000013 False 3 0.712666 0.975330 dummy_constant 0.712666 0.975330 0.537440 0.271166 [1, 2, 3] 0.000010 False 4 2.754530 1.209652 dummy_constant 2.754530 1.209652 7.956335 5.586510 [1, 2, 3] 0.000008 False 5 0.041433 1.757630 dummy_constant 0.041433 1.757630 1.998006 1.791917 [1, 2, 3] 0.000009 False 6 0.163652 2.297101 dummy_constant 0.163652 2.297101 4.261512 3.342703 [1, 2, 3] 0.000009 False 7 2.007573 1.434512 dummy_constant 2.007573 1.434512 5.175833 3.146088 [1, 2, 3] 0.000008 False 8 1.759215 0.487382 dummy_constant 1.759215 0.487382 2.370224 1.585781 [1, 2, 3] 0.000008 False 9 0.702064 2.402438 dummy_constant 0.702064 2.402438 5.280867 3.660100 [1, 2, 3] 0.000008 False 10 3.014374 1.264489 dummy_constant 3.014374 1.264489 9.585639 6.906518 [1, 2, 3] 0.000011 False 11 0.718417 3.076396 dummy_constant 0.718417 3.076396 9.066664 6.685522 [1, 2, 3] 0.000183 False 12 1.150927 0.789155 dummy_constant 1.150927 0.789155 1.045563 0.507317 [1, 2, 3] 0.000223 False 13 1.575485 2.435371 dummy_constant 1.575485 2.435371 7.510380 4.902330 [1, 2, 3] 0.000033 False 14 2.519358 0.752314 dummy_constant 2.519358 0.752314 5.920078 4.141468 [1, 2, 3] 0.000025 False 15 2.610313 2.864063 dummy_constant 2.610313 2.864063 13.942816 10.042213 [1, 2, 3] 0.000024 False 16 0.988470 0.146419 dummy_constant 0.988470 0.146419 0.068991 0.363623 [1, 2, 3] 0.000024 False 17 3.129186 1.532492 dummy_constant 3.129186 1.532492 11.086588 7.978659 [1, 2, 3] 0.000025 False 18 0.588668 1.217284 dummy_constant 0.588668 1.217284 0.768029 0.522359 [1, 2, 3] 0.000024 False 19 0.874131 2.224635 dummy_constant 0.874131 2.224635 4.617362 3.114340 [1, 2, 3] 0.000024 False 20 0.258320 0.896686 dummy_constant 0.258320 0.896686 -0.106956 0.215769 [1, 2, 3] 0.000025 False 21 1.437138 2.694950 dummy_constant 1.437138 2.694950 8.326577 5.696033 [1, 2, 3] 0.000025 False In\u00a0[11]: Copied! <pre>import matplotlib.pyplot as plt\n\nX.data.plot(*X.vocs.objective_names, kind=\"scatter\")\n</pre> import matplotlib.pyplot as plt  X.data.plot(*X.vocs.objective_names, kind=\"scatter\") Out[11]: <pre>&lt;Axes: xlabel='y1', ylabel='y2'&gt;</pre> In\u00a0[12]: Copied! <pre>import yaml\nimport json\n\nconfig  = yaml.safe_load(YAML) \n# All these methods work\n\nX = Xopt(YAML)\nX = Xopt(config)\nX = Xopt(json.dumps(config, indent=4))\n</pre> import yaml import json  config  = yaml.safe_load(YAML)  # All these methods work  X = Xopt(YAML) X = Xopt(config) X = Xopt(json.dumps(config, indent=4))  In\u00a0[13]: Copied! <pre># Call the evaluator's function directly.\nX.evaluate({'x1': .5, 'x2': 0.5})\n</pre> # Call the evaluator's function directly. X.evaluate({'x1': .5, 'x2': 0.5}) Out[13]: <pre>{'y1': 0.5,\n 'y2': 0.5,\n 'c1': -0.6,\n 'c2': 0.0,\n 'some_array': array([1, 2, 3]),\n 'xopt_runtime': 5.209999994804093e-05,\n 'xopt_error': False}</pre> In\u00a0[14]: Copied! <pre># Create random inputs according to the vocs\nX.random_inputs()\n</pre> # Create random inputs according to the vocs X.random_inputs() Out[14]: <pre>{'x1': array([1.9687064]), 'x2': array([1.02373858]), 'a': 'dummy_constant'}</pre> In\u00a0[15]: Copied! <pre># These can be combined:\nnp.random.seed(10)\nX.evaluate(X.random_inputs())\n</pre> # These can be combined: np.random.seed(10) X.evaluate(X.random_inputs()) Out[15]: <pre>{'y1': array([0.71841678]),\n 'y2': array([3.07639588]),\n 'c1': array([9.06666383]),\n 'c2': array([6.68552164]),\n 'some_array': array([1, 2, 3]),\n 'xopt_runtime': 5.1101000053677126e-05,\n 'xopt_error': False}</pre> In\u00a0[16]: Copied! <pre># And this is a convenience method for above\nnp.random.seed(10)\nX.random_evaluate()\n</pre> # And this is a convenience method for above np.random.seed(10) X.random_evaluate() Out[16]: x1 x2 a y1 y2 c1 c2 some_array xopt_runtime xopt_error 1 0.718417 3.076396 dummy_constant 0.718417 3.076396 9.066664 6.685522 [1, 2, 3] 0.00003 False In\u00a0[17]: Copied! <pre># Notebook printing output\nfrom xopt import output_notebook\noutput_notebook()\n</pre> # Notebook printing output from xopt import output_notebook output_notebook() In\u00a0[18]: Copied! <pre>X.step()\n</pre> X.step() <pre>Running Xopt step\n</pre>"},{"location":"examples/basic/xopt_basic/#xopt-basic-example","title":"Xopt basic example\u00b6","text":"<p>An Xopt problem can be described by a simple YAML file. Here we will demonstrate how this is used to optimize a well-known constrained multi-objective test function, TNK. The TNK function is defined with:</p> <p>$n=2$ variables: $x_i \\in [0, \\pi], i=1,2$</p> <p>Objectives:</p> <ul> <li>$f_i(x) = x_i$</li> </ul> <p>Constraints:</p> <ul> <li>$g_1(x) = -x_1^2 -x_2^2 + 1 + 0.1 \\cos\\left(16 \\arctan \\frac{x_1}{x_2}\\right) \\le 0$</li> <li>$g_2(x) = (x_1 - 1/2)^2 + (x_2-1/2)^2 \\le 0.5$</li> </ul>"},{"location":"examples/basic/xopt_basic/#xopt-components","title":"Xopt Components\u00b6","text":"<p>The definition of the Xopt object requires 4 parts, listed below:</p> <ul> <li>The <code>Xopt</code> object itself, which controlls data flow, stores data and governs data loading and saving.</li> <li>The <code>Evaluator</code> object, which evaluates input points using the arbitrary function specified by the <code>function</code> property.</li> <li>The <code>Generator</code> object, which, when given data that has been evaluated, generates future points to evaluate using the evaluator.</li> <li>The <code>VOCS</code> (variables, objectives, constraints, statics) object, which specifies the input domain, the objectives, constraints and constants passed to the evaluator function.</li> </ul> <p>Through the YAML interface these objects and their options are specified by name. Here we will make one:</p>"},{"location":"examples/basic/xopt_basic/#run-random-data-generation","title":"Run Random data generation\u00b6","text":""},{"location":"examples/basic/xopt_basic/#plotting","title":"Plotting\u00b6","text":"<p>Plot the objective results</p>"},{"location":"examples/basic/xopt_basic/#alternative-initialization-methods","title":"Alternative initialization methods\u00b6","text":"<p>For convenience, if the first (and only) positional argument is present, then Xopt will automatically try to load from JSON, YAML str or files, or as a dict.</p>"},{"location":"examples/basic/xopt_basic/#convenience-methods","title":"Convenience Methods\u00b6","text":""},{"location":"examples/basic/xopt_basic/#logging","title":"Logging\u00b6","text":"<p>Normally Xopt will not issue print statments, and instead issue logging messages. Below will enable these to be seen in the notebook</p>"},{"location":"examples/basic/xopt_evaluator/","title":"Xopt Evaluator Basic Usage","text":"In\u00a0[1]: Copied! <pre># needed for macos\nimport platform\nif platform.system() == \"Darwin\": import multiprocessing;multiprocessing.set_start_method(\"fork\")\n</pre> # needed for macos import platform if platform.system() == \"Darwin\": import multiprocessing;multiprocessing.set_start_method(\"fork\")  In\u00a0[2]: Copied! <pre>from xopt import Xopt, Evaluator, VOCS\nfrom xopt.generators.random import RandomGenerator\n\nimport pandas as pd\n\nfrom time import sleep\nfrom numpy.random import randint\n\nfrom typing import Dict\n\nimport numpy as np\nnp.random.seed(666) # for reproducibility\n</pre> from xopt import Xopt, Evaluator, VOCS from xopt.generators.random import RandomGenerator  import pandas as pd  from time import sleep from numpy.random import randint  from typing import Dict  import numpy as np np.random.seed(666) # for reproducibility <p>Define a custom function <code>f(inputs: Dict) -&gt; outputs: Dict</code>.</p> In\u00a0[3]: Copied! <pre>def f(inputs: Dict, enable_errors=True) -&gt; Dict:\n\n    sleep(randint(1, 5)*.1)  # simulate computation time\n    # Make some occasional errors\n    if enable_errors and np.any(inputs[\"x\"] &gt; 0.8):\n        raise ValueError(\"x &gt; 0.8\")\n\n    return {\"f1\": inputs[\"x\"] ** 2 + inputs[\"y\"] ** 2}\n</pre> def f(inputs: Dict, enable_errors=True) -&gt; Dict:      sleep(randint(1, 5)*.1)  # simulate computation time     # Make some occasional errors     if enable_errors and np.any(inputs[\"x\"] &gt; 0.8):         raise ValueError(\"x &gt; 0.8\")      return {\"f1\": inputs[\"x\"] ** 2 + inputs[\"y\"] ** 2} <p>Define variables, objectives, constraints, and other settings (VOCS)</p> In\u00a0[4]: Copied! <pre>vocs = VOCS(variables={\"x\": [0, 1], \"y\": [0, 1]}, objectives={\"f1\": \"MINIMIZE\"})\nvocs\n</pre> vocs = VOCS(variables={\"x\": [0, 1], \"y\": [0, 1]}, objectives={\"f1\": \"MINIMIZE\"}) vocs   Out[4]: <pre>VOCS(variables={'x': [0.0, 1.0], 'y': [0.0, 1.0]}, constraints={}, objectives={'f1': 'MINIMIZE'}, constants={}, observables=[])</pre> <p>This can be used to make some random inputs for evaluating the function.</p> In\u00a0[5]: Copied! <pre>in1 = vocs.random_inputs()\n\nf(in1, enable_errors=False)\n</pre> in1 = vocs.random_inputs()  f(in1, enable_errors=False) Out[5]: <pre>{'f1': 0.11401572022703582}</pre> In\u00a0[6]: Copied! <pre># Add in occasional errors. \ntry:\n    f({\"x\": 1, \"y\": 0})\nexcept Exception as ex:\n    print(f\"Caught error in f: {ex}\")\n</pre> # Add in occasional errors.  try:     f({\"x\": 1, \"y\": 0}) except Exception as ex:     print(f\"Caught error in f: {ex}\") <pre>Caught error in f: x &gt; 0.8\n</pre> In\u00a0[7]: Copied! <pre># Create Evaluator\nev = Evaluator(function=f)\n</pre> # Create Evaluator ev = Evaluator(function=f) In\u00a0[8]: Copied! <pre># Single input evaluation\nev.evaluate(in1)\n</pre> # Single input evaluation ev.evaluate(in1) Out[8]: <pre>{'f1': 0.11401572022703582,\n 'xopt_runtime': 0.20047653099993568,\n 'xopt_error': False}</pre> In\u00a0[9]: Copied! <pre># Dataframe evaluation\nin10 = pd.DataFrame({\n    \"x\":np.linspace(0,1,10),\n    \"y\":np.linspace(0,1,10)\n})\nev.evaluate_data(in10)\n</pre> # Dataframe evaluation in10 = pd.DataFrame({     \"x\":np.linspace(0,1,10),     \"y\":np.linspace(0,1,10) }) ev.evaluate_data(in10)  Out[9]: f1 xopt_runtime xopt_error xopt_error_str 0 0.000000 0.300592 False NaN 1 0.024691 0.100391 False NaN 2 0.098765 0.200476 False NaN 3 0.222222 0.400630 False NaN 4 0.395062 0.300404 False NaN 5 0.617284 0.400662 False NaN 6 0.888889 0.100354 False NaN 7 1.209877 0.400747 False NaN 8 NaN 0.100842 True Traceback (most recent call last):\\n  File \"/u... 9 NaN 0.300725 True Traceback (most recent call last):\\n  File \"/u... In\u00a0[10]: Copied! <pre># Dataframe submission (returns futures dict)\nfutures = ev.submit_data(in10)\nfor future in futures:\n    print(future.result())\n</pre> # Dataframe submission (returns futures dict) futures = ev.submit_data(in10) for future in futures:     print(future.result()) <pre>{'f1': 0.0, 'xopt_runtime': 0.2004360619999943, 'xopt_error': False}\n{'f1': 0.024691358024691357, 'xopt_runtime': 0.40067592399998375, 'xopt_error': False}\n{'f1': 0.09876543209876543, 'xopt_runtime': 0.10049833000005037, 'xopt_error': False}\n{'f1': 0.2222222222222222, 'xopt_runtime': 0.3006383929999856, 'xopt_error': False}\n{'f1': 0.3950617283950617, 'xopt_runtime': 0.10036873100000321, 'xopt_error': False}\n{'f1': 0.617283950617284, 'xopt_runtime': 0.40068332500004544, 'xopt_error': False}\n{'f1': 0.8888888888888888, 'xopt_runtime': 0.20044786200003273, 'xopt_error': False}\n{'f1': 1.2098765432098761, 'xopt_runtime': 0.30054479299997183, 'xopt_error': False}\n{'xopt_runtime': 0.10052272999996603, 'xopt_error': True, 'xopt_error_str': 'Traceback (most recent call last):\\n  File \"/usr/share/miniconda3/envs/xopt-dev/lib/python3.9/site-packages/xopt/utils.py\", line 132, in safe_call\\n    result = func(*args, **kwargs)\\n  File \"/tmp/ipykernel_3534/4275037860.py\", line 6, in f\\n    raise ValueError(\"x &gt; 0.8\")\\nValueError: x &gt; 0.8\\n'}\n{'xopt_runtime': 0.400851024000076, 'xopt_error': True, 'xopt_error_str': 'Traceback (most recent call last):\\n  File \"/usr/share/miniconda3/envs/xopt-dev/lib/python3.9/site-packages/xopt/utils.py\", line 132, in safe_call\\n    result = func(*args, **kwargs)\\n  File \"/tmp/ipykernel_3534/4275037860.py\", line 6, in f\\n    raise ValueError(\"x &gt; 0.8\")\\nValueError: x &gt; 0.8\\n'}\n</pre> In\u00a0[11]: Copied! <pre># Dataframe evaluation, vectorized\nev.vectorized = True\nev.evaluate_data(in10)\n</pre> # Dataframe evaluation, vectorized ev.vectorized = True ev.evaluate_data(in10)  Out[11]: xopt_runtime xopt_error xopt_error_str 0 0.201241 True Traceback (most recent call last):\\n  File \"/u... 1 0.201241 True Traceback (most recent call last):\\n  File \"/u... 2 0.201241 True Traceback (most recent call last):\\n  File \"/u... 3 0.201241 True Traceback (most recent call last):\\n  File \"/u... 4 0.201241 True Traceback (most recent call last):\\n  File \"/u... 5 0.201241 True Traceback (most recent call last):\\n  File \"/u... 6 0.201241 True Traceback (most recent call last):\\n  File \"/u... 7 0.201241 True Traceback (most recent call last):\\n  File \"/u... 8 0.201241 True Traceback (most recent call last):\\n  File \"/u... 9 0.201241 True Traceback (most recent call last):\\n  File \"/u... In\u00a0[12]: Copied! <pre># Vectorized submission. This returns a single future.\nev.vectorized = True\nfutures = ev.submit_data(in10)\nlen(futures)\n</pre> # Vectorized submission. This returns a single future. ev.vectorized = True futures = ev.submit_data(in10) len(futures) Out[12]: <pre>1</pre> In\u00a0[13]: Copied! <pre>futures[0].result()\n</pre> futures[0].result() Out[13]: <pre>{'xopt_runtime': 0.20063168399997267,\n 'xopt_error': True,\n 'xopt_error_str': 'Traceback (most recent call last):\\n  File \"/usr/share/miniconda3/envs/xopt-dev/lib/python3.9/site-packages/xopt/utils.py\", line 132, in safe_call\\n    result = func(*args, **kwargs)\\n  File \"/tmp/ipykernel_3534/4275037860.py\", line 6, in f\\n    raise ValueError(\"x &gt; 0.8\")\\nValueError: x &gt; 0.8\\n'}</pre> In\u00a0[14]: Copied! <pre># Collect in a dataframe\nres = futures[0].result()\n# If there is an error, all outputs are spoiled.\nif res['xopt_error']:\n    res = [res]\npd.DataFrame(res)\n</pre> # Collect in a dataframe res = futures[0].result() # If there is an error, all outputs are spoiled. if res['xopt_error']:     res = [res] pd.DataFrame(res) Out[14]: xopt_runtime xopt_error xopt_error_str 0 0.200632 True Traceback (most recent call last):\\n  File \"/u... In\u00a0[15]: Copied! <pre>from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor\nMAX_WORKERS = 10\n</pre> from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor MAX_WORKERS = 10 In\u00a0[16]: Copied! <pre># Create Executor insance\nexecutor = ProcessPoolExecutor(max_workers=MAX_WORKERS)\nexecutor\n</pre> # Create Executor insance executor = ProcessPoolExecutor(max_workers=MAX_WORKERS) executor Out[16]: <pre>&lt;concurrent.futures.process.ProcessPoolExecutor at 0x7f4f023a5d60&gt;</pre> In\u00a0[17]: Copied! <pre># Dask (Optional)\n# from dask.distributed import Client\n# import logging\n# client = Client( silence_logs=logging.ERROR)\n# executor = client.get_executor()\n# client\n</pre> # Dask (Optional) # from dask.distributed import Client # import logging # client = Client( silence_logs=logging.ERROR) # executor = client.get_executor() # client In\u00a0[18]: Copied! <pre># This calls `executor.map`\nev = Evaluator(function=f, executor=executor, max_workers=MAX_WORKERS)\n</pre> # This calls `executor.map` ev = Evaluator(function=f, executor=executor, max_workers=MAX_WORKERS) In\u00a0[19]: Copied! <pre># This will run in parallel\nev.evaluate_data(in10)\n</pre> # This will run in parallel ev.evaluate_data(in10) Out[19]: f1 xopt_runtime xopt_error xopt_error_str 0 0.000000 0.200930 False NaN 1 0.024691 0.201239 False NaN 2 0.098765 0.206688 False NaN 3 0.222222 0.200909 False NaN 4 0.395062 0.201135 False NaN 5 0.617284 0.204206 False NaN 6 0.888889 0.200856 False NaN 7 1.209877 0.201133 False NaN 8 NaN 0.201827 True Traceback (most recent call last):\\n  File \"/u... 9 NaN 0.204063 True Traceback (most recent call last):\\n  File \"/u... In\u00a0[20]: Copied! <pre>X = Xopt(generator=RandomGenerator(vocs=vocs), evaluator=Evaluator(function=f),\n         vocs=vocs)\n\n# Submit to the evaluator some new inputs\nX.submit_data(vocs.random_inputs(4))\n\n# Unevaluated inputs are collected in a dataframe\nX._input_data\n</pre> X = Xopt(generator=RandomGenerator(vocs=vocs), evaluator=Evaluator(function=f),          vocs=vocs)  # Submit to the evaluator some new inputs X.submit_data(vocs.random_inputs(4))  # Unevaluated inputs are collected in a dataframe X._input_data Out[20]: x y 1 0.844488 0.232588 2 0.265390 0.046769 3 0.268404 0.709026 4 0.142141 0.152218 In\u00a0[21]: Copied! <pre># Internal futures dictionary\nX._futures\n</pre> # Internal futures dictionary X._futures Out[21]: <pre>{1: &lt;Future at 0x7f4f02350340 state=finished returned dict&gt;,\n 2: &lt;Future at 0x7f4f586be8b0 state=finished returned dict&gt;,\n 3: &lt;Future at 0x7f4f023a5790 state=finished returned dict&gt;,\n 4: &lt;Future at 0x7f4f023a55e0 state=finished returned dict&gt;}</pre> In\u00a0[22]: Copied! <pre># Collect all finished futures and updata dataframe\nX.process_futures()\nX.data\n</pre> # Collect all finished futures and updata dataframe X.process_futures() X.data Out[22]: x y xopt_runtime xopt_error xopt_error_str f1 1 0.844488 0.232588 0.300922 True Traceback (most recent call last):\\n  File \"/u... NaN 2 0.265390 0.046769 0.200426 False NaN 0.072619 3 0.268404 0.709026 0.300586 False NaN 0.574759 4 0.142141 0.152218 0.400710 False NaN 0.043374 In\u00a0[23]: Copied! <pre># Futures are now cleared out\nX._futures\n</pre> # Futures are now cleared out X._futures Out[23]: <pre>{}</pre> In\u00a0[24]: Copied! <pre># This is the internal counter\nX._ix_last\n</pre> # This is the internal counter X._ix_last Out[24]: <pre>4</pre> In\u00a0[25]: Copied! <pre># This causes immediate evaluation\nX.evaluate_data(vocs.random_inputs(4))\n</pre> # This causes immediate evaluation X.evaluate_data(vocs.random_inputs(4)) Out[25]: x y f1 xopt_runtime xopt_error xopt_error_str 5 0.705105 0.723537 1.020680 0.300536 False NaN 6 0.475619 0.532415 0.509679 0.300545 False NaN 7 0.057461 0.684185 0.471410 0.400702 False NaN 8 0.925261 0.609837 NaN 0.400855 True Traceback (most recent call last):\\n  File \"/u... In\u00a0[26]: Copied! <pre># Singe generation step\nX.step()\nX.data\n</pre> # Singe generation step X.step() X.data Out[26]: x y xopt_runtime xopt_error xopt_error_str f1 1 0.844488 0.232588 0.300922 True Traceback (most recent call last):\\n  File \"/u... NaN 2 0.265390 0.046769 0.200426 False NaN 0.072619 3 0.268404 0.709026 0.300586 False NaN 0.574759 4 0.142141 0.152218 0.400710 False NaN 0.043374 5 0.705105 0.723537 0.300536 False NaN 1.020680 6 0.475619 0.532415 0.300545 False NaN 0.509679 7 0.057461 0.684185 0.400702 False NaN 0.471410 8 0.925261 0.609837 0.400855 True Traceback (most recent call last):\\n  File \"/u... NaN 9 0.333263 0.127120 0.200504 False NaN 0.127224 In\u00a0[27]: Copied! <pre># Usage with a parallel executor. \nX2 = Xopt(\n    generator=RandomGenerator(vocs=vocs),\n    evaluator=Evaluator(function=f, executor=executor, max_workers=MAX_WORKERS),\n    vocs=vocs,\n)\nX2.options.asynch = True\n</pre> # Usage with a parallel executor.  X2 = Xopt(     generator=RandomGenerator(vocs=vocs),     evaluator=Evaluator(function=f, executor=executor, max_workers=MAX_WORKERS),     vocs=vocs, ) X2.options.asynch = True In\u00a0[28]: Copied! <pre>X2.step()\n</pre> X2.step() In\u00a0[29]: Copied! <pre>for _ in range(20):\n    X2.step()\n\nlen(X2.data)\n</pre> for _ in range(20):     X2.step()  len(X2.data) Out[29]: <pre>70</pre> In\u00a0[30]: Copied! <pre>X2.data.plot.scatter(\"x\", \"y\")\n</pre> X2.data.plot.scatter(\"x\", \"y\") Out[30]: <pre>&lt;Axes: xlabel='x', ylabel='y'&gt;</pre> In\u00a0[31]: Copied! <pre># Asynchronous, Vectorized\nX2 = Xopt(\n    generator=RandomGenerator(vocs=vocs),\n    evaluator=Evaluator(function=f, executor=executor, max_workers=MAX_WORKERS),\n    vocs=vocs,\n)\nX2.options.asynch = True\nX2.evaluator.vectorized = True\n\n# This takes fewer steps to achieve a similar numver of evaluations\nfor _ in range(3):\n    X2.step()\n\nlen(X2.data)\n</pre> # Asynchronous, Vectorized X2 = Xopt(     generator=RandomGenerator(vocs=vocs),     evaluator=Evaluator(function=f, executor=executor, max_workers=MAX_WORKERS),     vocs=vocs, ) X2.options.asynch = True X2.evaluator.vectorized = True  # This takes fewer steps to achieve a similar numver of evaluations for _ in range(3):     X2.step()  len(X2.data) Out[31]: <pre>30</pre>"},{"location":"examples/basic/xopt_evaluator/#xopt-evaluator-basic-usage","title":"Xopt Evaluator Basic Usage\u00b6","text":"<p>The <code>Evaluator</code> handles the execution of the user-provided <code>function</code> with optional <code>function_kwags</code>, asyncrhonously and parallel, with exception handling.</p>"},{"location":"examples/basic/xopt_evaluator/#executors","title":"Executors\u00b6","text":""},{"location":"examples/basic/xopt_evaluator/#evaluator-in-the-xopt-object","title":"Evaluator in the Xopt object\u00b6","text":""},{"location":"examples/basic/xopt_generator/","title":"Working with Xopt generators","text":"In\u00a0[1]: Copied! <pre># Import the class\nfrom xopt.generators import generators, get_generator\n</pre> # Import the class from xopt.generators import generators, get_generator In\u00a0[2]: Copied! <pre># named generators\ngenerators.keys()\n</pre> # named generators generators.keys() Out[2]: <pre>dict_keys(['random', 'extremum_seeking', 'rcds', 'cnsga', 'upper_confidence_bound', 'mobo', 'bayesian_exploration', 'time_dependent_upper_confidence_bound', 'expected_improvement', 'multi_fidelity', 'mggpo', 'neldermead'])</pre> In\u00a0[3]: Copied! <pre># get default options for the upper confidence bound generator\ngenerator_type = get_generator(\"upper_confidence_bound\")\n</pre> # get default options for the upper confidence bound generator generator_type = get_generator(\"upper_confidence_bound\") In\u00a0[4]: Copied! <pre># define vocs for the problem\nfrom xopt.vocs import VOCS\nimport math\n\nvocs = VOCS(\n    variables={\"x\": [0, 2 * math.pi]},\n    objectives={\"f\": \"MINIMIZE\"},\n)\n</pre> # define vocs for the problem from xopt.vocs import VOCS import math  vocs = VOCS(     variables={\"x\": [0, 2 * math.pi]},     objectives={\"f\": \"MINIMIZE\"}, ) In\u00a0[5]: Copied! <pre># define a test function to optimize\nimport numpy as np\n\n\ndef test_function(input_dict):\n    return {\"f\": np.sin(input_dict[\"x\"])}\n</pre> # define a test function to optimize import numpy as np   def test_function(input_dict):     return {\"f\": np.sin(input_dict[\"x\"])} In\u00a0[6]: Copied! <pre># create xopt evaluator and run the optimization\nfrom xopt import Evaluator, Xopt\n\nevaluator = Evaluator(function=test_function)\ngenerator = generator_type(vocs=vocs)\nX = Xopt(generator=generator, evaluator=evaluator, vocs=vocs)\nX.options\n</pre> # create xopt evaluator and run the optimization from xopt import Evaluator, Xopt  evaluator = Evaluator(function=test_function) generator = generator_type(vocs=vocs) X = Xopt(generator=generator, evaluator=evaluator, vocs=vocs) X.options Out[6]: <pre>XoptOptions(asynch=False, strict=False, dump_file=None, max_evaluations=None)</pre> In\u00a0[7]: Copied! <pre># run the optimization for a couple of iterations (see bayes_opt folder for\n# more examples of ucb)\nX.random_evaluate(2)\nfor i in range(4):\n    X.step()\n</pre> # run the optimization for a couple of iterations (see bayes_opt folder for # more examples of ucb) X.random_evaluate(2) for i in range(4):     X.step() In\u00a0[8]: Copied! <pre>X.data\n</pre> X.data Out[8]: x f xopt_runtime xopt_error 1 1.683007 9.937110e-01 0.000017 False 2 2.673549 4.511414e-01 0.000003 False 3 4.900968 -9.822715e-01 0.000012 False 4 6.283185 -2.449294e-16 0.000010 False 5 4.300175 -9.162359e-01 0.000011 False 6 4.658771 -9.985629e-01 0.000025 False In\u00a0[8]: Copied! <pre>\n</pre> In\u00a0[8]: Copied! <pre>\n</pre>"},{"location":"examples/basic/xopt_generator/#working-with-xopt-generators","title":"Working with Xopt generators\u00b6","text":""},{"location":"examples/basic/xopt_parallel/","title":"Xopt Parallel Examples","text":"In\u00a0[1]: Copied! <pre>from xopt import Xopt\n</pre> from xopt import Xopt In\u00a0[2]: Copied! <pre># Helpers for this notebook\nimport multiprocessing\nN_CPUS=multiprocessing.cpu_count()\nN_CPUS\n\nimport os\n\n# directory for data. \nos.makedirs(\"temp\", exist_ok=True)\n\n# Notebook printing output\n#from xopt import output_notebook\n#output_notebook()\n\n# Nicer plotting\n%config InlineBackend.figure_format = 'retina'\n</pre> # Helpers for this notebook import multiprocessing N_CPUS=multiprocessing.cpu_count() N_CPUS  import os  # directory for data.  os.makedirs(\"temp\", exist_ok=True)  # Notebook printing output #from xopt import output_notebook #output_notebook()  # Nicer plotting %config InlineBackend.figure_format = 'retina'  <p>The <code>Xopt</code> object can be instantiated from a JSON or YAML file, or a dict, with the proper structure.</p> <p>Here we will make one</p> In\u00a0[3]: Copied! <pre># Make a proper input file.\nYAML = \"\"\"\nxopt:\n  asynch: True\n  max_evaluations: 1000\n\ngenerator:\n  name: cnsga\n  output_path: temp\n  population_size:  64\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  function_kwargs:\n    sleep: 0\n    random_sleep: 0.1\nvocs:\n  variables:\n    x1: [0, 3.14159]\n    x2: [0, 3.14159]\n  objectives: {y1: MINIMIZE, y2: MINIMIZE}\n  constraints:\n    c1: [GREATER_THAN, 0]\n    c2: [LESS_THAN, 0.5]\n  linked_variables: {x9: x1}\n  constants: {a: dummy_constant}\n\n\"\"\"\nX = Xopt(YAML)\nX\n</pre> # Make a proper input file. YAML = \"\"\" xopt:   asynch: True   max_evaluations: 1000  generator:   name: cnsga   output_path: temp   population_size:  64    evaluator:   function: xopt.resources.test_functions.tnk.evaluate_TNK   function_kwargs:     sleep: 0     random_sleep: 0.1    vocs:   variables:     x1: [0, 3.14159]     x2: [0, 3.14159]   objectives: {y1: MINIMIZE, y2: MINIMIZE}   constraints:     c1: [GREATER_THAN, 0]     c2: [LESS_THAN, 0.5]   linked_variables: {x9: x1}   constants: {a: dummy_constant}  \"\"\" X = Xopt(YAML) X Out[3]: <pre>\n            Xopt\n________________________________\nVersion: 1.1.2+31.g422c5a9.dirty\nData size: 0\nConfig as YAML:\nxopt: {asynch: true, strict: false, dump_file: null, max_evaluations: 1000}\ngenerator: {name: cnsga, population_size: 64, crossover_probability: 0.9, mutation_probability: 1.0,\n  population_file: null, output_path: temp}\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 1\n  function_kwargs: {sleep: 0, random_sleep: 0.1, raise_probability: 0}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE, y2: MINIMIZE}\n  constants: {a: dummy_constant}\n  linked_variables: {x9: x1}\n</pre> In\u00a0[4]: Copied! <pre>%%timeit\n# Check that the average time is close to random_sleep\nX.evaluator.function({\"x1\": 0.5, \"x2\": 0.5}, random_sleep = .1)\n</pre> %%timeit # Check that the average time is close to random_sleep X.evaluator.function({\"x1\": 0.5, \"x2\": 0.5}, random_sleep = .1) <pre>96.5 ms \u00b1 16.8 ms per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n</pre> In\u00a0[5]: Copied! <pre>%%time\nX.run()\n</pre> %%time X.run() <pre>CPU times: user 6.94 s, sys: 225 ms, total: 7.16 s\nWall time: 1min 50s\n</pre> In\u00a0[6]: Copied! <pre>from concurrent.futures import ProcessPoolExecutor\n</pre> from concurrent.futures import ProcessPoolExecutor In\u00a0[7]: Copied! <pre>%%time\nX = Xopt(YAML)\n\nwith ProcessPoolExecutor() as executor:\n    X.evaluator.executor = executor\n    X.evaluator.max_workers = N_CPUS\n    X.run()\nlen(X.data)\n</pre> %%time X = Xopt(YAML)  with ProcessPoolExecutor() as executor:     X.evaluator.executor = executor     X.evaluator.max_workers = N_CPUS     X.run() len(X.data) <pre>CPU times: user 3.86 s, sys: 294 ms, total: 4.15 s\nWall time: 12.9 s\n</pre> Out[7]: <pre>1000</pre> In\u00a0[8]: Copied! <pre>from concurrent.futures import ThreadPoolExecutor\n</pre> from concurrent.futures import ThreadPoolExecutor In\u00a0[9]: Copied! <pre>%%time\n\nX = Xopt(YAML)\n\nwith ThreadPoolExecutor() as executor:\n    X.evaluator.executor = executor\n    X.evaluator.max_workers = N_CPUS\n    X.run()\nlen(X.data)\n</pre> %%time  X = Xopt(YAML)  with ThreadPoolExecutor() as executor:     X.evaluator.executor = executor     X.evaluator.max_workers = N_CPUS     X.run() len(X.data) <pre>CPU times: user 4.3 s, sys: 192 ms, total: 4.49 s\nWall time: 11.3 s\n</pre> Out[9]: <pre>1000</pre> In\u00a0[10]: Copied! <pre>X = Xopt(YAML)\nX.yaml('test.yaml') # Write this input to file\n!cat test.yaml\n</pre> X = Xopt(YAML) X.yaml('test.yaml') # Write this input to file !cat test.yaml <pre>xopt: {asynch: true, strict: false, dump_file: null, max_evaluations: 1000}\ngenerator: {name: cnsga, population_size: 64, crossover_probability: 0.9, mutation_probability: 1.0,\n  population_file: null, output_path: temp}\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 1\n  function_kwargs: {sleep: 0, random_sleep: 0.1, raise_probability: 0}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE, y2: MINIMIZE}\n  constants: {a: dummy_constant}\n  linked_variables: {x9: x1}\n</pre> In\u00a0[11]: Copied! <pre>%%time\n!mpirun -n {N_CPUS} python -m mpi4py.futures -m xopt.mpi.run -vv --logfile xopt.log test.yaml\n</pre> %%time !mpirun -n {N_CPUS} python -m mpi4py.futures -m xopt.mpi.run -vv --logfile xopt.log test.yaml <pre>Namespace(input_file='test.yaml', logfile='xopt.log', verbose=2)\nParallel execution with 10 workers\nInitializing Xopt object\nInitializing generator cnsga,\nCreated toolbox with 2 variables, 2 constraints, and 2 objectives.\n    Using selection algorithm: nsga2\nInitializing Xopt object\nXopt object initialized\nEnabling async mode\n\n            Xopt\n________________________________\nVersion: 1.1.2+31.g422c5a9.dirty\nData size: 0\nConfig as YAML:\nxopt: {asynch: true, strict: false, dump_file: null, max_evaluations: 1000}\ngenerator: {name: cnsga, population_size: 64, crossover_probability: 0.9, mutation_probability: 1.0,\n  population_file: null, output_path: temp}\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 1\n  function_kwargs: {sleep: 0, random_sleep: 0.1, raise_probability: 0}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE, y2: MINIMIZE}\n  constants: {a: dummy_constant}\n  linked_variables: {x9: x1}\n\n\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nRunning Xopt step\nXopt is done. Max evaluations 1000 reached.\n--------------------------------------------------------------------------\nA system call failed during shared memory initialization that should\nnot have.  It is likely that your MPI job will now either abort or\nexperience performance degradation.\n\n  Local host:  ChristophersMBP\n  System call: unlink(2) /var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T//ompi.ChristophersMBP.501/pid.15991/1/vader_segment.ChristophersMBP.501.89fb0001.4\n  Error:       No such file or directory (errno 2)\n--------------------------------------------------------------------------\nCPU times: user 180 ms, sys: 53.8 ms, total: 233 ms\nWall time: 14.8 s\n</pre> In\u00a0[12]: Copied! <pre>!tail xopt.log\n</pre> !tail xopt.log <pre>2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Running Xopt step\n2022-08-18T11:45:27-0700 - xopt.base - INFO - Xopt is done. Max evaluations 1000 reached.\n</pre> In\u00a0[13]: Copied! <pre>from dask.distributed import Client\nclient = Client()\nexecutor = client.get_executor()\nclient\n</pre> from dask.distributed import Client client = Client() executor = client.get_executor() client <pre>2022-08-18 11:45:28,982 - distributed.diskutils - INFO - Found stale lock file and directory '/var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-o2x19bac', purging\n2022-08-18 11:45:28,982 - distributed.diskutils - INFO - Found stale lock file and directory '/var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-pkfm2l0b', purging\n2022-08-18 11:45:28,982 - distributed.diskutils - INFO - Found stale lock file and directory '/var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-2pe9ydgc', purging\n2022-08-18 11:45:28,982 - distributed.diskutils - INFO - Found stale lock file and directory '/var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-3ol1dgla', purging\n2022-08-18 11:45:28,982 - distributed.diskutils - INFO - Found stale lock file and directory '/var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-37kim0g2', purging\n</pre> Out[13]: Client <p>Client-ee055da8-1f25-11ed-bd56-060412c509ec</p> Connection method: Cluster object Cluster type: distributed.LocalCluster Dashboard:  http://127.0.0.1:8787/status Cluster Info LocalCluster <p>e3a69ad2</p> Dashboard: http://127.0.0.1:8787/status Workers: 5                  Total threads: 10                  Total memory: 64.00 GiB                  Status: running Using processes: True Scheduler Info Scheduler <p>Scheduler-8735408f-e5e0-4929-bc89-e8e4f21e0082</p> Comm: tcp://127.0.0.1:54856                      Workers: 5                      Dashboard: http://127.0.0.1:8787/status Total threads: 10                      Started: Just now                      Total memory: 64.00 GiB                      Workers Worker: 0 Comm:  tcp://127.0.0.1:54896                          Total threads:  2                          Dashboard:  http://127.0.0.1:54897/status Memory:  12.80 GiB                          Nanny:  tcp://127.0.0.1:54861                          Local directory:  /var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-nlturonv                          Worker: 1 Comm:  tcp://127.0.0.1:54899                          Total threads:  2                          Dashboard:  http://127.0.0.1:54900/status Memory:  12.80 GiB                          Nanny:  tcp://127.0.0.1:54863                          Local directory:  /var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-wu2vuab_                          Worker: 2 Comm:  tcp://127.0.0.1:54902                          Total threads:  2                          Dashboard:  http://127.0.0.1:54903/status Memory:  12.80 GiB                          Nanny:  tcp://127.0.0.1:54862                          Local directory:  /var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-c67xq0c9                          Worker: 3 Comm:  tcp://127.0.0.1:54891                          Total threads:  2                          Dashboard:  http://127.0.0.1:54892/status Memory:  12.80 GiB                          Nanny:  tcp://127.0.0.1:54860                          Local directory:  /var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-l9dnpx62                          Worker: 4 Comm:  tcp://127.0.0.1:54890                          Total threads:  2                          Dashboard:  http://127.0.0.1:54893/status Memory:  12.80 GiB                          Nanny:  tcp://127.0.0.1:54859                          Local directory:  /var/folders/2f/l5_mybzs30j4qqvyj98w1_nw0000gn/T/dask-worker-space/worker-eerlov4r                          In\u00a0[14]: Copied! <pre>%%time\nX = Xopt(YAML)\nX.evaluator.executor = executor\nX.evaluator.max_workers = N_CPUS\nX.run()\nlen(X.data)\n</pre> %%time X = Xopt(YAML) X.evaluator.executor = executor X.evaluator.max_workers = N_CPUS X.run() len(X.data) <pre>CPU times: user 4.25 s, sys: 559 ms, total: 4.81 s\nWall time: 12.5 s\n</pre> Out[14]: <pre>1000</pre> In\u00a0[15]: Copied! <pre>import pandas as pd\n</pre> import pandas as pd In\u00a0[16]: Copied! <pre>X.data\n</pre> X.data Out[16]: x1 x2 a x9 y1 y2 c1 c2 some_array xopt_runtime xopt_error 10 2.471422 0.488736 dummy_constant 2.471422 2.471422 0.488736 5.446776 3.886633 [1, 2, 3] 0.011140 False 6 0.976978 2.405552 dummy_constant 0.976978 0.976978 2.405552 5.641776 3.858635 [1, 2, 3] 0.038039 False 7 0.455740 2.939118 dummy_constant 0.455740 0.455740 2.939118 7.923855 5.951254 [1, 2, 3] 0.074599 False 11 0.232046 0.367798 dummy_constant 0.232046 0.232046 0.367798 -0.719546 0.089277 [1, 2, 3] 0.036718 False 8 1.494465 2.718696 dummy_constant 1.494465 1.494465 2.718696 8.643407 5.911574 [1, 2, 3] 0.058163 False ... ... ... ... ... ... ... ... ... ... ... ... 998 0.801200 0.637918 dummy_constant NaN 0.801200 0.637918 0.072322 0.109743 [1, 2, 3] 0.037957 False 1006 0.480176 0.997499 dummy_constant NaN 0.480176 0.997499 0.163026 0.247899 [1, 2, 3] 0.008176 False 989 1.272588 0.147963 dummy_constant NaN 1.272588 0.147963 0.669124 0.720823 [1, 2, 3] 0.191139 False 1002 0.583817 0.787997 dummy_constant NaN 0.583817 0.787997 0.033047 0.089968 [1, 2, 3] 0.071444 False 997 0.875323 0.596263 dummy_constant NaN 0.875323 0.596263 0.220698 0.150134 [1, 2, 3] 0.105140 False <p>1000 rows \u00d7 11 columns</p> In\u00a0[17]: Copied! <pre>df = pd.concat([X.data, X.vocs.feasibility_data(X.data)], axis=1)\ndf[df['feasible']]\n</pre> df = pd.concat([X.data, X.vocs.feasibility_data(X.data)], axis=1) df[df['feasible']] Out[17]: x1 x2 a x9 y1 y2 c1 c2 some_array xopt_runtime xopt_error feasible_c1 feasible_c2 feasible 9 0.547623 1.169586 dummy_constant 0.547623 0.547623 1.169586 0.592854 0.450613 [1, 2, 3] 0.110823 False True True True 26 0.980003 0.426040 dummy_constant 0.980003 0.980003 0.426040 0.045761 0.235873 [1, 2, 3] 0.081441 False True True True 18 0.922711 0.491246 dummy_constant 0.922711 0.922711 0.491246 0.090082 0.178761 [1, 2, 3] 0.171685 False True True True 66 0.432459 1.093330 dummy_constant 0.432459 0.432459 1.093330 0.285668 0.356603 [1, 2, 3] 0.087319 False True True True 72 0.504830 1.092646 dummy_constant 0.504830 0.504830 1.092646 0.368625 0.351253 [1, 2, 3] 0.009447 False True True True ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 1000 1.048656 0.099549 dummy_constant NaN 1.048656 0.099549 0.103946 0.461385 [1, 2, 3] 0.014905 False True True True 998 0.801200 0.637918 dummy_constant NaN 0.801200 0.637918 0.072322 0.109743 [1, 2, 3] 0.037957 False True True True 1006 0.480176 0.997499 dummy_constant NaN 0.480176 0.997499 0.163026 0.247899 [1, 2, 3] 0.008176 False True True True 1002 0.583817 0.787997 dummy_constant NaN 0.583817 0.787997 0.033047 0.089968 [1, 2, 3] 0.071444 False True True True 997 0.875323 0.596263 dummy_constant NaN 0.875323 0.596263 0.220698 0.150134 [1, 2, 3] 0.105140 False True True True <p>439 rows \u00d7 14 columns</p> In\u00a0[18]: Copied! <pre># Plot the feasible ones\nfeasible_df = df[df[\"feasible\"]]\nfeasible_df.plot(\"y1\", \"y2\", kind=\"scatter\").set_aspect(\"equal\")\n</pre> # Plot the feasible ones feasible_df = df[df[\"feasible\"]] feasible_df.plot(\"y1\", \"y2\", kind=\"scatter\").set_aspect(\"equal\") In\u00a0[19]: Copied! <pre># Plot the infeasible ones\ninfeasible_df = df[~df[\"feasible\"]]\ninfeasible_df.plot(\"y1\", \"y2\", kind=\"scatter\").set_aspect(\"equal\")\n</pre> # Plot the infeasible ones infeasible_df = df[~df[\"feasible\"]] infeasible_df.plot(\"y1\", \"y2\", kind=\"scatter\").set_aspect(\"equal\") In\u00a0[20]: Copied! <pre># This is the final population\ndf1 = X.generator.population\ndf1.plot(\"y1\", \"y2\", kind=\"scatter\").set_aspect(\"equal\")\n</pre> # This is the final population df1 = X.generator.population df1.plot(\"y1\", \"y2\", kind=\"scatter\").set_aspect(\"equal\") In\u00a0[21]: Copied! <pre>import matplotlib.pyplot as plt\n\n%matplotlib inline\n</pre> import matplotlib.pyplot as plt  %matplotlib inline In\u00a0[22]: Copied! <pre># Extract objectives from output\nk1, k2 = \"y1\", \"y2\"\n\nfig, ax = plt.subplots(figsize=(6, 6))\n\nax.scatter(\n    infeasible_df[k1],\n    infeasible_df[k2],\n    color=\"blue\",\n    marker=\".\",\n    alpha=0.5,\n    label=\"infeasible\",\n)\nax.scatter(\n    feasible_df[k1], feasible_df[k2], color=\"orange\", marker=\".\", label=\"feasible\"\n)\nax.scatter(df1[k1], df1[k2], color=\"red\", marker=\".\", label=\"final population\")\nax.set_xlabel(k1)\nax.set_ylabel(k2)\nax.set_aspect(\"auto\")\nax.set_title(f\"Xopt's CNSGA algorithm\")\nplt.legend()\n</pre> # Extract objectives from output k1, k2 = \"y1\", \"y2\"  fig, ax = plt.subplots(figsize=(6, 6))  ax.scatter(     infeasible_df[k1],     infeasible_df[k2],     color=\"blue\",     marker=\".\",     alpha=0.5,     label=\"infeasible\", ) ax.scatter(     feasible_df[k1], feasible_df[k2], color=\"orange\", marker=\".\", label=\"feasible\" ) ax.scatter(df1[k1], df1[k2], color=\"red\", marker=\".\", label=\"final population\") ax.set_xlabel(k1) ax.set_ylabel(k2) ax.set_aspect(\"auto\") ax.set_title(f\"Xopt's CNSGA algorithm\") plt.legend() Out[22]: <pre>&lt;matplotlib.legend.Legend at 0x1429c0b80&gt;</pre> In\u00a0[23]: Copied! <pre># Cleanup\n!rm -r dask-worker-space\n!rm -r temp\n!rm xopt.log*\n!rm test.yaml\n</pre> # Cleanup !rm -r dask-worker-space !rm -r temp !rm xopt.log* !rm test.yaml <pre>rm: dask-worker-space: No such file or directory\n</pre>"},{"location":"examples/basic/xopt_parallel/#xopt-parallel-examples","title":"Xopt Parallel Examples\u00b6","text":"<p>Xopt provides methods to parallelize optimizations using Processes, Threads, MPI, and Dask using the <code>concurrent.futures</code> interface as defined in  https://www.python.org/dev/peps/pep-3148/ .</p>"},{"location":"examples/basic/xopt_parallel/#processes","title":"Processes\u00b6","text":""},{"location":"examples/basic/xopt_parallel/#threads","title":"Threads\u00b6","text":"<p>Continue running, this time with threads.</p>"},{"location":"examples/basic/xopt_parallel/#mpi","title":"MPI\u00b6","text":"<p>The <code>test.yaml</code> file completely defines the problem. We will also direct the logging to an <code>xopt.log</code> file. The following invocation recruits 4 MPI workers to solve this problem.</p> <p>We can also continue by calling <code>.save</code> with a JSON filename. This will write all of previous results into the file.</p>"},{"location":"examples/basic/xopt_parallel/#dask","title":"Dask\u00b6","text":""},{"location":"examples/basic/xopt_parallel/#load-output-into-pandas","title":"Load output into Pandas\u00b6","text":"<p>This algorithm writes two types of files: <code>gen_{i}.json</code> with all of the new individuals evaluated in a generation, and <code>pop_{i}.json</code> with the latest best population. Xopt provides some functions to load these easily into a Pandas dataframe for further analysis.</p>"},{"location":"examples/basic/xopt_parallel/#matplotlib-plotting","title":"matplotlib plotting\u00b6","text":"<p>You can always use matplotlib for customizable plotting</p>"},{"location":"examples/basic/xopt_vocs/","title":"VOCS data structure","text":"In\u00a0[1]: Copied! <pre>from xopt.vocs import VOCS\n</pre> from xopt.vocs import VOCS In\u00a0[2]: Copied! <pre>help(VOCS)\n</pre> help(VOCS) <pre>Help on class VOCS in module xopt.vocs:\n\nclass VOCS(xopt.pydantic.XoptBaseModel)\n |  VOCS(*, variables: Dict[str, types.ConstrainedListValue] = {}, constraints: Dict[str, types.ConstrainedListValue] = {}, objectives: Dict[str, xopt.vocs.ObjectiveEnum] = {}, constants: Dict[str, Any] = {}, observables: List[str] = []) -&gt; None\n |  \n |  Variables, Objectives, Constraints, and other Settings (VOCS) data structure\n |  to describe optimization problems.\n |  \n |  Method resolution order:\n |      VOCS\n |      xopt.pydantic.XoptBaseModel\n |      pydantic.main.BaseModel\n |      pydantic.utils.Representation\n |      builtins.object\n |  \n |  Methods defined here:\n |  \n |  as_yaml(self)\n |  \n |  constraint_data(self, data: Union[pandas.core.frame.DataFrame, List[Dict]], prefix: str = 'constraint_') -&gt; pandas.core.frame.DataFrame\n |      Returns a dataframe containing constraint data transformed according to\n |      `vocs.constraints` such that values that satisfy each constraint are negative.\n |      \n |      Args:\n |          data: data to be processed.\n |          prefix: prefix added to column names.\n |      \n |      Returns:\n |          result: processed Dataframe\n |  \n |  convert_dataframe_to_inputs(self, data: pandas.core.frame.DataFrame) -&gt; pandas.core.frame.DataFrame\n |      Extracts only inputs from a dataframe.\n |      This will add constants.\n |  \n |  convert_numpy_to_inputs(self, inputs: numpy.ndarray) -&gt; pandas.core.frame.DataFrame\n |      convert 2D numpy array to list of dicts (inputs) for evaluation\n |      Assumes that the columns of the array match correspond to\n |      `sorted(self.vocs.variables.keys())\n |  \n |  extract_data(self, data: pandas.core.frame.DataFrame, return_raw=False)\n |      split dataframe into seperate dataframes for variables, objectives and\n |      constraints based on vocs - objective data is transformed based on\n |      `vocs.objectives` properties\n |      \n |      Args:\n |          data: dataframe to be split\n |          return_raw: if True, return untransformed objective data\n |      \n |      Returns:\n |          variable_data: dataframe containing variable data\n |          objective_data: dataframe containing objective data\n |          constraint_data: dataframe containing constraint data\n |  \n |  feasibility_data(self, data: Union[pandas.core.frame.DataFrame, List[Dict]], prefix: str = 'feasible_') -&gt; pandas.core.frame.DataFrame\n |      Returns a dataframe containing booleans denoting if a constraint is satisfied or\n |      not. Returned dataframe also contains a column `feasibility` which denotes if\n |      all constraints are satisfied.\n |      \n |      Args:\n |          data: data to be processed.\n |          prefix: prefix added to column names.\n |      \n |      Returns:\n |          result: processed Dataframe\n |  \n |  objective_data(self, data: Union[pandas.core.frame.DataFrame, List[Dict]], prefix: str = 'objective_', return_raw=False) -&gt; pandas.core.frame.DataFrame\n |      Returns a dataframe containing objective data transformed according to\n |      `vocs.objectives` such that we always assume minimization.\n |      \n |      Args:\n |          data: data to be processed.\n |          prefix: prefix added to column names.\n |      \n |      Returns:\n |          result: processed Dataframe\n |  \n |  observable_data(self, data: Union[pandas.core.frame.DataFrame, List[Dict]], prefix: str = 'observable_') -&gt; pandas.core.frame.DataFrame\n |      Returns a dataframe containing observable data\n |      \n |      Args:\n |          data: data to be processed.\n |          prefix: prefix added to column names.\n |      \n |      Returns:\n |          result: processed Dataframe\n |  \n |  random_inputs(self, n: int = None, custom_bounds: dict = None, include_constants: bool = True, seed: int = None)\n |      Uniform sampling of the variables.\n |      \n |      Returns a dict of inputs.\n |      \n |      If include_constants, the vocs.constants are added to the dict.\n |      \n |      Optional:\n |          n (integer) to make arrays of inputs, of size n.\n |          seed (integer) to initialize the random number generator\n |  \n |  validate_input_data(self, input_points: pandas.core.frame.DataFrame) -&gt; None\n |      Validates input data. Raises an error if the input data does not satisfy\n |      requirements given by vocs.\n |      \n |      Args:\n |          input_points: input data to be validated.\n |      \n |      Returns:\n |          None\n |      \n |      Raises:\n |          ValueError: if input data does not satisfy requirements.\n |  \n |  variable_data(self, data: Union[pandas.core.frame.DataFrame, List[Dict]], prefix: str = 'variable_') -&gt; pandas.core.frame.DataFrame\n |      Returns a dataframe containing variables according to `vocs.variables` in sorted\n |      order\n |      \n |      Args:\n |          data: Data to be processed.\n |          prefix: Prefix added to column names.\n |      \n |      Returns:\n |          result: processed Dataframe\n |  \n |  ----------------------------------------------------------------------\n |  Class methods defined here:\n |  \n |  from_yaml(yaml_text) from pydantic.main.ModelMetaclass\n |  \n |  ----------------------------------------------------------------------\n |  Static methods defined here:\n |  \n |  __json_encoder__ = pydantic_encoder(obj: Any) -&gt; Any\n |  \n |  ----------------------------------------------------------------------\n |  Readonly properties defined here:\n |  \n |  all_names\n |      Returns all vocs names (variables, constants, objectives, constraints\n |  \n |  bounds\n |      Returns a bounds array (mins, maxs) of shape (2, n_variables)\n |      Arrays of lower and upper bounds can be extracted by:\n |          mins, maxs = vocs.bounds\n |  \n |  constant_names\n |      Returns a sorted list of constraint names\n |  \n |  constraint_names\n |      Returns a sorted list of constraint names\n |  \n |  n_constants\n |      Returns the number of constants\n |  \n |  n_constraints\n |      Returns the number of constraints\n |  \n |  n_inputs\n |      Returns the number of inputs (variables and constants)\n |  \n |  n_objectives\n |      Returns the number of objectives\n |  \n |  n_observables\n |      Returns the number of constraints\n |  \n |  n_outputs\n |      Returns the number of outputs (objectives and constraints)\n |  \n |  n_variables\n |      Returns the number of variables\n |  \n |  objective_names\n |      Returns a sorted list of objective names\n |  \n |  observable_names\n |  \n |  output_names\n |      Returns a sorted list of objective and constraint names (objectives first\n |      then constraints)\n |  \n |  variable_names\n |      Returns a sorted list of variable names\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  Config = &lt;class 'xopt.vocs.VOCS.Config'&gt;\n |  \n |  __abstractmethods__ = frozenset()\n |  \n |  __annotations__ = {'constants': typing.Dict[str, typing.Any], 'constra...\n |  \n |  __class_vars__ = set()\n |  \n |  __config__ = &lt;class 'xopt.vocs.Config'&gt;\n |  \n |  __custom_root_type__ = False\n |  \n |  __exclude_fields__ = None\n |  \n |  __fields__ = {'constants': ModelField(name='constants', type=Mapping[s...\n |  \n |  __hash__ = None\n |  \n |  __include_fields__ = None\n |  \n |  __post_root_validators__ = []\n |  \n |  __pre_root_validators__ = []\n |  \n |  __private_attributes__ = {}\n |  \n |  __schema_cache__ = {}\n |  \n |  __signature__ = &lt;Signature (*, variables: Dict[str, types.Constr... An...\n |  \n |  __validators__ = {'*': [&lt;pydantic.class_validators.Validator object&gt;]}\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from xopt.pydantic.XoptBaseModel:\n |  \n |  validate_files(value) from pydantic.main.ModelMetaclass\n |      # root validator to process files\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from pydantic.main.BaseModel:\n |  \n |  __eq__(self, other: Any) -&gt; bool\n |  \n |  __getstate__(self) -&gt; 'DictAny'\n |  \n |  __init__(__pydantic_self__, **data: Any) -&gt; None\n |      Create a new model by parsing and validating input data from keyword arguments.\n |      \n |      Raises ValidationError if the input data cannot be parsed to form a valid model.\n |  \n |  __iter__(self) -&gt; 'TupleGenerator'\n |      so `dict(model)` works\n |  \n |  __repr_args__(self) -&gt; 'ReprArgs'\n |  \n |  __setattr__(self, name, value)\n |  \n |  __setstate__(self, state: 'DictAny') -&gt; None\n |  \n |  copy(self: 'Model', *, include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, update: Optional[ForwardRef('DictStrAny')] = None, deep: bool = False) -&gt; 'Model'\n |      Duplicate a model, optionally choose which fields to include, exclude and change.\n |      \n |      :param include: fields to include in new model\n |      :param exclude: fields to exclude from new model, as with values this takes precedence over include\n |      :param update: values to change/add in the new model. Note: the data is not validated before creating\n |          the new model: you should trust this data\n |      :param deep: set to `True` to make a deep copy of the model\n |      :return: new model instance\n |  \n |  dict(self, *, include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, by_alias: bool = False, skip_defaults: Optional[bool] = None, exclude_unset: bool = False, exclude_defaults: bool = False, exclude_none: bool = False) -&gt; 'DictStrAny'\n |      Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n |  \n |  json(self, *, include: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, exclude: Union[ForwardRef('AbstractSetIntStr'), ForwardRef('MappingIntStrAny'), NoneType] = None, by_alias: bool = False, skip_defaults: Optional[bool] = None, exclude_unset: bool = False, exclude_defaults: bool = False, exclude_none: bool = False, encoder: Optional[Callable[[Any], Any]] = None, models_as_dict: bool = True, **dumps_kwargs: Any) -&gt; 'unicode'\n |      Generate a JSON representation of the model, `include` and `exclude` arguments as per `dict()`.\n |      \n |      `encoder` is an optional function to supply as `default` to json.dumps(), other arguments as per `json.dumps()`.\n |  \n |  ----------------------------------------------------------------------\n |  Class methods inherited from pydantic.main.BaseModel:\n |  \n |  __get_validators__() -&gt; 'CallableGenerator' from pydantic.main.ModelMetaclass\n |  \n |  __try_update_forward_refs__(**localns: Any) -&gt; None from pydantic.main.ModelMetaclass\n |      Same as update_forward_refs but will not raise exception\n |      when forward references are not defined.\n |  \n |  construct(_fields_set: Optional[ForwardRef('SetStr')] = None, **values: Any) -&gt; 'Model' from pydantic.main.ModelMetaclass\n |      Creates a new model setting __dict__ and __fields_set__ from trusted or pre-validated data.\n |      Default values are respected, but no other validation is performed.\n |      Behaves as if `Config.extra = 'allow'` was set since it adds all passed values\n |  \n |  from_orm(obj: Any) -&gt; 'Model' from pydantic.main.ModelMetaclass\n |  \n |  parse_file(path: Union[str, pathlib.Path], *, content_type: 'unicode' = None, encoding: 'unicode' = 'utf8', proto: pydantic.parse.Protocol = None, allow_pickle: bool = False) -&gt; 'Model' from pydantic.main.ModelMetaclass\n |  \n |  parse_obj(obj: Any) -&gt; 'Model' from pydantic.main.ModelMetaclass\n |  \n |  parse_raw(b: Union[str, bytes], *, content_type: 'unicode' = None, encoding: 'unicode' = 'utf8', proto: pydantic.parse.Protocol = None, allow_pickle: bool = False) -&gt; 'Model' from pydantic.main.ModelMetaclass\n |  \n |  schema(by_alias: bool = True, ref_template: 'unicode' = '#/definitions/{model}') -&gt; 'DictStrAny' from pydantic.main.ModelMetaclass\n |  \n |  schema_json(*, by_alias: bool = True, ref_template: 'unicode' = '#/definitions/{model}', **dumps_kwargs: Any) -&gt; 'unicode' from pydantic.main.ModelMetaclass\n |  \n |  update_forward_refs(**localns: Any) -&gt; None from pydantic.main.ModelMetaclass\n |      Try to update ForwardRefs on fields based on this Model, globalns and localns.\n |  \n |  validate(value: Any) -&gt; 'Model' from pydantic.main.ModelMetaclass\n |  \n |  ----------------------------------------------------------------------\n |  Data descriptors inherited from pydantic.main.BaseModel:\n |  \n |  __dict__\n |      dictionary for instance variables (if defined)\n |  \n |  __fields_set__\n |  \n |  ----------------------------------------------------------------------\n |  Methods inherited from pydantic.utils.Representation:\n |  \n |  __pretty__(self, fmt: Callable[[Any], Any], **kwargs: Any) -&gt; Generator[Any, NoneType, NoneType]\n |      Used by devtools (https://python-devtools.helpmanual.io/) to provide a human readable representations of objects\n |  \n |  __repr__(self) -&gt; 'unicode'\n |  \n |  __repr_name__(self) -&gt; 'unicode'\n |      Name of the instance's class, used in __repr__.\n |  \n |  __repr_str__(self, join_str: 'unicode') -&gt; 'unicode'\n |  \n |  __rich_repr__(self) -&gt; 'RichReprResult'\n |      Get fields for Rich library\n |  \n |  __str__(self) -&gt; 'unicode'\n\n</pre> In\u00a0[3]: Copied! <pre>Y = \"\"\"\nvariables:\n  a: [0, 1e3] # Note that 1e3 usually parses as a str with YAML. \n  b: [-1, 1]\nobjectives:\n  c: maximize\n  d: minimize \nconstraints:\n  e: ['Less_than', 2]\n  f: ['greater_than', 0]\nconstants:\n  g: 1234\n\n\"\"\"\n\nvocs = VOCS.from_yaml(Y)\nvocs\n</pre> Y = \"\"\" variables:   a: [0, 1e3] # Note that 1e3 usually parses as a str with YAML.    b: [-1, 1] objectives:   c: maximize   d: minimize  constraints:   e: ['Less_than', 2]   f: ['greater_than', 0] constants:   g: 1234  \"\"\"  vocs = VOCS.from_yaml(Y) vocs Out[3]: <pre>VOCS(variables={'a': [0.0, 1000.0], 'b': [-1.0, 1.0]}, constraints={'e': ['LESS_THAN', 2.0], 'f': ['GREATER_THAN', 0.0]}, objectives={'c': 'MAXIMIZE', 'd': 'MINIMIZE'}, constants={'g': 1234}, observables=[])</pre> In\u00a0[4]: Copied! <pre># as dict\nvocs.dict()\n</pre> # as dict vocs.dict() Out[4]: <pre>{'variables': {'a': [0.0, 1000.0], 'b': [-1.0, 1.0]},\n 'constraints': {'e': ['LESS_THAN', 2.0], 'f': ['GREATER_THAN', 0.0]},\n 'objectives': {'c': 'MAXIMIZE', 'd': 'MINIMIZE'},\n 'constants': {'g': 1234},\n 'observables': []}</pre> In\u00a0[5]: Copied! <pre>#  re-parse dict\nvocs2 = VOCS.parse_obj(vocs.dict())\n</pre> #  re-parse dict vocs2 = VOCS.parse_obj(vocs.dict()) In\u00a0[6]: Copied! <pre># Check that these are the same\nvocs2 == vocs\n</pre> # Check that these are the same vocs2 == vocs Out[6]: <pre>True</pre> In\u00a0[7]: Copied! <pre># This replaces the old vocs[\"variables\"]\ngetattr(vocs, \"variables\")\n</pre> # This replaces the old vocs[\"variables\"] getattr(vocs, \"variables\") Out[7]: <pre>{'a': [0.0, 1000.0], 'b': [-1.0, 1.0]}</pre> In\u00a0[8]: Copied! <pre>vocs.objectives[\"c\"] == 'MAXIMIZE'\n</pre> vocs.objectives[\"c\"] == 'MAXIMIZE' Out[8]: <pre>True</pre> In\u00a0[9]: Copied! <pre># json\nvocs.json()\n</pre> # json vocs.json() Out[9]: <pre>'{\"variables\":{\"a\":[0.0,1000.0],\"b\":[-1.0,1.0]},\"constraints\":{\"e\":[\"LESS_THAN\",2.0],\"f\":[\"GREATER_THAN\",0.0]},\"objectives\":{\"c\":\"MAXIMIZE\",\"d\":\"MINIMIZE\"},\"constants\":{\"g\":1234},\"observables\":[]}'</pre> In\u00a0[10]: Copied! <pre>from xopt.vocs import form_objective_data, form_constraint_data, form_feasibility_data\nimport pandas as pd\nimport numpy as np\n\ndata = pd.DataFrame(vocs.random_inputs(10))\n# Add some outputs\ndata[\"c\"] = data[\"a\"] + data[\"b\"]\ndata[\"d\"] = data[\"a\"] - data[\"b\"]\ndata[\"e\"] = data[\"a\"] * 2 + data[\"b\"] * 2\ndata[\"f\"] = data[\"a\"] * 2 - data[\"b\"] * 2\ndata.index = np.arange(len(data)) + 5  # custom index\ndata\n</pre> from xopt.vocs import form_objective_data, form_constraint_data, form_feasibility_data import pandas as pd import numpy as np  data = pd.DataFrame(vocs.random_inputs(10)) # Add some outputs data[\"c\"] = data[\"a\"] + data[\"b\"] data[\"d\"] = data[\"a\"] - data[\"b\"] data[\"e\"] = data[\"a\"] * 2 + data[\"b\"] * 2 data[\"f\"] = data[\"a\"] * 2 - data[\"b\"] * 2 data.index = np.arange(len(data)) + 5  # custom index data Out[10]: a b g c d e f 5 96.987234 -0.965396 1234 96.021839 97.952630 192.043677 195.905260 6 351.425314 -0.158075 1234 351.267239 351.583389 702.534478 703.166778 7 586.456579 0.757985 1234 587.214563 585.698594 1174.429127 1171.397188 8 555.060109 0.032453 1234 555.092563 555.027656 1110.185125 1110.055312 9 885.814954 0.684928 1234 886.499883 885.130026 1772.999766 1770.260052 10 436.631393 0.415573 1234 437.046966 436.215820 874.093932 872.431641 11 594.437721 0.516486 1234 594.954207 593.921235 1189.908414 1187.842471 12 79.539730 0.820537 1234 80.360267 78.719193 160.720534 157.438387 13 624.591227 -0.373867 1234 624.217359 624.965094 1248.434718 1249.930188 14 542.729757 -0.508303 1234 542.221454 543.238059 1084.442908 1086.476119 In\u00a0[11]: Copied! <pre>vocs.objectives\n</pre> vocs.objectives Out[11]: <pre>{'c': 'MAXIMIZE', 'd': 'MINIMIZE'}</pre> In\u00a0[12]: Copied! <pre># These are in standard form for minimization\nform_objective_data(vocs.objectives, data)\n</pre> # These are in standard form for minimization form_objective_data(vocs.objectives, data) Out[12]: objective_c objective_d 5 -96.021839 97.952630 6 -351.267239 351.583389 7 -587.214563 585.698594 8 -555.092563 555.027656 9 -886.499883 885.130026 10 -437.046966 436.215820 11 -594.954207 593.921235 12 -80.360267 78.719193 13 -624.217359 624.965094 14 -542.221454 543.238059 In\u00a0[13]: Copied! <pre># This is also available as a method\nvocs.objective_data(data)\n</pre> # This is also available as a method vocs.objective_data(data) Out[13]: objective_c objective_d 5 -96.021839 97.952630 6 -351.267239 351.583389 7 -587.214563 585.698594 8 -555.092563 555.027656 9 -886.499883 885.130026 10 -437.046966 436.215820 11 -594.954207 593.921235 12 -80.360267 78.719193 13 -624.217359 624.965094 14 -542.221454 543.238059 In\u00a0[14]: Copied! <pre># use the to_numpy() method to convert for low level use.\nvocs.objective_data(data).to_numpy()\n</pre> # use the to_numpy() method to convert for low level use. vocs.objective_data(data).to_numpy() Out[14]: <pre>array([[ -96.0218387 ,   97.9526299 ],\n       [-351.26723903,  351.58338881],\n       [-587.2145633 ,  585.69859425],\n       [-555.09256271,  555.02765625],\n       [-886.49988295,  885.13002605],\n       [-437.04696617,  436.21582035],\n       [-594.95420685,  593.92123535],\n       [ -80.36026708,   78.71919347],\n       [-624.21735923,  624.96509404],\n       [-542.22145375,  543.23805934]])</pre> In\u00a0[15]: Copied! <pre>vocs.constraint_data(data)\n</pre> vocs.constraint_data(data) Out[15]: constraint_e constraint_f 5 190.043677 -195.905260 6 700.534478 -703.166778 7 1172.429127 -1171.397188 8 1108.185125 -1110.055312 9 1770.999766 -1770.260052 10 872.093932 -872.431641 11 1187.908414 -1187.842471 12 158.720534 -157.438387 13 1246.434718 -1249.930188 14 1082.442908 -1086.476119 In\u00a0[16]: Copied! <pre>vocs.feasibility_data(data)\n</pre> vocs.feasibility_data(data) Out[16]: feasible_e feasible_f feasible 5 False True False 6 False True False 7 False True False 8 False True False 9 False True False 10 False True False 11 False True False 12 False True False 13 False True False 14 False True False In\u00a0[17]: Copied! <pre>Y = \"\"\"\nvariables:\n  a: [0, 1e3] # Note that 1e3 usually parses as a str with YAML. \n  b: [-1, 1]\nobjectives:\n  c: maximize\n  d: minimize \nconstraints:\n  e: ['Less_than', 2]\n  f: ['greater_than', 0]\nconstants:\n  g: 1234\n\n\"\"\"\n\nvocs = VOCS.from_yaml(Y)\n</pre> Y = \"\"\" variables:   a: [0, 1e3] # Note that 1e3 usually parses as a str with YAML.    b: [-1, 1] objectives:   c: maximize   d: minimize  constraints:   e: ['Less_than', 2]   f: ['greater_than', 0] constants:   g: 1234  \"\"\"  vocs = VOCS.from_yaml(Y) In\u00a0[18]: Copied! <pre>d = {'a': [1,2,3]}\n\ndf = pd.DataFrame(d)\ndf2 = pd.DataFrame(df).copy()\n\ndf2['b'] = np.nan\ndf2['b'] - 1\n</pre> d = {'a': [1,2,3]}  df = pd.DataFrame(d) df2 = pd.DataFrame(df).copy()  df2['b'] = np.nan df2['b'] - 1 Out[18]: <pre>0   NaN\n1   NaN\n2   NaN\nName: b, dtype: float64</pre> In\u00a0[19]: Copied! <pre>data['a']  = np.nan\n</pre> data['a']  = np.nan In\u00a0[20]: Copied! <pre>a = 2\ndef f(x=a):\n    return x\na=99\nf()\n</pre> a = 2 def f(x=a):     return x a=99 f() Out[20]: <pre>2</pre> In\u00a0[21]: Copied! <pre>pd.DataFrame(6e66, index=[1,2,3], columns=['A'])\n</pre> pd.DataFrame(6e66, index=[1,2,3], columns=['A']) Out[21]: A 1 6.000000e+66 2 6.000000e+66 3 6.000000e+66 In\u00a0[22]: Copied! <pre># These are in standard form for minimization\n\ndata = pd.DataFrame({'c':[1,2,3,4]}, index=[9,3,4,5])\n\nform_objective_data(vocs.objectives, data)\n</pre> # These are in standard form for minimization  data = pd.DataFrame({'c':[1,2,3,4]}, index=[9,3,4,5])  form_objective_data(vocs.objectives, data) Out[22]: objective_c objective_d 9 -1.0 inf 3 -2.0 inf 4 -3.0 inf 5 -4.0 inf"},{"location":"examples/basic/xopt_vocs/#vocs-data-structure","title":"VOCS data structure\u00b6","text":"<p>Variables, Objectives, Constraints, and other Settings (VOCS) helps define our optimization problems.</p>"},{"location":"examples/basic/xopt_vocs/#objective-evaluation","title":"Objective Evaluation\u00b6","text":""},{"location":"examples/basic/xopt_vocs/#error-handling","title":"Error handling\u00b6","text":""},{"location":"examples/bayes_exp/bayesian_exploration/","title":"Bayesian Exploration","text":"In\u00a0[1]: Copied! <pre># set values if testing\nimport os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nNUM_MC_SAMPLES = 1 if SMOKE_TEST else 128\nNUM_RESTARTS = 1 if SMOKE_TEST else 20\n\n# Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport torch\nfrom copy import deepcopy\nfrom xopt import Xopt, Evaluator\nfrom xopt.generators.bayesian import BayesianExplorationGenerator\nfrom xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs\n\nvocs = deepcopy(tnk_vocs)\n\n# can only explore one objective\ndel vocs.objectives[\"y2\"]\n\ngenerator = BayesianExplorationGenerator(vocs=vocs)\ngenerator.max_travel_distances = [0.25, 0.25]\ngenerator.numerical_optimizer.n_restarts = NUM_RESTARTS\ngenerator.n_monte_carlo_samples = NUM_MC_SAMPLES\n\nevaluator = Evaluator(function=evaluate_TNK)\n\nX = Xopt(generator=generator, evaluator=evaluator, vocs=vocs)\nX\n</pre> # set values if testing import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") NUM_MC_SAMPLES = 1 if SMOKE_TEST else 128 NUM_RESTARTS = 1 if SMOKE_TEST else 20  # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import pandas as pd import torch from copy import deepcopy from xopt import Xopt, Evaluator from xopt.generators.bayesian import BayesianExplorationGenerator from xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs  vocs = deepcopy(tnk_vocs)  # can only explore one objective del vocs.objectives[\"y2\"]  generator = BayesianExplorationGenerator(vocs=vocs) generator.max_travel_distances = [0.25, 0.25] generator.numerical_optimizer.n_restarts = NUM_RESTARTS generator.n_monte_carlo_samples = NUM_MC_SAMPLES  evaluator = Evaluator(function=evaluate_TNK)  X = Xopt(generator=generator, evaluator=evaluator, vocs=vocs) X Out[1]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: null}\ngenerator:\n  name: bayesian_exploration\n  model: null\n  turbo_controller: null\n  use_cuda: false\n  model_constructor:\n    name: standard\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n    trainable_mean_keys: []\n  numerical_optimizer: {name: LBFGS, n_raw_samples: 20, n_restarts: 20, max_iter: 2000}\n  max_travel_distances: [0.25, 0.25]\n  n_monte_carlo_samples: 128\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 1\n  function_kwargs: {sleep: 0, random_sleep: 0, raise_probability: 0}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE}\n  constants: {a: dummy_constant}\n  observables: []\n</pre> In\u00a0[2]: Copied! <pre>X.evaluate_data(pd.DataFrame({\"x1\":[1.0, 0.75],\"x2\":[0.7, 0.95]}))\n</pre> X.evaluate_data(pd.DataFrame({\"x1\":[1.0, 0.75],\"x2\":[0.7, 0.95]})) Out[2]: x1 x2 y1 y2 c1 c2 some_array xopt_runtime xopt_error 1 1.00 0.70 1.00 0.70 0.584045 0.290 [1, 2, 3] 0.000054 False 2 0.75 0.95 0.75 0.95 0.494833 0.265 [1, 2, 3] 0.000011 False In\u00a0[3]: Copied! <pre>for i in range(2):\n    print(f\"step {i}\")\n    X.step()\n</pre> for i in range(2):     print(f\"step {i}\")     X.step() <pre>step 0\nstep 1\n</pre> In\u00a0[4]: Copied! <pre># view the data\nX.data\n</pre> # view the data X.data Out[4]: x1 x2 y1 y2 c1 c2 some_array xopt_runtime xopt_error a 1 1.000000 0.700000 1.000000 0.700000 0.584045 0.290000 [1, 2, 3] 0.000054 False NaN 2 0.750000 0.950000 0.750000 0.950000 0.494833 0.265000 [1, 2, 3] 0.000011 False NaN 3 1.535397 1.735397 1.535397 1.735397 4.313110 2.598255 [1, 2, 3] 0.000038 False dummy_constant 4 0.820665 0.950000 0.820665 0.950000 0.536665 0.305326 [1, 2, 3] 0.000041 False dummy_constant In\u00a0[5]: Copied! <pre># plot results\nax = X.data.plot(\"x1\", \"x2\")\nax.set_aspect(\"equal\")\n</pre> # plot results ax = X.data.plot(\"x1\", \"x2\") ax.set_aspect(\"equal\") In\u00a0[6]: Copied! <pre>from matplotlib import pyplot as plt  # plot model predictions\n\ndata = X.data\n\nbounds = generator.vocs.bounds\nmodel = generator.train_model(generator.data)\n\n# create mesh\nn = 100\nx = torch.linspace(*bounds.T[0], n)\ny = torch.linspace(*bounds.T[1], n)\nxx, yy = torch.meshgrid(x, y)\npts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()\n\noutputs = generator.vocs.output_names\nwith torch.no_grad():\n    post = model.posterior(pts)\n\n    for i in range(len(vocs.output_names)):\n        mean = post.mean[...,i]\n        fig, ax = plt.subplots()\n        ax.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C1\")\n\n        if vocs.output_names[i] == \"c2\":\n            c = ax.pcolor(\n                xx, yy, mean.squeeze().reshape(n, n),\n                cmap=\"seismic\",\n                vmin=-10.0 + 0.5,\n                vmax=10.0 + 0.5)\n        else:\n            c = ax.pcolor(\n                xx, yy, mean.squeeze().reshape(n, n),\n                cmap=\"seismic\",\n                vmin=-10.0,\n                vmax=10.0)\n        fig.colorbar(c)\n        ax.set_title(f\"Posterior mean: {outputs[i]}\")\n</pre> from matplotlib import pyplot as plt  # plot model predictions  data = X.data  bounds = generator.vocs.bounds model = generator.train_model(generator.data)  # create mesh n = 100 x = torch.linspace(*bounds.T[0], n) y = torch.linspace(*bounds.T[1], n) xx, yy = torch.meshgrid(x, y) pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()  outputs = generator.vocs.output_names with torch.no_grad():     post = model.posterior(pts)      for i in range(len(vocs.output_names)):         mean = post.mean[...,i]         fig, ax = plt.subplots()         ax.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C1\")          if vocs.output_names[i] == \"c2\":             c = ax.pcolor(                 xx, yy, mean.squeeze().reshape(n, n),                 cmap=\"seismic\",                 vmin=-10.0 + 0.5,                 vmax=10.0 + 0.5)         else:             c = ax.pcolor(                 xx, yy, mean.squeeze().reshape(n, n),                 cmap=\"seismic\",                 vmin=-10.0,                 vmax=10.0)         fig.colorbar(c)         ax.set_title(f\"Posterior mean: {outputs[i]}\") In\u00a0[7]: Copied! <pre>from xopt.generators.bayesian.objectives import feasibility\n\nacq_func = generator.get_acquisition(model)\nwith torch.no_grad():\n    acq_pts = pts.unsqueeze(1)\n    acq = acq_func(acq_pts)\n\n    fig, ax = plt.subplots()\n    c = ax.pcolor(xx, yy, acq.reshape(n, n))\n    ax.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C3\")\n\n    fig.colorbar(c)\n    ax.set_title(\"Acquisition function\")\n\n    feas = feasibility(pts.unsqueeze(1), model, vocs).flatten()\n\n    fig2, ax2 = plt.subplots()\n    c = ax2.pcolor(xx, yy, feas.reshape(n, n))\n    ax2.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C3\")\n\n    fig2.colorbar(c)\n    ax2.set_title(\"Feasible Region\")\n</pre> from xopt.generators.bayesian.objectives import feasibility  acq_func = generator.get_acquisition(model) with torch.no_grad():     acq_pts = pts.unsqueeze(1)     acq = acq_func(acq_pts)      fig, ax = plt.subplots()     c = ax.pcolor(xx, yy, acq.reshape(n, n))     ax.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C3\")      fig.colorbar(c)     ax.set_title(\"Acquisition function\")      feas = feasibility(pts.unsqueeze(1), model, vocs).flatten()      fig2, ax2 = plt.subplots()     c = ax2.pcolor(xx, yy, feas.reshape(n, n))     ax2.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C3\")      fig2.colorbar(c)     ax2.set_title(\"Feasible Region\") In\u00a0[8]: Copied! <pre># print generator model hyperparameters\nfor name, val in X.generator.model.named_parameters():\n    print(f\"{name}:{val}\")\n\nX.generator.model.models[2].covar_module.base_kernel.lengthscale\n</pre> # print generator model hyperparameters for name, val in X.generator.model.named_parameters():     print(f\"{name}:{val}\")  X.generator.model.models[2].covar_module.base_kernel.lengthscale <pre>models.0.likelihood.noise_covar.raw_noise:Parameter containing:\ntensor([-23.5404], dtype=torch.float64, requires_grad=True)\nmodels.0.mean_module.raw_constant:Parameter containing:\ntensor(0.1933, dtype=torch.float64, requires_grad=True)\nmodels.0.covar_module.raw_outputscale:Parameter containing:\ntensor(2.5561, dtype=torch.float64, requires_grad=True)\nmodels.0.covar_module.base_kernel.raw_lengthscale:Parameter containing:\ntensor([[-0.9780, -0.4097]], dtype=torch.float64, requires_grad=True)\nmodels.1.likelihood.noise_covar.raw_noise:Parameter containing:\ntensor([-22.5884], dtype=torch.float64, requires_grad=True)\nmodels.1.mean_module.raw_constant:Parameter containing:\ntensor(0.6844, dtype=torch.float64, requires_grad=True)\nmodels.1.covar_module.raw_outputscale:Parameter containing:\ntensor(1.8354, dtype=torch.float64, requires_grad=True)\nmodels.1.covar_module.base_kernel.raw_lengthscale:Parameter containing:\ntensor([[-0.6228, -0.8884]], dtype=torch.float64, requires_grad=True)\nmodels.2.likelihood.noise_covar.raw_noise:Parameter containing:\ntensor([-22.9631], dtype=torch.float64, requires_grad=True)\nmodels.2.mean_module.raw_constant:Parameter containing:\ntensor(0.6135, dtype=torch.float64, requires_grad=True)\nmodels.2.covar_module.raw_outputscale:Parameter containing:\ntensor(1.8685, dtype=torch.float64, requires_grad=True)\nmodels.2.covar_module.base_kernel.raw_lengthscale:Parameter containing:\ntensor([[-0.6039, -0.8007]], dtype=torch.float64, requires_grad=True)\n</pre> Out[8]: <pre>tensor([[0.4361, 0.3709]], dtype=torch.float64, grad_fn=&lt;SoftplusBackward0&gt;)</pre> In\u00a0[9]: Copied! <pre>X.vocs.feasibility_data(X.data)\n</pre> X.vocs.feasibility_data(X.data) Out[9]: feasible_c1 feasible_c2 feasible 1 True True True 2 True True True 3 True False False 4 True True True In\u00a0[10]: Copied! <pre># generate next point\nX.generator.generate(1)\n</pre> # generate next point X.generator.generate(1) Out[10]: x1 x2 a 0 0.036122 0.960445 dummy_constant In\u00a0[10]: Copied! <pre>\n</pre>"},{"location":"examples/bayes_exp/bayesian_exploration/#bayesian-exploration","title":"Bayesian Exploration\u00b6","text":"<p>Here we demonstrate the use of Bayesian Exploration to characterize an unknown function in the presence of constraints (see here). The function we wish to explore is the first objective of the TNK test problem.</p>"},{"location":"examples/bayes_exp/bayesian_exploration/#specifiying-generator-options","title":"Specifiying generator options\u00b6","text":"<p>We start with the generator defaults and modify as needed for conservative exploration, which should prevent any constraint violations.</p>"},{"location":"examples/bayes_exp/bayesian_exploration/#run-exploration","title":"Run exploration\u00b6","text":"<p>We start with evaluating 2 points that we know satisfy the constraints. We then run 30 exploration steps.</p>"},{"location":"examples/bayes_exp/bayesian_exploration/#introspect-models","title":"Introspect models\u00b6","text":"<p>During exploration we generate Gaussian Process models of each objective and constraint. We demonstrate how they are viewed below.</p>"},{"location":"examples/bayes_exp/bayesian_exploration/#view-acquisition-function-and-feasibility-prediction","title":"View acquisition function and feasibility prediction\u00b6","text":""},{"location":"examples/bayes_exp/bayesian_exploration/#generator-model-hyperparameters","title":"Generator model hyperparameters\u00b6","text":""},{"location":"examples/bayes_exp/bayesian_exploration/#examine-the-number-of-constraint-violations","title":"Examine the number of constraint violations\u00b6","text":"<p>Using the convience function provided by the vocs object we can evaluate which samples violate either or both of our constraints.</p>"},{"location":"examples/bayes_exp/bayesian_exploration_from_yaml/","title":"Bayesian Exploration from yaml","text":"In\u00a0[1]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport torch\nfrom xopt import Xopt\nimport yaml\n\n# set values if testing\nimport os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\n\nYAML = \"\"\"\nxopt:\n    dump_file: dump.yaml\ngenerator:\n    name: bayesian_exploration\n\nevaluator:\n    function: xopt.resources.test_functions.tnk.evaluate_TNK\n\nvocs:\n    variables:\n        x1: [0, 3.14159]\n        x2: [0, 3.14159]\n    objectives: {y1: MINIMIZE}\n    constraints:\n        c1: [GREATER_THAN, 0]\n        c2: [LESS_THAN, 0.5]\n    constants: {a: dummy_constant}\n\n\"\"\"\nyaml_output = yaml.safe_load(YAML)\n</pre> import warnings warnings.filterwarnings(\"ignore\")  import torch from xopt import Xopt import yaml  # set values if testing import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\")  YAML = \"\"\" xopt:     dump_file: dump.yaml generator:     name: bayesian_exploration  evaluator:     function: xopt.resources.test_functions.tnk.evaluate_TNK  vocs:     variables:         x1: [0, 3.14159]         x2: [0, 3.14159]     objectives: {y1: MINIMIZE}     constraints:         c1: [GREATER_THAN, 0]         c2: [LESS_THAN, 0.5]     constants: {a: dummy_constant}  \"\"\" yaml_output = yaml.safe_load(YAML) In\u00a0[2]: Copied! <pre>X = Xopt(config=yaml_output)\n\n# for testing purposes only\nif SMOKE_TEST:\n    X.generator.numerical_optimizer.n_restarts = 1\n    X.generator.n_monte_carlo_samples = 1\n\nX\n</pre> X = Xopt(config=yaml_output)  # for testing purposes only if SMOKE_TEST:     X.generator.numerical_optimizer.n_restarts = 1     X.generator.n_monte_carlo_samples = 1  X Out[2]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: dump.yaml, max_evaluations: null}\ngenerator:\n  name: bayesian_exploration\n  model: null\n  turbo_controller: null\n  use_cuda: false\n  model_constructor:\n    name: standard\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n    trainable_mean_keys: []\n  numerical_optimizer: {name: LBFGS, n_raw_samples: 20, n_restarts: 20, max_iter: 2000}\n  max_travel_distances: null\n  n_monte_carlo_samples: 128\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 1\n  function_kwargs: {sleep: 0, random_sleep: 0, raise_probability: 0}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE}\n  constants: {a: dummy_constant}\n  observables: []\n</pre> In\u00a0[3]: Copied! <pre>X.random_evaluate(5)\n\nfor i in range(5):\n    print(f\"step {i}\")\n    X.step()\n</pre> X.random_evaluate(5)  for i in range(5):     print(f\"step {i}\")     X.step() <pre>step 0\nstep 1\nstep 2\nstep 3\nstep 4\n</pre> In\u00a0[4]: Copied! <pre>print(X.data)\n</pre> print(X.data) <pre>          x1        x2               a        y1        y2        c1  \\\n1   0.835889  2.415599  dummy_constant  0.835889  2.415599  5.475901   \n2   2.971954  0.460204  dummy_constant  2.971954  0.460204  8.121833   \n3   1.660863  2.766979  dummy_constant  1.660863  2.766979  9.486066   \n4   2.423933  0.139949  dummy_constant  2.423933  0.139949  4.834673   \n5   1.718723  1.103559  dummy_constant  1.718723  1.103559  3.267611   \n6   0.163453  0.000000  dummy_constant  0.163453  0.000000 -1.073283   \n7   0.006293  1.416302  dummy_constant  0.006293  1.416302  0.906203   \n8   1.090955  0.965713  dummy_constant  1.090955  0.965713  1.066513   \n9   0.899748  0.856649  dummy_constant  0.899748  0.856649  0.451000   \n10  0.747700  0.893273  dummy_constant  0.747700  0.893273  0.341542   \n\n          c2 some_array  xopt_runtime  xopt_error  \n1   3.782342  [1, 2, 3]      0.000061       False  \n2   6.112140  [1, 2, 3]      0.000012       False  \n3   6.486796  [1, 2, 3]      0.000009       False  \n4   3.831154  [1, 2, 3]      0.000009       False  \n5   1.849568  [1, 2, 3]      0.000011       False  \n6   0.363264  [1, 2, 3]      0.000040       False  \n7   1.083355  [1, 2, 3]      0.000038       False  \n8   0.566116  [1, 2, 3]      0.000040       False  \n9   0.286997  [1, 2, 3]      0.000040       False  \n10  0.216019  [1, 2, 3]      0.000040       False  \n</pre> In\u00a0[5]: Copied! <pre># plot results\nax = X.data.plot(\"x1\", \"x2\")\nax.set_aspect(\"equal\")\n</pre> # plot results ax = X.data.plot(\"x1\", \"x2\") ax.set_aspect(\"equal\") In\u00a0[6]: Copied! <pre>from matplotlib import pyplot as plt  # plot model predictions\n\ndata = X.data\n\nbounds = X.generator.vocs.bounds\nmodel = X.generator.model\n\n# create mesh\nn = 50\nx = torch.linspace(*bounds.T[0], n)\ny = torch.linspace(*bounds.T[1], n)\nxx, yy = torch.meshgrid(x, y)\npts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()\n\noutputs = X.generator.vocs.output_names\nwith torch.no_grad():\n    post = model.posterior(pts)\n\n    for i in range(len(X.vocs.output_names)):\n        mean = post.mean[...,i]\n        fig, ax = plt.subplots()\n        ax.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C1\")\n        c = ax.pcolor(\n            xx, yy, mean.squeeze().reshape(n, n),\n            cmap=\"seismic\",\n            vmin=-10.0,\n            vmax=10.0)\n        fig.colorbar(c)\n        ax.set_title(f\"Posterior mean: {outputs[i]}\")\n</pre> from matplotlib import pyplot as plt  # plot model predictions  data = X.data  bounds = X.generator.vocs.bounds model = X.generator.model  # create mesh n = 50 x = torch.linspace(*bounds.T[0], n) y = torch.linspace(*bounds.T[1], n) xx, yy = torch.meshgrid(x, y) pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()  outputs = X.generator.vocs.output_names with torch.no_grad():     post = model.posterior(pts)      for i in range(len(X.vocs.output_names)):         mean = post.mean[...,i]         fig, ax = plt.subplots()         ax.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C1\")         c = ax.pcolor(             xx, yy, mean.squeeze().reshape(n, n),             cmap=\"seismic\",             vmin=-10.0,             vmax=10.0)         fig.colorbar(c)         ax.set_title(f\"Posterior mean: {outputs[i]}\") In\u00a0[7]: Copied! <pre>from xopt.generators.bayesian.objectives import feasibility\n\nacq_func = X.generator.get_acquisition(model)\nwith torch.no_grad():\n    acq_pts = pts.unsqueeze(1)\n    acq = acq_func(acq_pts)\n\n    fig, ax = plt.subplots()\n    c = ax.pcolor(xx, yy, acq.reshape(n, n))\n    fig.colorbar(c)\n    ax.set_title(\"Acquisition function\")\n\n    feas = feasibility(pts.unsqueeze(1), model, X.vocs).flatten()\n\n    fig2, ax2 = plt.subplots()\n    c = ax2.pcolor(xx, yy, feas.reshape(n, n))\n    fig2.colorbar(c)\n    ax2.set_title(\"Feasible Region\")\n</pre> from xopt.generators.bayesian.objectives import feasibility  acq_func = X.generator.get_acquisition(model) with torch.no_grad():     acq_pts = pts.unsqueeze(1)     acq = acq_func(acq_pts)      fig, ax = plt.subplots()     c = ax.pcolor(xx, yy, acq.reshape(n, n))     fig.colorbar(c)     ax.set_title(\"Acquisition function\")      feas = feasibility(pts.unsqueeze(1), model, X.vocs).flatten()      fig2, ax2 = plt.subplots()     c = ax2.pcolor(xx, yy, feas.reshape(n, n))     fig2.colorbar(c)     ax2.set_title(\"Feasible Region\") In\u00a0[7]: Copied! <pre>\n</pre>"},{"location":"examples/bayes_exp/bayesian_exploration_with_nans/","title":"Bayesian Exploration with NaNs","text":"In\u00a0[1]: Copied! <pre># set values if testing\nimport os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nNUM_MC_SAMPLES = 1 if SMOKE_TEST else 128\nNUM_RESTARTS = 1 if SMOKE_TEST else 20\n\n# Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport torch\nimport yaml\nfrom copy import deepcopy\nfrom xopt import Xopt, Evaluator\nfrom xopt.generators.bayesian import BayesianExplorationGenerator\nfrom xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs\n\nvocs = deepcopy(tnk_vocs)\n\n# can only explore one objective\ndel vocs.objectives[\"y2\"]\n</pre> # set values if testing import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") NUM_MC_SAMPLES = 1 if SMOKE_TEST else 128 NUM_RESTARTS = 1 if SMOKE_TEST else 20  # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import pandas as pd import torch import yaml from copy import deepcopy from xopt import Xopt, Evaluator from xopt.generators.bayesian import BayesianExplorationGenerator from xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs  vocs = deepcopy(tnk_vocs)  # can only explore one objective del vocs.objectives[\"y2\"] In\u00a0[2]: Copied! <pre># modify the evaluate function to return NaNs if constraints are violated\ndef evaluate(input_dict):\n    output_dict = evaluate_TNK(input_dict)\n    del output_dict[\"y2\"]\n    for c in vocs.constraints.keys():\n        if vocs.constraints[c][0].upper() == \"GREATER_THAN\" and output_dict[c] &lt;= vocs.constraints[c][1]:\n            output_dict[\"y1\"] = torch.nan\n        elif vocs.constraints[c][0].upper() == \"LESS_THAN\" and output_dict[c] &gt;= vocs.constraints[c][1]:\n            output_dict[\"y1\"] = torch.nan\n    return output_dict\n</pre> # modify the evaluate function to return NaNs if constraints are violated def evaluate(input_dict):     output_dict = evaluate_TNK(input_dict)     del output_dict[\"y2\"]     for c in vocs.constraints.keys():         if vocs.constraints[c][0].upper() == \"GREATER_THAN\" and output_dict[c] &lt;= vocs.constraints[c][1]:             output_dict[\"y1\"] = torch.nan         elif vocs.constraints[c][0].upper() == \"LESS_THAN\" and output_dict[c] &gt;= vocs.constraints[c][1]:             output_dict[\"y1\"] = torch.nan     return output_dict In\u00a0[3]: Copied! <pre>generator = BayesianExplorationGenerator(vocs=vocs)\ngenerator.max_travel_distances = [0.25, 0.25]\ngenerator.n_monte_carlo_samples = NUM_MC_SAMPLES\ngenerator.numerical_optimizer.n_restarts = NUM_RESTARTS\n\nevaluator = Evaluator(function=evaluate)\nX = Xopt(generator=generator, evaluator=evaluator, vocs=vocs)\nX\n</pre> generator = BayesianExplorationGenerator(vocs=vocs) generator.max_travel_distances = [0.25, 0.25] generator.n_monte_carlo_samples = NUM_MC_SAMPLES generator.numerical_optimizer.n_restarts = NUM_RESTARTS  evaluator = Evaluator(function=evaluate) X = Xopt(generator=generator, evaluator=evaluator, vocs=vocs) X Out[3]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: null}\ngenerator:\n  name: bayesian_exploration\n  model: null\n  turbo_controller: null\n  use_cuda: false\n  model_constructor:\n    name: standard\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n    trainable_mean_keys: []\n  numerical_optimizer: {name: LBFGS, n_raw_samples: 20, n_restarts: 20, max_iter: 2000}\n  max_travel_distances: [0.25, 0.25]\n  n_monte_carlo_samples: 128\nevaluator:\n  function: __main__.evaluate\n  max_workers: 1\n  function_kwargs: {}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE}\n  constants: {a: dummy_constant}\n  observables: []\n</pre> In\u00a0[4]: Copied! <pre>X.evaluate_data(pd.DataFrame({\"x1\": [1.0, 0.75], \"x2\": [0.7, 0.95]}))\n</pre> X.evaluate_data(pd.DataFrame({\"x1\": [1.0, 0.75], \"x2\": [0.7, 0.95]})) Out[4]: x1 x2 y1 c1 c2 some_array xopt_runtime xopt_error 1 1.00 0.70 1.00 0.584045 0.290 [1, 2, 3] 0.000077 False 2 0.75 0.95 0.75 0.494833 0.265 [1, 2, 3] 0.000015 False In\u00a0[5]: Copied! <pre>N_STEPS = 1 if SMOKE_TEST else 30\nfor i in range(N_STEPS):\n    print(f\"step {i}\")\n    X.step()\n</pre> N_STEPS = 1 if SMOKE_TEST else 30 for i in range(N_STEPS):     print(f\"step {i}\")     X.step() <pre>step 0\nstep 1\nstep 2\nstep 3\nstep 4\nstep 5\nstep 6\nstep 7\nstep 8\nstep 9\nstep 10\nstep 11\nstep 12\nstep 13\nstep 14\nstep 15\nstep 16\nstep 17\nstep 18\nstep 19\nstep 20\nstep 21\nstep 22\nstep 23\nstep 24\nstep 25\nstep 26\nstep 27\nstep 28\nstep 29\n</pre> In\u00a0[6]: Copied! <pre># view the data\nX.data\n</pre> # view the data X.data Out[6]: x1 x2 y1 c1 c2 some_array xopt_runtime xopt_error a 1 1.000000 0.700000 1.000000 0.584045 0.290000 [1, 2, 3] 0.000077 False NaN 2 0.750000 0.950000 0.750000 0.494833 0.265000 [1, 2, 3] 0.000015 False NaN 3 1.535397 1.735397 NaN 4.313110 2.598255 [1, 2, 3] 0.000042 False dummy_constant 4 0.750000 1.003064 0.750000 0.634804 0.315573 [1, 2, 3] 0.000048 False dummy_constant 5 0.480496 1.106129 0.480496 0.358118 0.367773 [1, 2, 3] 0.000042 False dummy_constant 6 1.018779 0.543711 1.018779 0.332508 0.271042 [1, 2, 3] 0.000043 False dummy_constant 7 0.360671 1.104127 0.360671 0.315898 0.384382 [1, 2, 3] 0.000043 False dummy_constant 8 1.127213 0.522789 1.127213 0.465227 0.393916 [1, 2, 3] 0.000040 False dummy_constant 9 0.603683 0.940171 0.603683 0.344122 0.204500 [1, 2, 3] 0.000044 False dummy_constant 10 0.208251 1.075602 0.208251 0.299956 0.416435 [1, 2, 3] 0.000043 False dummy_constant 11 0.097544 0.893092 NaN -0.175970 0.316492 [1, 2, 3] 0.000047 False dummy_constant 12 0.098316 1.047250 0.098316 0.099095 0.460833 [1, 2, 3] 0.000044 False dummy_constant 13 0.883714 1.028090 0.883714 0.802244 0.426115 [1, 2, 3] 0.000042 False dummy_constant 14 1.113195 0.766014 1.113195 0.923602 0.446772 [1, 2, 3] 0.000044 False dummy_constant 15 0.370753 0.954290 NaN -0.045666 0.223084 [1, 2, 3] 0.000044 False dummy_constant 16 1.156150 0.410558 1.156150 0.437290 0.438533 [1, 2, 3] 0.000055 False dummy_constant 17 0.617208 1.167526 0.617208 0.736753 0.459329 [1, 2, 3] 0.000063 False dummy_constant 18 0.819289 0.674514 0.819289 0.123709 0.132401 [1, 2, 3] 0.000045 False dummy_constant 19 1.141459 0.299240 1.141459 0.449777 0.451774 [1, 2, 3] 0.000045 False dummy_constant 20 1.035530 0.138443 1.035530 0.144242 0.417516 [1, 2, 3] 0.000046 False dummy_constant 21 0.515945 0.923841 0.515945 0.148783 0.179895 [1, 2, 3] 0.000045 False dummy_constant 22 0.307016 1.007038 0.307016 0.106154 0.294331 [1, 2, 3] 0.000048 False dummy_constant 23 0.280953 1.156409 0.280953 0.494488 0.478854 [1, 2, 3] 0.000040 False dummy_constant 24 1.000949 0.965317 1.000949 0.837909 0.467470 [1, 2, 3] 0.000044 False dummy_constant 25 1.173293 0.642355 1.173293 0.805221 0.473589 [1, 2, 3] 0.000045 False dummy_constant 26 1.055827 0.091983 1.055827 0.105289 0.475422 [1, 2, 3] 0.000045 False dummy_constant 27 1.173184 0.321204 1.173184 0.521814 0.485144 [1, 2, 3] 0.000043 False dummy_constant 28 0.744440 0.731332 NaN -0.009954 0.113266 [1, 2, 3] 0.000044 False dummy_constant 29 0.061256 1.038939 0.061256 0.024352 0.482952 [1, 2, 3] 0.000046 False dummy_constant 30 0.846654 0.592891 0.846654 0.162286 0.128797 [1, 2, 3] 0.000046 False dummy_constant 31 0.984835 0.196316 0.984835 0.108438 0.327289 [1, 2, 3] 0.000046 False dummy_constant 32 0.950572 0.215392 0.950572 0.041138 0.284017 [1, 2, 3] 0.000047 False dummy_constant In\u00a0[7]: Copied! <pre># plot results\nax = X.data.plot(\"x1\", \"x2\")\nax.set_aspect(\"equal\")\n</pre> # plot results ax = X.data.plot(\"x1\", \"x2\") ax.set_aspect(\"equal\") In\u00a0[7]: Copied! <pre>\n</pre>"},{"location":"examples/bayes_exp/bayesian_exploration_with_nans/#bayesian-exploration-with-nans","title":"Bayesian Exploration with NaNs\u00b6","text":"<p>As violations of constraints can lead to invalid values of the objective, the evaluate function may simply return NaNs. We demonstrate below how we can still perform Bayesian Exploration in that case.</p>"},{"location":"examples/bayes_exp/bayesian_exploration_with_nans/#run-exploration","title":"Run exploration\u00b6","text":"<p>We start with evaluating 2 points that we know satisfy the constraints. We then run 30 exploration steps.</p>"},{"location":"examples/bayes_exp/benchmarking/","title":"Normal Model with Standard transforms and no constraints","text":"In\u00a0[1]: Copied! <pre># Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport torch\nfrom copy import deepcopy\nfrom xopt.generators.bayesian import BayesianExplorationGenerator\nfrom xopt.vocs import VOCS\n\nvocs = VOCS(\n    variables = {\"x\":[0,1]},\n    objectives = {\"y\":\"MAXIMIZE\"},\n    constraints = {\"c\": [\"LESS_THAN\", 0]}\n)\n</pre> # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import matplotlib.pyplot as plt import pandas as pd import torch from copy import deepcopy from xopt.generators.bayesian import BayesianExplorationGenerator from xopt.vocs import VOCS  vocs = VOCS(     variables = {\"x\":[0,1]},     objectives = {\"y\":\"MAXIMIZE\"},     constraints = {\"c\": [\"LESS_THAN\", 0]} ) In\u00a0[2]: Copied! <pre># define test functions\ndef y(x):\n    return torch.sin(2*3.14*x)\n\ndef c(x):\n    return torch.cos(2*3.14*x + 0.25)\n\ntest_x = torch.linspace(*torch.tensor(vocs.bounds.flatten()), 100)\n\n# define training data to pass to the generator\ntrain_x = torch.tensor((0.2,0.5, 0.6))\ntrain_y = y(train_x)\ntrain_c = c(train_x)\n\ndata = pd.DataFrame(\n    {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": train_c}\n)\n\ndef plot_ground_truth():\n    fig,ax = plt.subplots()\n    ax.plot(test_x, y(test_x),'--C0')\n    ax.plot(test_x, c(test_x),'--C1')\n    ax.plot(train_x, train_y,'oC0')\n    ax.plot(train_x, train_c,'oC1')\n\n    return ax\nplot_ground_truth()\n</pre> # define test functions def y(x):     return torch.sin(2*3.14*x)  def c(x):     return torch.cos(2*3.14*x + 0.25)  test_x = torch.linspace(*torch.tensor(vocs.bounds.flatten()), 100)  # define training data to pass to the generator train_x = torch.tensor((0.2,0.5, 0.6)) train_y = y(train_x) train_c = c(train_x)  data = pd.DataFrame(     {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": train_c} )  def plot_ground_truth():     fig,ax = plt.subplots()     ax.plot(test_x, y(test_x),'--C0')     ax.plot(test_x, c(test_x),'--C1')     ax.plot(train_x, train_y,'oC0')     ax.plot(train_x, train_c,'oC1')      return ax plot_ground_truth() Out[2]: <pre>&lt;Axes: &gt;</pre> In\u00a0[3]: Copied! <pre># plot the generator model and acquisition function\nfrom xopt.utils import visualize_model\ntest_vocs = deepcopy(vocs)\ntest_vocs.constraints = {}\ngenerator = BayesianExplorationGenerator(vocs=test_vocs)\n\nvisualize_model(generator, data)\n</pre> # plot the generator model and acquisition function from xopt.utils import visualize_model test_vocs = deepcopy(vocs) test_vocs.constraints = {} generator = BayesianExplorationGenerator(vocs=test_vocs)  visualize_model(generator, data)  In\u00a0[4]: Copied! <pre># plot the generator model and acquisition function\ngenerator = BayesianExplorationGenerator(vocs=deepcopy(vocs))\n\nvisualize_model(generator, data)\n</pre> # plot the generator model and acquisition function generator = BayesianExplorationGenerator(vocs=deepcopy(vocs))  visualize_model(generator, data)"},{"location":"examples/bayes_exp/benchmarking/#normal-model-with-standard-transforms-and-no-constraints","title":"Normal Model with Standard transforms and no constraints\u00b6","text":"<ul> <li>acquisition function is UCB with beta = 2</li> </ul>"},{"location":"examples/bayes_exp/benchmarking/#normal-model-with-standard-transforms-and-constraints","title":"Normal Model with Standard transforms and constraints\u00b6","text":""},{"location":"examples/cnsga/cnsga_tnk/","title":"Xopt CNSGA algorithm","text":"In\u00a0[1]: Copied! <pre>from xopt.generators.ga.cnsga import CNSGAGenerator\n\nfrom xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs\n\nfrom xopt import Xopt, Evaluator\n\nimport pandas as pd\n</pre> from xopt.generators.ga.cnsga import CNSGAGenerator  from xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs  from xopt import Xopt, Evaluator  import pandas as pd In\u00a0[2]: Copied! <pre># Useful for debugging\n#%load_ext autoreload\n#%autoreload 2\n</pre> # Useful for debugging #%load_ext autoreload #%autoreload 2 In\u00a0[3]: Copied! <pre>ev = Evaluator(function=evaluate_TNK)\nev.function_kwargs = {'raise_probability':0.1} # optional random crashing, to mimic real-world use.\n</pre> ev = Evaluator(function=evaluate_TNK) ev.function_kwargs = {'raise_probability':0.1} # optional random crashing, to mimic real-world use.  In\u00a0[4]: Copied! <pre>X = Xopt(\n    generator=CNSGAGenerator(vocs=tnk_vocs),\n    evaluator=ev,\n    vocs=tnk_vocs,\n)\n</pre> X = Xopt(     generator=CNSGAGenerator(vocs=tnk_vocs),     evaluator=ev,     vocs=tnk_vocs, ) <p>Run 100 generations</p> In\u00a0[5]: Copied! <pre>%%time\nfor _ in range(64 * 20):\n    X.step()\n</pre> %%time for _ in range(64 * 20):     X.step() <pre>CPU times: user 4.87 s, sys: 11.6 ms, total: 4.88 s\nWall time: 4.88 s\n</pre> In\u00a0[6]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[7]: Copied! <pre>def plot_population(X):\n    fig, ax = plt.subplots(figsize=(8, 8))\n    \n    fdata = tnk_vocs.feasibility_data(X.data)\n    \n    k1 = \"x1\"\n    k2 = \"x2\"\n    \n    X.data.plot.scatter(k1, k2, marker=\".\", alpha=0.1, color=\"black\", ax=ax)\n    X.data[fdata[\"feasible\"]].plot.scatter(\n        k1, k2, marker=\"x\", alpha=0.3, color=\"orange\", ax=ax\n    )\n    X.generator.population.plot.scatter(k1, k2, marker=\"o\", color=\"red\", alpha=1, ax=ax)\n    ax.set_xlabel(k1)\n    ax.set_ylabel(k2)\n    ax.set_xlim(0, 1.5)\n    ax.set_ylim(0, 1.5)\n    ax.set_title(\"TNK with Xopt's CNSGA\")\n</pre> def plot_population(X):     fig, ax = plt.subplots(figsize=(8, 8))          fdata = tnk_vocs.feasibility_data(X.data)          k1 = \"x1\"     k2 = \"x2\"          X.data.plot.scatter(k1, k2, marker=\".\", alpha=0.1, color=\"black\", ax=ax)     X.data[fdata[\"feasible\"]].plot.scatter(         k1, k2, marker=\"x\", alpha=0.3, color=\"orange\", ax=ax     )     X.generator.population.plot.scatter(k1, k2, marker=\"o\", color=\"red\", alpha=1, ax=ax)     ax.set_xlabel(k1)     ax.set_ylabel(k2)     ax.set_xlim(0, 1.5)     ax.set_ylim(0, 1.5)     ax.set_title(\"TNK with Xopt's CNSGA\") In\u00a0[8]: Copied! <pre>plot_population(X)\n</pre> plot_population(X) <p>Write the current population</p> In\u00a0[9]: Copied! <pre>X.generator.write_population('test.csv')\n</pre> X.generator.write_population('test.csv') In\u00a0[10]: Copied! <pre>from xopt import Xopt\n</pre> from xopt import Xopt In\u00a0[11]: Copied! <pre>YAML = \"\"\"\nxopt:\n    max_evaluations: 6400\ngenerator:\n    name: cnsga\n    population_size: 64\n    population_file: test.csv\n    output_path: .\n\nevaluator:\n    function: xopt.resources.test_functions.tnk.evaluate_TNK\n    function_kwargs:\n      raise_probability: 0.1\n\nvocs:\n    variables:\n        x1: [0, 3.14159]\n        x2: [0, 3.14159]\n    objectives: {y1: MINIMIZE, y2: MINIMIZE}\n    constraints:\n        c1: [GREATER_THAN, 0]\n        c2: [LESS_THAN, 0.5]\n    constants: {a: dummy_constant}\n\n\"\"\"\n\nX = Xopt(YAML)\nX\n</pre> YAML = \"\"\" xopt:     max_evaluations: 6400 generator:     name: cnsga     population_size: 64     population_file: test.csv     output_path: .  evaluator:     function: xopt.resources.test_functions.tnk.evaluate_TNK     function_kwargs:       raise_probability: 0.1  vocs:     variables:         x1: [0, 3.14159]         x2: [0, 3.14159]     objectives: {y1: MINIMIZE, y2: MINIMIZE}     constraints:         c1: [GREATER_THAN, 0]         c2: [LESS_THAN, 0.5]     constants: {a: dummy_constant}  \"\"\"  X = Xopt(YAML) X Out[11]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: 6400}\ngenerator:\n  name: cnsga\n  population_size: 64\n  crossover_probability: 0.9\n  mutation_probability: 1.0\n  population_file: test.csv\n  output_path: .\n  children:\n  - {x1: 0.8939194875424238, x2: 0.4792868535653334, a: dummy_constant}\n  - {x1: 0.8985223931961488, x2: 0.4702703421138788, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4771935504844548, x2: 0.8771307209982294, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.4867345346124652, x2: 0.8466421307746028, a: dummy_constant}\n  - {x1: 0.7410728511793707, x2: 0.7460986915929708, a: dummy_constant}\n  - {x1: 0.7410728511793707, x2: 0.7460986915929708, a: dummy_constant}\n  - {x1: 0.7647385740679749, x2: 0.7117788865374705, a: dummy_constant}\n  - {x1: 0.5693355061201854, x2: 0.7998984656337043, a: dummy_constant}\n  - {x1: 0.7452678959742424, x2: 0.7455866790377891, a: dummy_constant}\n  - {x1: 0.5580388776883718, x2: 0.8012767247317069, a: dummy_constant}\n  - {x1: 0.6679188468363169, x2: 0.7901099884478978, a: dummy_constant}\n  - {x1: 0.4963383664152265, x2: 0.8373273753291599, a: dummy_constant}\n  - {x1: 0.4657378910177283, x2: 0.9343799765622054, a: dummy_constant}\n  - {x1: 0.9709173925063016, x2: 0.1461407826011306, a: dummy_constant}\n  - {x1: 0.4394217275594237, x2: 0.9418501631280916, a: dummy_constant}\n  - {x1: 0.9634696664067482, x2: 0.2084179841584832, a: dummy_constant}\n  - {x1: 0.9716967749188092, x2: 0.134353541018763, a: dummy_constant}\n  - {x1: 0.9716967749188092, x2: 0.134353541018763, a: dummy_constant}\n  - {x1: 1.012366988629101, x2: 0.1341830690343688, a: dummy_constant}\n  - {x1: 0.8071366935846657, x2: 0.5232023248794024, a: dummy_constant}\n  - {x1: 0.8071366935846657, x2: 0.5232023248794024, a: dummy_constant}\n  - {x1: 0.8071366935846657, x2: 0.5232023248794024, a: dummy_constant}\n  - {x1: 0.1279322741678964, x2: 1.0300411336565052, a: dummy_constant}\n  - {x1: 0.1780845149191837, x2: 0.9522169491905004, a: dummy_constant}\n  - {x1: 0.1780845149191837, x2: 0.9522169491905004, a: dummy_constant}\n  - {x1: 0.955005768752322, x2: 0.2153029464501384, a: dummy_constant}\n  - {x1: 0.955005768752322, x2: 0.2153029464501384, a: dummy_constant}\n  - {x1: 0.7762793108938663, x2: 0.6622925904749237, a: dummy_constant}\n  - {x1: 0.7762793108938663, x2: 0.6622925904749237, a: dummy_constant}\n  - {x1: 0.9639594156907718, x2: 0.1642061537262709, a: dummy_constant}\n  - {x1: 0.1048763677799509, x2: 1.0795952983064208, a: dummy_constant}\n  - {x1: 0.7369670811612068, x2: 0.7712833557331048, a: dummy_constant}\n  - {x1: 0.7784322779210887, x2: 0.5651649273914874, a: dummy_constant}\n  - {x1: 0.8940866007195318, x2: 0.4792490190342865, a: dummy_constant}\n  - {x1: 0.9797644297594232, x2: 0.134353541018763, a: dummy_constant}\n  - {x1: 0.1048763677799509, x2: 1.085133420309822, a: dummy_constant}\n  - {x1: 0.8947223957357724, x2: 0.4846286110070316, a: dummy_constant}\n  - {x1: 0.459446163935489, x2: 0.9418501631280916, a: dummy_constant}\n  - {x1: 0.9558086769456708, x2: 0.2206447038820128, a: dummy_constant}\n  - {x1: 0.1990316898770078, x2: 0.9522169491905004, a: dummy_constant}\n  - {x1: 0.7647385740679749, x2: 0.7162546460398801, a: dummy_constant}\n  - {x1: 0.7784322779210887, x2: 0.5766599413823106, a: dummy_constant}\n  - {x1: 0.8071366935846657, x2: 0.5363963671828885, a: dummy_constant}\n  - {x1: 0.5692185430518948, x2: 0.8176355514928687, a: dummy_constant}\n  - {x1: 0.1485289923879184, x2: 1.0341527940967985, a: dummy_constant}\n  - {x1: 0.7452678959742424, x2: 0.7712833557331048, a: dummy_constant}\n  - {x1: 0.6679188468363169, x2: 0.7998984656337043, a: dummy_constant}\n  population: null\n  offspring: null\n  _loaded_population: pandas.core.frame.DataFrame\n  toolbox: deap.base.Toolbox\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 1\n  function_kwargs: {sleep: 0, random_sleep: 0, raise_probability: 0.1}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE, y2: MINIMIZE}\n  constants: {a: dummy_constant}\n  observables: []\n</pre> <p>This will have loaded children from the population file. These will need to be re-evaluated.</p> In\u00a0[12]: Copied! <pre>len(X.generator.children)\n</pre> len(X.generator.children) Out[12]: <pre>64</pre> In\u00a0[13]: Copied! <pre>%%time\nX.run()\n</pre> %%time X.run() <pre>CPU times: user 25.4 s, sys: 60 ms, total: 25.5 s\nWall time: 25.5 s\n</pre> In\u00a0[14]: Copied! <pre>plot_population(X)\n</pre> plot_population(X) In\u00a0[15]: Copied! <pre>len(X.data)\n</pre> len(X.data) Out[15]: <pre>6400</pre> <p>Setting <code>output_path</code> will write .csv files for each population, as well as the offspring considered in each generation</p> In\u00a0[16]: Copied! <pre>from glob import glob\npop_files = sorted(glob(\"cnsga_population*\"))\npop_files[:10]\n</pre> from glob import glob pop_files = sorted(glob(\"cnsga_population*\")) pop_files[:10] Out[16]: <pre>['cnsga_population_2023-06-30T02:21:13.582292+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:13.824579+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:14.068335+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:14.309719+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:14.551229+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:14.793366+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:15.038705+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:15.283373+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:15.526687+00:00.csv',\n 'cnsga_population_2023-06-30T02:21:15.773406+00:00.csv']</pre> In\u00a0[17]: Copied! <pre>offspring_files = sorted(glob(\"cnsga_offspring*\"))\noffspring_files[0:10]\n</pre> offspring_files = sorted(glob(\"cnsga_offspring*\")) offspring_files[0:10] Out[17]: <pre>['cnsga_offspring_2023-06-30T02:21:13.578462+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:13.821308+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:14.064788+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:14.306371+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:14.547846+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:14.789939+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:15.035413+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:15.279988+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:15.523418+00:00.csv',\n 'cnsga_offspring_2023-06-30T02:21:15.770065+00:00.csv']</pre> In\u00a0[18]: Copied! <pre>from xopt.utils import read_xopt_csv\npop_df = read_xopt_csv(pop_files[-1])\npop_df.plot.scatter(\"x1\", \"x2\", marker=\"o\", color=\"red\", alpha=1)\n</pre> from xopt.utils import read_xopt_csv pop_df = read_xopt_csv(pop_files[-1]) pop_df.plot.scatter(\"x1\", \"x2\", marker=\"o\", color=\"red\", alpha=1) Out[18]: <pre>&lt;Axes: xlabel='x1', ylabel='x2'&gt;</pre> <p>Similarly, offsrping files can be loaded. This will load the last few:</p> In\u00a0[19]: Copied! <pre>offspring_df = read_xopt_csv(*offspring_files[-10:])\noffspring_df.plot.scatter(\"x1\", \"x2\", marker=\".\", color=\"black\", alpha=.1)\n</pre> offspring_df = read_xopt_csv(*offspring_files[-10:]) offspring_df.plot.scatter(\"x1\", \"x2\", marker=\".\", color=\"black\", alpha=.1) Out[19]: <pre>&lt;Axes: xlabel='x1', ylabel='x2'&gt;</pre> <p>Occationally there are duplicates in offspring</p> In\u00a0[20]: Copied! <pre>all_offspring = read_xopt_csv(*offspring_files) \nlen(all_offspring), len(all_offspring.drop_duplicates())\n</pre> all_offspring = read_xopt_csv(*offspring_files)  len(all_offspring), len(all_offspring.drop_duplicates()) Out[20]: <pre>(6400, 6327)</pre> In\u00a0[21]: Copied! <pre># Cleanup\n!rm cnsga_population*\n!rm cnsga_offspring*\n!rm test.csv\n</pre> # Cleanup !rm cnsga_population* !rm cnsga_offspring* !rm test.csv In\u00a0[22]: Copied! <pre>df = pd.DataFrame(X.generator.generate(1000))\n\nfig, ax = plt.subplots()\ndf.plot.scatter(\"x1\", \"x2\", marker=\".\", color=\"green\", alpha=0.5, ax=ax, label='candidates')\npop_df.plot.scatter(\"x1\", \"x2\", marker=\"o\", color=\"red\", alpha=1, ax=ax, label='population')\nplt.legend()\n</pre> df = pd.DataFrame(X.generator.generate(1000))  fig, ax = plt.subplots() df.plot.scatter(\"x1\", \"x2\", marker=\".\", color=\"green\", alpha=0.5, ax=ax, label='candidates') pop_df.plot.scatter(\"x1\", \"x2\", marker=\"o\", color=\"red\", alpha=1, ax=ax, label='population') plt.legend() Out[22]: <pre>&lt;matplotlib.legend.Legend at 0x7f6328713d90&gt;</pre> In\u00a0[23]: Copied! <pre># Notice that this returns `some_array`\nevaluate_TNK({'x1':1, 'x2':1})\n</pre> # Notice that this returns `some_array` evaluate_TNK({'x1':1, 'x2':1}) Out[23]: <pre>{'y1': 1, 'y2': 1, 'c1': 0.9, 'c2': 0.5, 'some_array': array([1, 2, 3])}</pre> In\u00a0[24]: Copied! <pre># Here we make a version that does not have this\ndef evaluate_TNK2(*args, **kwargs):\n    outputs = evaluate_TNK(*args, **kwargs)\n    outputs.pop('some_array')\n    return outputs\n</pre> # Here we make a version that does not have this def evaluate_TNK2(*args, **kwargs):     outputs = evaluate_TNK(*args, **kwargs)     outputs.pop('some_array')     return outputs In\u00a0[25]: Copied! <pre>from xopt import Xopt\n\nYAML = \"\"\"\nxopt:\n    max_evaluations: 6400\ngenerator:\n    name: cnsga\n    population_size: 64\n\nevaluator:\n    function: __main__.evaluate_TNK2\n    function_kwargs:\n      raise_probability: 0.1\n    vectorized: True\n    max_workers: 100 \n\nvocs:\n    variables:\n        x1: [0, 3.14159]\n        x2: [0, 3.14159]\n    objectives: {y1: MINIMIZE, y2: MINIMIZE}\n    constraints:\n        c1: [GREATER_THAN, 0]\n        c2: [LESS_THAN, 0.5]\n    constants: {a: dummy_constant}\n\n\"\"\"\n\n\nX2 = Xopt(YAML)\nX2.evaluator.function = evaluate_TNK2\n\nX2.run()\n\nlen(X2.data)\n</pre> from xopt import Xopt  YAML = \"\"\" xopt:     max_evaluations: 6400 generator:     name: cnsga     population_size: 64  evaluator:     function: __main__.evaluate_TNK2     function_kwargs:       raise_probability: 0.1     vectorized: True     max_workers: 100   vocs:     variables:         x1: [0, 3.14159]         x2: [0, 3.14159]     objectives: {y1: MINIMIZE, y2: MINIMIZE}     constraints:         c1: [GREATER_THAN, 0]         c2: [LESS_THAN, 0.5]     constants: {a: dummy_constant}  \"\"\"   X2 = Xopt(YAML) X2.evaluator.function = evaluate_TNK2  X2.run()  len(X2.data) Out[25]: <pre>6400</pre> In\u00a0[26]: Copied! <pre>plot_population(X)\n</pre> plot_population(X) In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/cnsga/cnsga_tnk/#xopt-cnsga-algorithm","title":"Xopt CNSGA algorithm\u00b6","text":""},{"location":"examples/cnsga/cnsga_tnk/#plot","title":"Plot\u00b6","text":""},{"location":"examples/cnsga/cnsga_tnk/#yaml-method","title":"YAML method\u00b6","text":""},{"location":"examples/cnsga/cnsga_tnk/#examine-generator","title":"Examine generator\u00b6","text":""},{"location":"examples/cnsga/cnsga_tnk/#vectorized-evaluation","title":"Vectorized evaluation\u00b6","text":"<p>Some functions also allow vectorized inputs. This can often be very fast.</p> <p>However, vectorized evaluation has some restrictions. For example, the output dict cannot append additional arrays with odd lengths.</p>"},{"location":"examples/developer/algorithm_to_generator/","title":"Convering an algorithm to a generator","text":"In\u00a0[1]: Copied! <pre>def f(x):\n    print(f'evaluate f({x})')\n    return 2*x\n</pre> def f(x):     print(f'evaluate f({x})')     return 2*x In\u00a0[2]: Copied! <pre>def algorithm(func):\n    \n    x = 0\n    y = func(x)\n    \n    i = 0\n    while i &lt; 5:\n        i += 1\n        \n        x += i\n        y = func(x)\n        print(x, y)\n\nalgorithm(f)\n</pre> def algorithm(func):          x = 0     y = func(x)          i = 0     while i &lt; 5:         i += 1                  x += i         y = func(x)         print(x, y)  algorithm(f)         <pre>evaluate f(0)\nevaluate f(1)\n1 2\nevaluate f(3)\n3 6\nevaluate f(6)\n6 12\nevaluate f(10)\n10 20\nevaluate f(15)\n15 30\n</pre> In\u00a0[3]: Copied! <pre>def algorithm2(func):\n    x = 0\n    yield x\n    y = func(x)\n    \n    i = 0\n    while i &lt; 5:\n        i += 1\n        \n        x += i\n        yield x\n        y = func(x)\n        print(x, y)\n</pre> def algorithm2(func):     x = 0     yield x     y = func(x)          i = 0     while i &lt; 5:         i += 1                  x += i         yield x         y = func(x)         print(x, y)   In\u00a0[4]: Copied! <pre>class Generator:\n    def __init__(self):\n        self.alg = algorithm2(lambda x: self.data[x]) \n        self.data = {}\n        \n    def generate(self):\n        x =  next(self.alg)    \n        while x in self.data:\n            x = next(self.alg)    \n        return x\n    \n    def add_data(self, x, y):\n        self.data[x] = y\n</pre> class Generator:     def __init__(self):         self.alg = algorithm2(lambda x: self.data[x])          self.data = {}              def generate(self):         x =  next(self.alg)             while x in self.data:             x = next(self.alg)             return x          def add_data(self, x, y):         self.data[x] = y In\u00a0[5]: Copied! <pre>G = Generator()\n\nfor step in range(10):\n    print(f'--- step {step +1} ---')\n    try:\n        x = G.generate()\n        y = f(x) # actual call to f\n        G.add_data(x, y)\n    except StopIteration:\n        G.alg.close() # Clean up\n        break\n</pre> G = Generator()  for step in range(10):     print(f'--- step {step +1} ---')     try:         x = G.generate()         y = f(x) # actual call to f         G.add_data(x, y)     except StopIteration:         G.alg.close() # Clean up         break      <pre>--- step 1 ---\nevaluate f(0)\n--- step 2 ---\nevaluate f(1)\n--- step 3 ---\n1 2\nevaluate f(3)\n--- step 4 ---\n3 6\nevaluate f(6)\n--- step 5 ---\n6 12\nevaluate f(10)\n--- step 6 ---\n10 20\nevaluate f(15)\n--- step 7 ---\n15 30\n</pre>"},{"location":"examples/developer/algorithm_to_generator/#convering-an-algorithm-to-a-generator","title":"Convering an algorithm to a generator\u00b6","text":""},{"location":"examples/developer/algorithm_to_generator/#some-test-function","title":"Some test function\u00b6","text":""},{"location":"examples/developer/algorithm_to_generator/#algorithm-functional-form","title":"algorithm functional form\u00b6","text":""},{"location":"examples/developer/algorithm_to_generator/#generator-version","title":"Generator version\u00b6","text":"<p>This is a copy-paste of <code>algorithm</code>, but with <code>yield x</code> inserted before every call to <code>func(x)</code>.</p> <p>This allows for stepping through the algorithm, controlling the function evaluations separately.</p> <p>TODO: stopping criteria</p>"},{"location":"examples/developer/evaluator_devel/","title":"JSON encoding and decoding callable functions","text":"In\u00a0[1]: Copied! <pre>from pydantic import BaseModel, BaseSettings, root_validator, validator\n\nclass Config(BaseSettings):\n    option1: str\n    option2: int\n\n\nclass Evaluator(BaseModel):\n\n    config: Config\n\n    @root_validator(pre=True)\n    def validate_config(cls, values):\n\n        # check if config is instance of Config\n        if values.get(\"config\"):\n            return values\n\n        else: \n            return {\"config\": Config(**values)}\n</pre> from pydantic import BaseModel, BaseSettings, root_validator, validator  class Config(BaseSettings):     option1: str     option2: int   class Evaluator(BaseModel):      config: Config      @root_validator(pre=True)     def validate_config(cls, values):          # check if config is instance of Config         if values.get(\"config\"):             return values          else:              return {\"config\": Config(**values)}        In\u00a0[2]: Copied! <pre>evaluator = Evaluator(option1=\"hi\", option2=3)\nevaluator\n</pre> evaluator = Evaluator(option1=\"hi\", option2=3) evaluator Out[2]: <pre>Evaluator(config=Config(option1='hi', option2=3))</pre> In\u00a0[3]: Copied! <pre>config = Config(option1=\"hi\", option2=3)\nconfig\n</pre> config = Config(option1=\"hi\", option2=3) config Out[3]: <pre>Config(option1='hi', option2=3)</pre> In\u00a0[4]: Copied! <pre>evaluator_from_config = Evaluator(config=config)\nevaluator_from_config\n</pre> evaluator_from_config = Evaluator(config=config) evaluator_from_config Out[4]: <pre>Evaluator(config=Config(option1='hi', option2=3))</pre> In\u00a0[5]: Copied! <pre>import json\nfrom typing import Callable\nfrom types import FunctionType, MethodType\n\nfrom pydantic import Extra\n\nfrom xopt.utils import get_function\n</pre> import json from typing import Callable from types import FunctionType, MethodType  from pydantic import Extra  from xopt.utils import get_function  In\u00a0[6]: Copied! <pre>JSON_ENCODERS = {\n    FunctionType: lambda x: f\"{x.__module__}.{x.__qualname__}\",\n    Callable: lambda x: f\"{x.__module__}.{type(x).__qualname__}\",\n}\n\nfrom typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Tuple\nObjType = TypeVar(\"ObjType\")\nJSON_ENCODERS = {\n    # function/method type distinguished for class members and not recognized as callables\n    FunctionType: lambda x: f\"{x.__module__}.{x.__qualname__}\",\n    MethodType: lambda x: f\"{x.__module__}.{x.__qualname__}\",\n    Callable: lambda x: f\"{x.__module__}.{type(x).__qualname__}\",\n    type: lambda x: f\"{x.__module__}.{x.__name__}\",\n    # for encoding instances of the ObjType}\n    ObjType: lambda x: f\"{x.__module__}.{x.__class__.__qualname__}\",\n}\n</pre> JSON_ENCODERS = {     FunctionType: lambda x: f\"{x.__module__}.{x.__qualname__}\",     Callable: lambda x: f\"{x.__module__}.{type(x).__qualname__}\", }  from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Tuple ObjType = TypeVar(\"ObjType\") JSON_ENCODERS = {     # function/method type distinguished for class members and not recognized as callables     FunctionType: lambda x: f\"{x.__module__}.{x.__qualname__}\",     MethodType: lambda x: f\"{x.__module__}.{x.__qualname__}\",     Callable: lambda x: f\"{x.__module__}.{type(x).__qualname__}\",     type: lambda x: f\"{x.__module__}.{x.__name__}\",     # for encoding instances of the ObjType}     ObjType: lambda x: f\"{x.__module__}.{x.__class__.__qualname__}\", }  In\u00a0[7]: Copied! <pre>class CallableModel(BaseModel):\n    callable: Callable\n\n    class Config:\n        arbitrary_types_allowed = True\n        json_encoders = JSON_ENCODERS\n        extra = 'forbid'\n\n    @root_validator(pre=True)\n    def validate_all(cls, values):\n\n        callable = values.pop(\"callable\")\n        if not isinstance(\n            callable,\n            (\n                str,\n                Callable,\n            ),\n        ):\n            raise ValueError(\n                \"Callable must be object or a string. Provided %s\", type(callable)\n            )\n\n        values[\"callable\"] = get_function(callable)\n\n\n\n        return values\n</pre>  class CallableModel(BaseModel):     callable: Callable      class Config:         arbitrary_types_allowed = True         json_encoders = JSON_ENCODERS         extra = 'forbid'      @root_validator(pre=True)     def validate_all(cls, values):          callable = values.pop(\"callable\")         if not isinstance(             callable,             (                 str,                 Callable,             ),         ):             raise ValueError(                 \"Callable must be object or a string. Provided %s\", type(callable)             )          values[\"callable\"] = get_function(callable)            return values In\u00a0[8]: Copied! <pre>def f(x):\n    return 2*x\n</pre> def f(x):     return 2*x In\u00a0[9]: Copied! <pre>m = CallableModel(callable=f)\nm.callable(3)\n</pre> m = CallableModel(callable=f) m.callable(3) Out[9]: <pre>6</pre> In\u00a0[10]: Copied! <pre>m.json()\n</pre> m.json() Out[10]: <pre>'{\"callable\": \"__main__.f\"}'</pre> In\u00a0[11]: Copied! <pre>m2 = CallableModel(**json.loads(m.json()))\nm2.callable(345)\n</pre> m2 = CallableModel(**json.loads(m.json())) m2.callable(345) Out[11]: <pre>690</pre> In\u00a0[12]: Copied! <pre>def f():\n    pass\n\n# or this\nf = lambda x: 2*x\n\ntype(f) is FunctionType\n</pre> def f():     pass  # or this f = lambda x: 2*x  type(f) is FunctionType Out[12]: <pre>True</pre> In\u00a0[13]: Copied! <pre>import json\nfrom typing import Callable\nfrom types import FunctionType, MethodType\n\nfrom pydantic import Extra, Field\n\nfrom xopt.pydantic import NormalExecutor\nfrom xopt.utils import get_function, get_function_defaults\n</pre> import json from typing import Callable from types import FunctionType, MethodType  from pydantic import Extra, Field  from xopt.pydantic import NormalExecutor from xopt.utils import get_function, get_function_defaults In\u00a0[14]: Copied! <pre>from concurrent.futures import ProcessPoolExecutor\nfrom xopt.evaluator import DummyExecutor\n\nJSON_ENCODERS = {\n    FunctionType: lambda x: f\"{x.__module__}.{x.__qualname__}\",\n    Callable: lambda x: f\"{x.__module__}.{type(x).__qualname__}\",\n}\n\nclass Evaluator(BaseModel):\n    function: Callable\n    max_workers: int = 1\n    executor: NormalExecutor = Field(exclude=True)\n    function_kwargs: dict = {}\n    \n\n    class Config:\n        arbitrary_types_allowed = True\n        # validate_assignment = True # Broken in 1.9.0. Trying to fix in https://github.com/samuelcolvin/pydantic/pull/4194\n        json_encoders = JSON_ENCODERS\n        extra = 'forbid'\n\n    @root_validator(pre=True)\n    def validate_all(cls, values):\n   \n        f = get_function(values[\"function\"])\n        kwargs = values.get(\"function_kwargs\", {})\n        kwargs = {**get_function_defaults(f), **kwargs}\n        values[\"function\"] = f\n        values[\"function_kwargs\"] = kwargs\n\n        max_workers = values.pop(\"max_workers\", 1)\n\n        executor = values.pop(\"executor\", None)\n        if not executor:\n            if max_workers &gt; 1:\n                executor = ProcessPoolExecutor(max_workers=max_workers)\n            else: \n                executor = DummyExecutor()\n\n        # Cast as a NormalExecutor\n        values[\"executor\"] =  NormalExecutor[type(executor)](executor=executor)\n        values[\"max_workers\"] = max_workers\n        \n        return values    \n\n\n\ndef g(a, b=2):\n    return a*b\n\nev = Evaluator(function=g, function_kwargs={'b':3}, max_workers=2, executor=None)\nev.executor = None\nev.json()\n</pre> from concurrent.futures import ProcessPoolExecutor from xopt.evaluator import DummyExecutor  JSON_ENCODERS = {     FunctionType: lambda x: f\"{x.__module__}.{x.__qualname__}\",     Callable: lambda x: f\"{x.__module__}.{type(x).__qualname__}\", }  class Evaluator(BaseModel):     function: Callable     max_workers: int = 1     executor: NormalExecutor = Field(exclude=True)     function_kwargs: dict = {}           class Config:         arbitrary_types_allowed = True         # validate_assignment = True # Broken in 1.9.0. Trying to fix in https://github.com/samuelcolvin/pydantic/pull/4194         json_encoders = JSON_ENCODERS         extra = 'forbid'      @root_validator(pre=True)     def validate_all(cls, values):             f = get_function(values[\"function\"])         kwargs = values.get(\"function_kwargs\", {})         kwargs = {**get_function_defaults(f), **kwargs}         values[\"function\"] = f         values[\"function_kwargs\"] = kwargs          max_workers = values.pop(\"max_workers\", 1)          executor = values.pop(\"executor\", None)         if not executor:             if max_workers &gt; 1:                 executor = ProcessPoolExecutor(max_workers=max_workers)             else:                  executor = DummyExecutor()          # Cast as a NormalExecutor         values[\"executor\"] =  NormalExecutor[type(executor)](executor=executor)         values[\"max_workers\"] = max_workers                  return values        def g(a, b=2):     return a*b  ev = Evaluator(function=g, function_kwargs={'b':3}, max_workers=2, executor=None) ev.executor = None ev.json() Out[14]: <pre>'{\"function\": \"__main__.g\", \"max_workers\": 2, \"function_kwargs\": {\"b\": 3}}'</pre> In\u00a0[15]: Copied! <pre>ev.executor\n</pre> ev.executor  In\u00a0[16]: Copied! <pre>ev.max_workers = 1\nev.executor=None\n</pre> ev.max_workers = 1 ev.executor=None In\u00a0[17]: Copied! <pre>ev.json()\n</pre> ev.json() Out[17]: <pre>'{\"function\": \"__main__.g\", \"max_workers\": 1, \"function_kwargs\": {\"b\": 3}}'</pre> In\u00a0[18]: Copied! <pre>from concurrent.futures import ThreadPoolExecutor\n</pre> from concurrent.futures import ThreadPoolExecutor In\u00a0[19]: Copied! <pre>with ThreadPoolExecutor() as executor:\n    #print(dir(executor))\n    print(type(executor))\n</pre> with ThreadPoolExecutor() as executor:     #print(dir(executor))     print(type(executor)) <pre>&lt;class 'concurrent.futures.thread.ThreadPoolExecutor'&gt;\n</pre> In\u00a0[20]: Copied! <pre>from xopt.pydantic import NormalExecutor\n</pre> from xopt.pydantic import NormalExecutor In\u00a0[21]: Copied! <pre>type(executor)\n</pre> type(executor) Out[21]: <pre>concurrent.futures.thread.ThreadPoolExecutor</pre> In\u00a0[22]: Copied! <pre>NormalExecutor[type(executor)](executor=executor)\n</pre> NormalExecutor[type(executor)](executor=executor) Out[22]: <pre>NormalExecutor[ThreadPoolExecutor](loader=ObjLoader[ThreadPoolExecutor](object=None, loader=CallableModel(callable=&lt;class 'concurrent.futures.thread.ThreadPoolExecutor'&gt;, signature=Kwargs_ThreadPoolExecutor(args=[], max_workers=None, initializer=None, initargs=None, kwarg_order=['max_workers', 'thread_name_prefix', 'initializer', 'initargs'], thread_name_prefix='')), object_type=&lt;class 'concurrent.futures.thread.ThreadPoolExecutor'&gt;), executor_type=&lt;class 'concurrent.futures.thread.ThreadPoolExecutor'&gt;, submit_callable='submit', map_callable='map', shutdown_callable='shutdown', executor=&lt;concurrent.futures.thread.ThreadPoolExecutor object at 0x7f6247d47d60&gt;)</pre>"},{"location":"examples/developer/evaluator_devel/#init-methods","title":"Init methods\u00b6","text":""},{"location":"examples/developer/evaluator_devel/#json-encoding-and-decoding-callable-functions","title":"JSON encoding and decoding callable functions\u00b6","text":""},{"location":"examples/developer/evaluator_devel/#evaluator","title":"Evaluator\u00b6","text":""},{"location":"examples/developer/evaluator_devel/#executors","title":"Executors\u00b6","text":""},{"location":"examples/developer/executors/","title":"Pydantic-based executors","text":"In\u00a0[1]: Copied! <pre># imports\nimport contextlib\nimport copy\nimport json\nimport pickle\nimport inspect\nimport logging\nfrom concurrent.futures import Future, ThreadPoolExecutor\nfrom typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Tuple\nfrom types import FunctionType, MethodType\nfrom pydantic import BaseModel, Field, root_validator, validate_arguments, validator, ValidationError, Extra\nfrom pydantic.generics import GenericModel\n\n\n\nfrom xopt.pydantic import validate_and_compose_signature\n\n\nlogger = logging.getLogger(\"__name__\")\n\n# Print code\nfrom IPython.display import display, Markdown\ndef sdisplay(obj):\n    spec = inspect.getsource(obj)\n    display(Markdown(f\"```python \\n {spec} \\n ```\"))\n</pre> # imports import contextlib import copy import json import pickle import inspect import logging from concurrent.futures import Future, ThreadPoolExecutor from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Tuple from types import FunctionType, MethodType from pydantic import BaseModel, Field, root_validator, validate_arguments, validator, ValidationError, Extra from pydantic.generics import GenericModel    from xopt.pydantic import validate_and_compose_signature   logger = logging.getLogger(\"__name__\")  # Print code from IPython.display import display, Markdown def sdisplay(obj):     spec = inspect.getsource(obj)     display(Markdown(f\"```python \\n {spec} \\n ```\"))  In\u00a0[2]: Copied! <pre>ObjType = TypeVar(\"ObjType\")\n</pre> ObjType = TypeVar(\"ObjType\") In\u00a0[3]: Copied! <pre>JSON_ENCODERS = {\n    # function/method type distinguished for class members and not recognized as callables\n    FunctionType: lambda x: f\"{x.__module__}.{x.__qualname__}\",\n    MethodType: lambda x: f\"{x.__module__}.{x.__qualname__}\",\n    Callable: lambda x: f\"{x.__module__}.{type(x).__qualname__}\",\n    type: lambda x: f\"{x.__module__}.{x.__name__}\",\n    # for encoding instances of the ObjType}\n    ObjType: lambda x: f\"{x.__module__}.{x.__class__.__qualname__}\",\n}\n</pre> JSON_ENCODERS = {     # function/method type distinguished for class members and not recognized as callables     FunctionType: lambda x: f\"{x.__module__}.{x.__qualname__}\",     MethodType: lambda x: f\"{x.__module__}.{x.__qualname__}\",     Callable: lambda x: f\"{x.__module__}.{type(x).__qualname__}\",     type: lambda x: f\"{x.__module__}.{x.__name__}\",     # for encoding instances of the ObjType}     ObjType: lambda x: f\"{x.__module__}.{x.__class__.__qualname__}\", } In\u00a0[4]: Copied! <pre>from xopt.pydantic import get_callable_from_string\n\n#sdisplay(get_callable_from_string)\n</pre> from xopt.pydantic import get_callable_from_string  #sdisplay(get_callable_from_string) In\u00a0[5]: Copied! <pre>def test_fn(x, y=4, *args, m, **kwargs):\n    return x\n\nvalidate_and_compose_signature(test_fn, y=5, x=2, hi=4)\n</pre> def test_fn(x, y=4, *args, m, **kwargs):     return x  validate_and_compose_signature(test_fn, y=5, x=2, hi=4) Out[5]: <pre>Kwargs_test_fn(args=[], m=&lt;class 'inspect._empty'&gt;, kwarg_order=['x', 'y', 'm'], x=2, y=5)</pre> In\u00a0[6]: Copied! <pre>from xopt.pydantic import CallableModel\n</pre> from xopt.pydantic import CallableModel <p>Let's test the callables on example function and class:</p> In\u00a0[7]: Copied! <pre>def test_function(x: int, y: int = 5):\n    return x + y\n\n\nclass TestClass:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n</pre> def test_function(x: int, y: int = 5):     return x + y   class TestClass:     def __init__(self, x, y):         self.x = x         self.y = y In\u00a0[8]: Copied! <pre>fn = CallableModel(callable=test_function, kwargs={\"x\":1, \"y\":3})\n\nfn.signature\n</pre> fn = CallableModel(callable=test_function, kwargs={\"x\":1, \"y\":3})  fn.signature Out[8]: <pre>Kwargs_test_function(args=[], kwarg_order=['x', 'y'], x=1, y=3)</pre> In\u00a0[9]: Copied! <pre>fn = CallableModel(callable=test_function, args=(1,3,))\n\nfn.signature\n</pre> fn = CallableModel(callable=test_function, args=(1,3,))  fn.signature Out[9]: <pre>Kwargs_test_function(args=[], kwarg_order=['x', 'y'], x=1, y=3)</pre> In\u00a0[10]: Copied! <pre>fn = CallableModel(callable=test_function, args=(1,), kwargs={\"y\":3})\n\nfn.signature\n</pre> fn = CallableModel(callable=test_function, args=(1,), kwargs={\"y\":3})  fn.signature Out[10]: <pre>Kwargs_test_function(args=[], kwarg_order=['x', 'y'], x=1, y=3)</pre> <p>Schema shows us the generated model:</p> In\u00a0[11]: Copied! <pre>fn.signature.schema()\n</pre> fn.signature.schema() Out[11]: <pre>{'title': 'Kwargs_test_function',\n 'type': 'object',\n 'properties': {'args': {'title': 'Args',\n   'default': [],\n   'type': 'array',\n   'items': {}},\n  'kwarg_order': {'title': 'Kwarg Order',\n   'default': ['x', 'y'],\n   'type': 'array',\n   'items': {}},\n  'x': {'title': 'X', 'default': 1, 'type': 'integer'},\n  'y': {'title': 'Y', 'default': 3, 'type': 'integer'}}}</pre> In\u00a0[12]: Copied! <pre># dict rep\nfn_dict = fn.dict()\nfn_dict\n</pre> # dict rep fn_dict = fn.dict() fn_dict Out[12]: <pre>{'callable': &lt;function __main__.test_function(x: int, y: int = 5)&gt;,\n 'signature': {'args': [], 'x': 1, 'y': 3}}</pre> In\u00a0[13]: Copied! <pre># load from dict\nfn_from_dict = CallableModel(**fn.dict()) \nfn_from_dict()\n</pre> # load from dict fn_from_dict = CallableModel(**fn.dict())  fn_from_dict() Out[13]: <pre>4</pre> In\u00a0[14]: Copied! <pre># json representation\nfn.json()\n</pre> # json representation fn.json()  Out[14]: <pre>'{\"callable\":\"__main__.test_function\",\"signature\":{\"args\":[],\"x\":1,\"y\":3}}'</pre> In\u00a0[15]: Copied! <pre># callable from json\nfn_from_json = CallableModel.parse_raw(fn.json())\nfn_from_json()\n</pre> # callable from json fn_from_json = CallableModel.parse_raw(fn.json()) fn_from_json() Out[15]: <pre>4</pre> In\u00a0[16]: Copied! <pre># Class kwargs passed after\nparameterized_class = CallableModel(callable=TestClass, kwargs={\"x\":1, \"y\":3})\ntest_class_obj = parameterized_class()\nassert isinstance(test_class_obj, (TestClass,))\n</pre> # Class kwargs passed after parameterized_class = CallableModel(callable=TestClass, kwargs={\"x\":1, \"y\":3}) test_class_obj = parameterized_class() assert isinstance(test_class_obj, (TestClass,)) In\u00a0[17]: Copied! <pre># dict rep\nparameterized_class_dict = parameterized_class.dict()\nparameterized_class_dict\n</pre> # dict rep parameterized_class_dict = parameterized_class.dict() parameterized_class_dict Out[17]: <pre>{'callable': __main__.TestClass, 'signature': {'args': [], 'x': 1, 'y': 3}}</pre> In\u00a0[18]: Copied! <pre># from dict\nparameterized_class_from_dict = CallableModel(**parameterized_class_dict)\nparameterized_class_from_dict\n</pre> # from dict parameterized_class_from_dict = CallableModel(**parameterized_class_dict) parameterized_class_from_dict Out[18]: <pre>CallableModel(callable=&lt;class '__main__.TestClass'&gt;, signature=Kwargs_TestClass(args=[], kwarg_order=['x', 'y'], x=1, y=3))</pre> In\u00a0[19]: Copied! <pre>parameterized_class_from_dict_obj = parameterized_class_from_dict()\nassert isinstance(parameterized_class_from_dict_obj, (TestClass,))\n</pre> parameterized_class_from_dict_obj = parameterized_class_from_dict() assert isinstance(parameterized_class_from_dict_obj, (TestClass,)) In\u00a0[20]: Copied! <pre>#json \nparameterized_class_json = parameterized_class.json()\nparameterized_class_json\n</pre> #json  parameterized_class_json = parameterized_class.json() parameterized_class_json Out[20]: <pre>'{\"callable\":\"__main__.TestClass\",\"signature\":{\"args\":[],\"x\":1,\"y\":3}}'</pre> In\u00a0[21]: Copied! <pre>parameterized_class_from_json = CallableModel.parse_raw(parameterized_class_json)\ntest_class_obj = parameterized_class_from_json()\nassert isinstance(test_class_obj, (TestClass,))\n</pre> parameterized_class_from_json = CallableModel.parse_raw(parameterized_class_json) test_class_obj = parameterized_class_from_json() assert isinstance(test_class_obj, (TestClass,)) <p>We can use the callables to construct a dynamic object loader. The generic type allows us to use this same method for any executor. The syntax: <code>ObjLoader[ThreadPoolExecutor]</code> composes a new class entirely, this one specific to the <code>ThreadPoolExecutor</code>.</p> In\u00a0[22]: Copied! <pre>from xopt.pydantic import ObjLoader\n</pre> from xopt.pydantic import ObjLoader <p>Let's test object loader on our <code>TestClass</code>:</p> In\u00a0[23]: Copied! <pre># create type\nTestClassLoader = ObjLoader[TestClass]\n\nobj_loader = TestClassLoader(kwargs={\"x\":1, \"y\":3})\nloaded = obj_loader.load()\nloaded\n</pre> # create type TestClassLoader = ObjLoader[TestClass]  obj_loader = TestClassLoader(kwargs={\"x\":1, \"y\":3}) loaded = obj_loader.load() loaded Out[23]: <pre>&lt;__main__.TestClass at 0x7f987c58bd90&gt;</pre> <p>Can do this for a generic object like <code>ThreadPoolExecutor</code>:</p> In\u00a0[24]: Copied! <pre># create Type\nTPELoader = ObjLoader[ThreadPoolExecutor]\n\ntpe_loader = TPELoader(kwargs={\"max_workers\":1})\ntpe = tpe_loader.load()\ntpe\ntpe_loader_json  = tpe_loader.json()\ntpe_loader_json\ntpe_loader_from_json = TPELoader.parse_raw(tpe_loader_json)\n\n\n# shutdown tpe\ntpe.shutdown()\n</pre> # create Type TPELoader = ObjLoader[ThreadPoolExecutor]  tpe_loader = TPELoader(kwargs={\"max_workers\":1}) tpe = tpe_loader.load() tpe tpe_loader_json  = tpe_loader.json() tpe_loader_json tpe_loader_from_json = TPELoader.parse_raw(tpe_loader_json)   # shutdown tpe tpe.shutdown()  In\u00a0[25]: Copied! <pre>from xopt.pydantic import BaseExecutor, NormalExecutor\n</pre> from xopt.pydantic import BaseExecutor, NormalExecutor <p>Create some NormalExecutors: (must manually shutdown)</p> In\u00a0[26]: Copied! <pre># ThreadPool\n# create type\nNormTPExecutor = NormalExecutor[ThreadPoolExecutor]\n\ntpe_exec = NormTPExecutor(kwargs={\"max_workers\":1})\n# submit\ntpe_exec.submit(fn=test_function, x=1, y=8)\n</pre> # ThreadPool # create type NormTPExecutor = NormalExecutor[ThreadPoolExecutor]  tpe_exec = NormTPExecutor(kwargs={\"max_workers\":1}) # submit tpe_exec.submit(fn=test_function, x=1, y=8) Out[26]: <pre>&lt;Future at 0x7f9824880d90 state=finished returned int&gt;</pre> In\u00a0[27]: Copied! <pre># map\ntpe_exec.map(test_function, ((1, 4), (3, 4)))\n</pre> # map tpe_exec.map(test_function, ((1, 4), (3, 4))) Out[27]: <pre>&lt;generator object Executor.map.&lt;locals&gt;.result_iterator at 0x7f982488a6d0&gt;</pre> In\u00a0[28]: Copied! <pre>tpe_exec.shutdown()\n</pre> tpe_exec.shutdown() In\u00a0[29]: Copied! <pre># Dask\nfrom distributed import Client\nfrom distributed.cfexecutor import ClientExecutor\n\n# Using an existing executor\nclient = Client(silence_logs=logging.ERROR)\nexecutor = client.get_executor()\n\n# create type\nNormalDaskExecutor =  NormalExecutor[type(executor)]\n\ndask_executor = NormalDaskExecutor(executor=executor)\ndask_executor.submit(fn=test_function, x=1, y=8)\n</pre> # Dask from distributed import Client from distributed.cfexecutor import ClientExecutor  # Using an existing executor client = Client(silence_logs=logging.ERROR) executor = client.get_executor()  # create type NormalDaskExecutor =  NormalExecutor[type(executor)]  dask_executor = NormalDaskExecutor(executor=executor) dask_executor.submit(fn=test_function, x=1, y=8) Out[29]: <pre>&lt;Future at 0x7f98248ad0d0 state=pending&gt;</pre> In\u00a0[30]: Copied! <pre>dask_executor_json = dask_executor.json()\ndask_executor_json\n</pre> dask_executor_json = dask_executor.json() dask_executor_json Out[30]: <pre>'{\"loader\":{\"object\":null,\"loader\":{\"callable\":\"distributed.cfexecutor.ClientExecutor\",\"signature\":{\"args\":[],\"client\":\"inspect._empty\"}},\"object_type\":\"distributed.cfexecutor.ClientExecutor\"},\"submit_callable\":\"submit\",\"map_callable\":\"map\",\"shutdown_callable\":\"shutdown\",\"executor\":\"distributed.cfexecutor.ClientExecutor\"}'</pre> In\u00a0[31]: Copied! <pre>dask_executor.shutdown()\n</pre> dask_executor.shutdown() In\u00a0[32]: Copied! <pre># this raises error because client not passed...\n# dask_executor_from_json = NormalDaskExecutor.parse_raw(dask_executor_json)\n</pre> # this raises error because client not passed... # dask_executor_from_json = NormalDaskExecutor.parse_raw(dask_executor_json) <p>Context managers handle shutdown for us:</p> In\u00a0[33]: Copied! <pre># ContexExecutor with context handling on submission and no executor persistence\nclass ContextExecutor(\n    BaseExecutor[ObjType],\n    Generic[ObjType],\n    arbitrary_types_allowed=True,\n    json_encoders=JSON_ENCODERS,\n):\n    @contextlib.contextmanager\n    def context(self):\n\n        try:\n            self.executor = self.loader.load()\n            yield self.executor\n\n        finally:\n            self.shutdown()\n            self.executor = None\n\n    def submit(self, fn, **kwargs) -&gt; Future:\n        with self.context() as ctxt:\n            submit_fn = getattr(ctxt, self.submit_callable)\n            return submit_fn(fn, **kwargs)\n        \n    def map(self, fn, iter: Iterable) -&gt; Iterable[Future]:\n        with self.context() as ctxt:\n            map_fn = getattr(ctxt, self.map_callable)\n            return map_fn(fn, iter)\n</pre> # ContexExecutor with context handling on submission and no executor persistence class ContextExecutor(     BaseExecutor[ObjType],     Generic[ObjType],     arbitrary_types_allowed=True,     json_encoders=JSON_ENCODERS, ):     @contextlib.contextmanager     def context(self):          try:             self.executor = self.loader.load()             yield self.executor          finally:             self.shutdown()             self.executor = None      def submit(self, fn, **kwargs) -&gt; Future:         with self.context() as ctxt:             submit_fn = getattr(ctxt, self.submit_callable)             return submit_fn(fn, **kwargs)              def map(self, fn, iter: Iterable) -&gt; Iterable[Future]:         with self.context() as ctxt:             map_fn = getattr(ctxt, self.map_callable)             return map_fn(fn, iter)  <p>Create some ContextExecutors</p> In\u00a0[34]: Copied! <pre># ThreadPoolExecutor\n# create type\n\nContextTPExecutor = ContextExecutor[ThreadPoolExecutor]\n\ncontext_exec = ContextTPExecutor(kwargs={\"max_workers\":1})\ncontext_exec.submit(fn=test_function, x=1, y=8)\n</pre> # ThreadPoolExecutor # create type  ContextTPExecutor = ContextExecutor[ThreadPoolExecutor]  context_exec = ContextTPExecutor(kwargs={\"max_workers\":1}) context_exec.submit(fn=test_function, x=1, y=8) Out[34]: <pre>&lt;Future at 0x7f981cb082e0 state=finished returned int&gt;</pre> In\u00a0[35]: Copied! <pre>context_exec.map(test_function, ((1, 4), (3, 4)))\n</pre> context_exec.map(test_function, ((1, 4), (3, 4))) Out[35]: <pre>&lt;generator object Executor.map.&lt;locals&gt;.result_iterator at 0x7f981cb006d0&gt;</pre> In\u00a0[36]: Copied! <pre>context_exec_json = context_exec.json()\ncontext_exec_json\n</pre> context_exec_json = context_exec.json() context_exec_json Out[36]: <pre>'{\"loader\":{\"object\":null,\"loader\":{\"callable\":\"concurrent.futures.thread.ThreadPoolExecutor\",\"signature\":{\"args\":[],\"initializer\":null,\"initargs\":null,\"max_workers\":1,\"thread_name_prefix\":\"\"}},\"object_type\":\"concurrent.futures.thread.ThreadPoolExecutor\"},\"submit_callable\":\"submit\",\"map_callable\":\"map\",\"shutdown_callable\":\"shutdown\",\"executor\":null}'</pre> In\u00a0[37]: Copied! <pre>context_exec_from_json = ContextTPExecutor.parse_raw(\n        context_exec_json\n    )\ncontext_exec_from_json.submit(fn=test_function, x=1, y=8)\n</pre> context_exec_from_json = ContextTPExecutor.parse_raw(         context_exec_json     ) context_exec_from_json.submit(fn=test_function, x=1, y=8) Out[37]: <pre>&lt;Future at 0x7f981cadcbe0 state=finished returned int&gt;</pre> In\u00a0[38]: Copied! <pre>context_exec_from_json.map(test_function, ((1, 4), (3, 4)))\n</pre> context_exec_from_json.map(test_function, ((1, 4), (3, 4))) Out[38]: <pre>&lt;generator object Executor.map.&lt;locals&gt;.result_iterator at 0x7f981cb00ac0&gt;</pre> <p>Some executors are generated with Clients that manage sessions: ** will require gathering results before shutdown...</p> In\u00a0[39]: Copied! <pre>import yaml\n\ndef evaluate(inputs, y=5, z=None):\n    return {'result': inputs['x'] + y }\n\nfn = CallableModel(callable=evaluate, kwargs={\"y\":100})\nfn_json = fn.json(exclude_none=True)\n\n\nprint(yaml.dump(yaml.safe_load(fn_json)))\n</pre> import yaml  def evaluate(inputs, y=5, z=None):     return {'result': inputs['x'] + y }  fn = CallableModel(callable=evaluate, kwargs={\"y\":100}) fn_json = fn.json(exclude_none=True)   print(yaml.dump(yaml.safe_load(fn_json))) <pre>callable: __main__.evaluate\nsignature:\n  args: []\n  inputs: inspect._empty\n  y: 100\n\n</pre> In\u00a0[40]: Copied! <pre>fn_from_json = CallableModel.parse_raw(fn_json)\nfn_from_json\n</pre> fn_from_json = CallableModel.parse_raw(fn_json) fn_from_json Out[40]: <pre>CallableModel(callable=&lt;function evaluate at 0x7f981cb32f70&gt;, signature=Kwargs_evaluate(args=[], z=None, kwarg_order=['inputs', 'y', 'z'], inputs='inspect._empty', y=100))</pre> In\u00a0[41]: Copied! <pre>fn_from_json({\"x\":5}, z=2)\n</pre> fn_from_json({\"x\":5}, z=2) Out[41]: <pre>{'result': 105}</pre>"},{"location":"examples/developer/executors/#pydantic-based-executors","title":"Pydantic-based executors\u00b6","text":"<p>The PEP-3184 executor standard allows us to create an interface for executor objects and provide intelligent context for their execution. Pydantic validators allow the dynamic validation of executor initialization and execution based on signature inspection.</p> <p>Before you start, make sure you're using Pydantic &gt;= 1.9.0. 1.8 has all sorts of bugs with json encoder propagation.</p>"},{"location":"examples/developer/executors/#generics","title":"GENERICS\u00b6","text":"<p>Because the executor classes take many forms, we'll be making use of Pydantic's generic class composition for executor type interpolation. We are able to do this by creating a placeholder TypeVar. Here, this is names ObjType, because the executor classes make use of a generalizable loading approach that could be extented to objects generally.</p>"},{"location":"examples/developer/executors/#json-encoders","title":"JSON Encoders\u00b6","text":"<p>Pydantic does not propogate JSON encoders to child classes, so we'll define a set of common encoders:</p>"},{"location":"examples/developer/executors/#utility-functions-for-validating-signatures-and-getting-callables-from-strings","title":"Utility functions for validating signatures and getting callables from strings\u00b6","text":"<p>Central to generalizablity between executors is the ability to validate signatures args/kwargs against the executor class.</p>"},{"location":"examples/developer/executors/#representing-callables-as-pydantic-models","title":"Representing callables as Pydantic models\u00b6","text":"<p>Representing callables as pydantic models allows us to take advantage of both pydantic serialization to json and pydantic's validation hooks for the kwarg validation upon creation, with possibility of delaying load. Here <code>CallableModel</code>, we can provide initialization kwargs for a to-be-instantiated-later object and reap the benefit of additional kwarg validation.</p>"},{"location":"examples/developer/executors/#with-classes","title":"With Classes\u00b6","text":""},{"location":"examples/developer/executors/#executors","title":"Executors\u00b6","text":"<p>The previous classes were an attempt to demonstrate generic utility. The Executors to follow will build off of those common utilities to parameterize generic executors complying with the pep-3148 standard (the callables have been typified in case of deviation). Likewise, the following BaseExecutor outlines common executor fields and methods.</p>"},{"location":"examples/developer/executors/#normal-contextexecutor","title":"Normal, ContextExecutor\u00b6","text":"<p>Now, we subclass base to create two executors: <code>NormalExecutor</code>, and <code>ContextExecutor</code>. In the case that the user would like to create a persistent executor passed to the Evaluator, they would use the NormalExecutor. The ContextExecutor provides a context manager to dynamically create executor instances during execution.</p>"},{"location":"examples/developer/logger_example/","title":"Logging example","text":"In\u00a0[1]: Copied! <pre>from xopt.log import configure_logger\n</pre> from xopt.log import configure_logger In\u00a0[2]: Copied! <pre># Notebook names are this:\n__name__\n</pre> # Notebook names are this: __name__ Out[2]: <pre>'__main__'</pre> In\u00a0[3]: Copied! <pre># Put this in the top of any .py file or notebook\nimport logging\n\nlogger = logging.getLogger(__name__)\n</pre> # Put this in the top of any .py file or notebook import logging  logger = logging.getLogger(__name__) In\u00a0[4]: Copied! <pre># Put this at the top-level application. For texting, just use the notebook name.\nconfigure_logger(logger_name=__name__, file=\"log.txt\", level=\"INFO\")\n</pre> # Put this at the top-level application. For texting, just use the notebook name. configure_logger(logger_name=__name__, file=\"log.txt\", level=\"INFO\") In\u00a0[5]: Copied! <pre>logger.debug(\"some debug message\")  # This will write to log.txt\nlogger.info(\"some info message\")\n</pre> logger.debug(\"some debug message\")  # This will write to log.txt logger.info(\"some info message\") In\u00a0[6]: Copied! <pre>!cat log.txt\n</pre> !cat log.txt <pre>2023-06-14T13:02:40-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:02:40-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:02:40-0500 - __main__ - INFO - another info message\r\n2023-06-14T13:15:31-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:15:31-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:15:31-0500 - __main__ - INFO - another info message\r\n2023-06-14T13:27:20-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:27:20-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:27:20-0500 - __main__ - INFO - another info message\r\n2023-06-20T13:55:21-0500 - __main__ - INFO - some info message\r\n2023-06-20T13:55:21-0500 - __main__ - DEBUG - another debug message\r\n2023-06-20T13:55:21-0500 - __main__ - INFO - another info message\r\n2023-06-27T13:20:59-0500 - __main__ - INFO - some info message\r\n2023-06-27T13:20:59-0500 - __main__ - DEBUG - another debug message\r\n2023-06-27T13:20:59-0500 - __main__ - INFO - another info message\r\n2023-06-30T02:09:30+0000 - __main__ - INFO - some info message\r\n</pre> In\u00a0[7]: Copied! <pre># Change level to debug\nconfigure_logger(logger_name=__name__, file=\"log.txt\", level=\"DEBUG\")\n</pre> # Change level to debug configure_logger(logger_name=__name__, file=\"log.txt\", level=\"DEBUG\") In\u00a0[8]: Copied! <pre>logger.debug(\"another debug message\")\nlogger.info(\"another info message\")\n</pre> logger.debug(\"another debug message\") logger.info(\"another info message\") In\u00a0[9]: Copied! <pre>!cat log.txt # Now we see debug messages\n</pre> !cat log.txt # Now we see debug messages <pre>2023-06-14T13:02:40-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:02:40-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:02:40-0500 - __main__ - INFO - another info message\r\n2023-06-14T13:15:31-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:15:31-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:15:31-0500 - __main__ - INFO - another info message\r\n2023-06-14T13:27:20-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:27:20-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:27:20-0500 - __main__ - INFO - another info message\r\n2023-06-20T13:55:21-0500 - __main__ - INFO - some info message\r\n2023-06-20T13:55:21-0500 - __main__ - DEBUG - another debug message\r\n2023-06-20T13:55:21-0500 - __main__ - INFO - another info message\r\n2023-06-27T13:20:59-0500 - __main__ - INFO - some info message\r\n2023-06-27T13:20:59-0500 - __main__ - DEBUG - another debug message\r\n2023-06-27T13:20:59-0500 - __main__ - INFO - another info message\r\n2023-06-30T02:09:30+0000 - __main__ - INFO - some info message\r\n2023-06-30T02:09:30+0000 - __main__ - DEBUG - another debug message\r\n2023-06-30T02:09:30+0000 - __main__ - INFO - another info message\r\n</pre> In\u00a0[10]: Copied! <pre># With no file=, the default will go to stdout (here)\nconfigure_logger(logger_name=__name__, level=\"INFO\")\n</pre> # With no file=, the default will go to stdout (here) configure_logger(logger_name=__name__, level=\"INFO\") In\u00a0[11]: Copied! <pre>logger.debug(\"yet another debug message\")\nlogger.info(\"yet another info message\")\n</pre> logger.debug(\"yet another debug message\") logger.info(\"yet another info message\") <pre>yet another info message\n</pre> In\u00a0[12]: Copied! <pre>!cat log.txt # Notice this function onlu\n</pre> !cat log.txt # Notice this function onlu <pre>2023-06-14T13:02:40-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:02:40-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:02:40-0500 - __main__ - INFO - another info message\r\n2023-06-14T13:15:31-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:15:31-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:15:31-0500 - __main__ - INFO - another info message\r\n2023-06-14T13:27:20-0500 - __main__ - INFO - some info message\r\n2023-06-14T13:27:20-0500 - __main__ - DEBUG - another debug message\r\n2023-06-14T13:27:20-0500 - __main__ - INFO - another info message\r\n2023-06-20T13:55:21-0500 - __main__ - INFO - some info message\r\n2023-06-20T13:55:21-0500 - __main__ - DEBUG - another debug message\r\n2023-06-20T13:55:21-0500 - __main__ - INFO - another info message\r\n2023-06-27T13:20:59-0500 - __main__ - INFO - some info message\r\n2023-06-27T13:20:59-0500 - __main__ - DEBUG - another debug message\r\n2023-06-27T13:20:59-0500 - __main__ - INFO - another info message\r\n2023-06-30T02:09:30+0000 - __main__ - INFO - some info message\r\n2023-06-30T02:09:30+0000 - __main__ - DEBUG - another debug message\r\n2023-06-30T02:09:30+0000 - __main__ - INFO - another info message\r\n</pre> In\u00a0[13]: Copied! <pre># configure_logger only manages one handler. For more, look at the xopt.log code\nlogger.handlers\n</pre> # configure_logger only manages one handler. For more, look at the xopt.log code logger.handlers Out[13]: <pre>[&lt;StreamHandler stdout (INFO)&gt;]</pre> In\u00a0[14]: Copied! <pre>TEXT = \"\"\"\n\nimport logging\nlogger = logging.getLogger(__name__)\n\n\ndef f():\n    print('__name__ =', __name__)\n    logger.info('this is f')\n\"\"\"\nwith open(\"myf.py\", \"w\") as f:\n    f.write(TEXT)\n</pre> TEXT = \"\"\"  import logging logger = logging.getLogger(__name__)   def f():     print('__name__ =', __name__)     logger.info('this is f') \"\"\" with open(\"myf.py\", \"w\") as f:     f.write(TEXT) In\u00a0[15]: Copied! <pre>from myf import f\n</pre> from myf import f In\u00a0[16]: Copied! <pre>f()  # Notice no logger message.\n</pre> f()  # Notice no logger message. <pre>__name__ = myf\n</pre> In\u00a0[17]: Copied! <pre>configure_logger(logger_name=\"myf\", level=\"INFO\")\n</pre> configure_logger(logger_name=\"myf\", level=\"INFO\") In\u00a0[18]: Copied! <pre>f()  # Now we see the logger message.\n</pre> f()  # Now we see the logger message. <pre>__name__ = myf\nthis is f\n</pre> In\u00a0[19]: Copied! <pre>!rm log.txt\n!rm myf.py\n</pre> !rm log.txt !rm myf.py"},{"location":"examples/developer/logger_example/#logging-example","title":"Logging example\u00b6","text":""},{"location":"examples/developer/logger_example/#adding-logging-to-py-files","title":"Adding logging to .py files\u00b6","text":"<p>Importing .py files outside of a package have named based on their filename.</p>"},{"location":"examples/developer/logger_example/#cleanup","title":"Cleanup\u00b6","text":""},{"location":"examples/es/extremum_seeking/","title":"Extremum seeking","text":"In\u00a0[1]: Copied! <pre># If you encounter the \"Initializing libomp.dylib, but found libomp.dylib already initialized.\" error\n# Please run this cell\n\nimport os\n\nos.environ['KMP_DUPLICATE_LIB_OK']='True'\n</pre> # If you encounter the \"Initializing libomp.dylib, but found libomp.dylib already initialized.\" error # Please run this cell  import os  os.environ['KMP_DUPLICATE_LIB_OK']='True' In\u00a0[2]: Copied! <pre># set values if testing\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nNUM_STEPS = 10 if SMOKE_TEST else 5000\n</pre> # set values if testing SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") NUM_STEPS = 10 if SMOKE_TEST else 5000 In\u00a0[3]: Copied! <pre>import numpy as np\nfrom xopt.generators.es.extremumseeking import ExtremumSeekingGenerator\nfrom xopt.vocs import VOCS\nfrom xopt.evaluator import Evaluator\nfrom xopt import Xopt\nfrom tqdm.auto import tqdm\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import numpy as np from xopt.generators.es.extremumseeking import ExtremumSeekingGenerator from xopt.vocs import VOCS from xopt.evaluator import Evaluator from xopt import Xopt from tqdm.auto import tqdm import warnings warnings.filterwarnings(\"ignore\") In\u00a0[4]: Copied! <pre>np.random.seed(42)  # set deterministic run\n\nnES = 10\n\n# This global dict is used as a counter to emulate drifting\nstates = {\n    'count': 0\n}\n\nnoise = 0.1 * np.random.randn(NUM_STEPS)\n\n# This is the unknown optimal point\np_opt = 1.5 * (2 * np.random.rand(nES) - 1)\n\n# Various frequencies for unknown points\nw_opt = 0.25 + 2 * np.random.rand(nES)\n\ndef f_ES_minimize(input_dict):\n    p = []\n    for i in range(10):\n        p.append(input_dict[f'p{i}'])\n    p = np.array(p)\n    \n    # Vary the optimal point with time\n    p_opt_i = np.zeros(nES)\n    i = states['count']\n    \n    outcome_dict = {}\n    for n in np.arange(nES):\n        p_opt_i[n] = p_opt[n] * (1 + np.sin(2 * np.pi * w_opt[n] * i / 2000))\n    # This simple cost will be distance from the optimal point\n    f_val = np.sum((p - p_opt_i) ** 2) + noise[i]\n    \n    states['count'] += 1\n    outcome_dict = {'f': f_val, 'p_opt': p_opt_i}\n    \n    return outcome_dict\n</pre> np.random.seed(42)  # set deterministic run  nES = 10  # This global dict is used as a counter to emulate drifting states = {     'count': 0 }  noise = 0.1 * np.random.randn(NUM_STEPS)  # This is the unknown optimal point p_opt = 1.5 * (2 * np.random.rand(nES) - 1)  # Various frequencies for unknown points w_opt = 0.25 + 2 * np.random.rand(nES)  def f_ES_minimize(input_dict):     p = []     for i in range(10):         p.append(input_dict[f'p{i}'])     p = np.array(p)          # Vary the optimal point with time     p_opt_i = np.zeros(nES)     i = states['count']          outcome_dict = {}     for n in np.arange(nES):         p_opt_i[n] = p_opt[n] * (1 + np.sin(2 * np.pi * w_opt[n] * i / 2000))     # This simple cost will be distance from the optimal point     f_val = np.sum((p - p_opt_i) ** 2) + noise[i]          states['count'] += 1     outcome_dict = {'f': f_val, 'p_opt': p_opt_i}          return outcome_dict In\u00a0[5]: Copied! <pre>YAML = \"\"\"\nxopt:\n    max_evaluations: 5000\ngenerator:\n    name: extremum_seeking\n    k: 2.0\n    oscillation_size: 0.1\n    decay_rate: 1.0\nevaluator:\n    function: __main__.f_ES_minimize\nvocs:\n    variables:\n        p0: [-2, 2]\n        p1: [-2, 2]\n        p2: [-2, 2]\n        p3: [-2, 2]\n        p4: [-2, 2]\n        p5: [-2, 2]\n        p6: [-2, 2]\n        p7: [-2, 2]\n        p8: [-2, 2]\n        p9: [-2, 2]\n    objectives:\n        f: MINIMIZE\n\"\"\"\n\nX = Xopt(YAML)\nX.options.max_evaluations = NUM_STEPS\n\nX\n</pre> YAML = \"\"\" xopt:     max_evaluations: 5000 generator:     name: extremum_seeking     k: 2.0     oscillation_size: 0.1     decay_rate: 1.0 evaluator:     function: __main__.f_ES_minimize vocs:     variables:         p0: [-2, 2]         p1: [-2, 2]         p2: [-2, 2]         p3: [-2, 2]         p4: [-2, 2]         p5: [-2, 2]         p6: [-2, 2]         p7: [-2, 2]         p8: [-2, 2]         p9: [-2, 2]     objectives:         f: MINIMIZE \"\"\"  X = Xopt(YAML) X.options.max_evaluations = NUM_STEPS  X Out[5]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: 5000}\ngenerator: {name: extremum_seeking, k: 2.0, oscillation_size: 0.1, decay_rate: 1.0}\nevaluator:\n  function: __main__.f_ES_minimize\n  max_workers: 1\n  function_kwargs: {}\n  vectorized: false\nvocs:\n  variables:\n    p0: [-2.0, 2.0]\n    p1: [-2.0, 2.0]\n    p2: [-2.0, 2.0]\n    p3: [-2.0, 2.0]\n    p4: [-2.0, 2.0]\n    p5: [-2.0, 2.0]\n    p6: [-2.0, 2.0]\n    p7: [-2.0, 2.0]\n    p8: [-2.0, 2.0]\n    p9: [-2.0, 2.0]\n  constraints: {}\n  objectives: {f: MINIMIZE}\n  constants: {}\n  observables: []\n</pre> In\u00a0[6]: Copied! <pre># Reset global counter to guarantee deterministic optimization\nstates['count'] = 0\n\nX.run()\n</pre> # Reset global counter to guarantee deterministic optimization states['count'] = 0  X.run() <p>Now you can go directly to the Visualization section and check out the results.</p> In\u00a0[7]: Copied! <pre>variables = {}\nfor i in range(nES):\n    variables[f'p{i}'] = [-2, 2]\n\nvocs = VOCS(\n    variables=variables,\n    objectives={'f': 'MINIMIZE'},\n)\n</pre> variables = {} for i in range(nES):     variables[f'p{i}'] = [-2, 2]  vocs = VOCS(     variables=variables,     objectives={'f': 'MINIMIZE'}, ) In\u00a0[8]: Copied! <pre>vocs\n</pre> vocs Out[8]: <pre>VOCS(variables={'p0': [-2.0, 2.0], 'p1': [-2.0, 2.0], 'p2': [-2.0, 2.0], 'p3': [-2.0, 2.0], 'p4': [-2.0, 2.0], 'p5': [-2.0, 2.0], 'p6': [-2.0, 2.0], 'p7': [-2.0, 2.0], 'p8': [-2.0, 2.0], 'p9': [-2.0, 2.0]}, constraints={}, objectives={'f': 'MINIMIZE'}, constants={}, observables=[])</pre> In\u00a0[9]: Copied! <pre>evaluator = Evaluator(function=f_ES_minimize)\n</pre> evaluator = Evaluator(function=f_ES_minimize) In\u00a0[10]: Copied! <pre>generator = ExtremumSeekingGenerator(vocs=vocs)\n</pre> generator = ExtremumSeekingGenerator(vocs=vocs) In\u00a0[11]: Copied! <pre>generator.dict()\n</pre> generator.dict() Out[11]: <pre>{'k': 2.0, 'oscillation_size': 0.1, 'decay_rate': 1.0}</pre> <p>Note that ES has 3 hyper-parameters: <code>k</code>, <code>oscillation_size</code>, and <code>decay_rate</code>.</p> <ul> <li><code>k</code>: ES feedback gain (set <code>k &lt; 0</code> for maximization instead of minimization)</li> <li><code>oscillation_size</code>: ES dithering size</li> <li><code>decay_rate</code>: This value is optional, it causes the oscillation sizes to naturally decay. If you want the parameters to persistently oscillate without decay, set <code>decay_rate = 1.0</code></li> </ul> In\u00a0[12]: Copied! <pre>X = Xopt(vocs=vocs, evaluator=evaluator, generator=generator)\n</pre> X = Xopt(vocs=vocs, evaluator=evaluator, generator=generator) In\u00a0[13]: Copied! <pre>X.options.max_evaluations = NUM_STEPS\n</pre> X.options.max_evaluations = NUM_STEPS In\u00a0[14]: Copied! <pre># Reset global counter to guarantee deterministic optimization\nstates['count'] = 0\n\nfor i in tqdm(range(NUM_STEPS)):\n    X.step()\n</pre> # Reset global counter to guarantee deterministic optimization states['count'] = 0  for i in tqdm(range(NUM_STEPS)):     X.step() In\u00a0[15]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[16]: Copied! <pre># Plot all results\nplt.figure(1,figsize=(8,10))\n\nplt.subplot(2,1,1)\nplt.plot(X.data['f'])\nplt.ylabel('ES cost')\nplt.xticks([])\n\n\nplt.subplot(2,1,2)\nplt.plot(X.data[[f'p{i}' for i in range(10)]],alpha=0.25)\n_p_opt = np.vstack(X.data['p_opt'].values).astype(float)  # do not use p_opt as var name!\nplt.plot(_p_opt, 'k--')\nplt.plot(2+np.zeros(NUM_STEPS),'r')\nplt.plot(-2+np.zeros(NUM_STEPS),'r')\nplt.legend(frameon=False)\nplt.ylabel('ES parameter')\nplt.xlabel('ES step')\n\nplt.tight_layout()\n</pre> # Plot all results plt.figure(1,figsize=(8,10))  plt.subplot(2,1,1) plt.plot(X.data['f']) plt.ylabel('ES cost') plt.xticks([])   plt.subplot(2,1,2) plt.plot(X.data[[f'p{i}' for i in range(10)]],alpha=0.25) _p_opt = np.vstack(X.data['p_opt'].values).astype(float)  # do not use p_opt as var name! plt.plot(_p_opt, 'k--') plt.plot(2+np.zeros(NUM_STEPS),'r') plt.plot(-2+np.zeros(NUM_STEPS),'r') plt.legend(frameon=False) plt.ylabel('ES parameter') plt.xlabel('ES step')  plt.tight_layout() <pre>No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n</pre> In\u00a0[17]: Copied! <pre># Plot Individual Parameter Trajectories\nplt.figure(2,figsize=(15,8))\n\nfor n in np.arange(nES):\n    \n    \n    plt.subplot(2,5,n+1)\n    plt.plot(X.data[f'p{n}'],label=f'$p^{{ES}}_{n+1}$')\n    plt.plot(_p_opt[:,n],'k--',label=f'$p^*_{n+1}$')\n    plt.plot(2+np.zeros(NUM_STEPS),'r--')\n    plt.plot(-2+np.zeros(NUM_STEPS),'r--')\n    plt.ylim([-3,5])\n    plt.legend(frameon=False,loc=1)\n    if n == 0:\n        plt.ylabel('parameters')\n    elif n == 5:\n        plt.ylabel('parameters')\n    else:\n        plt.yticks([])\n    if n &gt; 4:\n        plt.xlabel('ES step')\n    else:\n        plt.xticks([])\n\nplt.tight_layout()\n</pre> # Plot Individual Parameter Trajectories plt.figure(2,figsize=(15,8))  for n in np.arange(nES):               plt.subplot(2,5,n+1)     plt.plot(X.data[f'p{n}'],label=f'$p^{{ES}}_{n+1}$')     plt.plot(_p_opt[:,n],'k--',label=f'$p^*_{n+1}$')     plt.plot(2+np.zeros(NUM_STEPS),'r--')     plt.plot(-2+np.zeros(NUM_STEPS),'r--')     plt.ylim([-3,5])     plt.legend(frameon=False,loc=1)     if n == 0:         plt.ylabel('parameters')     elif n == 5:         plt.ylabel('parameters')     else:         plt.yticks([])     if n &gt; 4:         plt.xlabel('ES step')     else:         plt.xticks([])  plt.tight_layout() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/es/extremum_seeking/#extremum-seeking-optimization","title":"Extremum Seeking Optimization\u00b6","text":"<p>In this example we demonstrate extremum seeking optimization. The optimum of the test evaluate function would drift around a center point and we would be trying to follow the trend by applying extremum seeking technique.</p>"},{"location":"examples/es/extremum_seeking/#extremum-seeking-test-problem","title":"Extremum seeking test problem\u00b6","text":"<p>This test problem is a 10-D quadratic function, with its optimum drifting around the initial position. We also add some noise to make the problem more realistic.</p>"},{"location":"examples/es/extremum_seeking/#run-es-on-the-test-problem-yaml-method","title":"Run ES on the test problem (YAML method)\u00b6","text":""},{"location":"examples/es/extremum_seeking/#run-es-on-the-test-problem-api-method","title":"Run ES on the test problem (API method)\u00b6","text":""},{"location":"examples/es/extremum_seeking/#vocs","title":"VOCS\u00b6","text":"<p>We'll set the bounds for all the variables pi to [-2, 2].</p>"},{"location":"examples/es/extremum_seeking/#evaluator","title":"Evaluator\u00b6","text":""},{"location":"examples/es/extremum_seeking/#generator","title":"Generator\u00b6","text":""},{"location":"examples/es/extremum_seeking/#run-the-optimization","title":"Run the optimization\u00b6","text":""},{"location":"examples/es/extremum_seeking/#visualization","title":"Visualization\u00b6","text":""},{"location":"examples/multi_objective_bayes_opt/mggpo/","title":"Multi-objective Bayesian Optimization","text":"In\u00a0[8]: Copied! <pre># set values if testing\nimport os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nN_MC_SAMPLES = 1 if SMOKE_TEST else 128\nNUM_RESTARTS = 1 if SMOKE_TEST else 25\n\n# Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom copy import deepcopy\n\nimport pandas as pd\nimport numpy as np\nimport torch\n\nfrom xopt import Xopt, Evaluator\nfrom xopt.generators import MGGPOGenerator\nfrom xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs\n\n\nevaluator = Evaluator(function=evaluate_TNK)\nevaluator.max_workers = 10\n\n# test check options\nvocs = deepcopy(tnk_vocs)\ngen = MGGPOGenerator(vocs=vocs, reference_point = {\"y1\":1.5,\"y2\":1.5})\ngen.n_monte_carlo_samples = N_MC_SAMPLES\ngen.numerical_optimizer.n_restarts = NUM_RESTARTS\nX = Xopt(evaluator=evaluator, generator=gen, vocs=vocs)\nX.evaluate_data(pd.DataFrame({\"x1\": [1.0, 0.75], \"x2\": [0.75, 1.0]}))\n\nX\n</pre> # set values if testing import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") N_MC_SAMPLES = 1 if SMOKE_TEST else 128 NUM_RESTARTS = 1 if SMOKE_TEST else 25  # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  from copy import deepcopy  import pandas as pd import numpy as np import torch  from xopt import Xopt, Evaluator from xopt.generators import MGGPOGenerator from xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs   evaluator = Evaluator(function=evaluate_TNK) evaluator.max_workers = 10  # test check options vocs = deepcopy(tnk_vocs) gen = MGGPOGenerator(vocs=vocs, reference_point = {\"y1\":1.5,\"y2\":1.5}) gen.n_monte_carlo_samples = N_MC_SAMPLES gen.numerical_optimizer.n_restarts = NUM_RESTARTS X = Xopt(evaluator=evaluator, generator=gen, vocs=vocs) X.evaluate_data(pd.DataFrame({\"x1\": [1.0, 0.75], \"x2\": [0.75, 1.0]}))  X Out[8]: <pre>\n            Xopt\n________________________________\nVersion: 1.3.1+10.g14e7b69.dirty\nData size: 2\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: null}\ngenerator:\n  name: mggpo\n  optim: {num_restarts: 25, raw_samples: 20, sequential: true, max_travel_distances: null,\n    use_turbo: false}\n  acq:\n    proximal_lengthscales: null\n    use_transformed_proximal_weights: true\n    monte_carlo_samples: 128\n    reference_point: {y1: 1.5, y2: 1.5}\n    population_size: 64\n  model:\n    name: standard\n    custom_constructor: null\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n  n_initial: 3\n  use_cuda: false\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 10\n  function_kwargs: {sleep: 0, random_sleep: 0, raise_probability: 0}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n  constraints:\n    c1: [GREATER_THAN, 0.0]\n    c2: [LESS_THAN, 0.5]\n  objectives: {y1: MINIMIZE, y2: MINIMIZE}\n  constants: {a: dummy_constant}\n  linked_variables: {}\n</pre> In\u00a0[\u00a0]: Copied! <pre>for i in range(10):\n    print(i)\n    X.step()\n</pre> for i in range(10):     print(i)     X.step() In\u00a0[4]: Copied! <pre>X.generator.data\n</pre> X.generator.data Out[4]: x1 x2 y1 y2 c1 c2 some_array xopt_runtime xopt_error a 1 1.000000 0.750000 1.000000 0.750000 0.626888 0.312500 [1, 2, 3] 0.000032 False NaN 2 0.750000 1.000000 0.750000 1.000000 0.626888 0.312500 [1, 2, 3] 0.000008 False NaN 3 2.925962 0.454291 2.925962 0.454291 7.845572 5.887379 [1, 2, 3] 0.000019 False dummy_constant 4 2.935241 0.880849 2.935241 0.880849 8.396302 6.075444 [1, 2, 3] 0.000007 False dummy_constant 5 2.137855 1.984599 2.137855 1.984599 7.426216 4.886602 [1, 2, 3] 0.000006 False dummy_constant ... ... ... ... ... ... ... ... ... ... ... 98 0.110114 1.018884 0.110114 1.018884 0.065361 0.421251 [1, 2, 3] 0.000007 False dummy_constant 99 0.119081 0.980113 0.119081 0.980113 0.010374 0.375608 [1, 2, 3] 0.000007 False dummy_constant 100 0.170972 0.981418 0.170972 0.981418 0.085207 0.340023 [1, 2, 3] 0.000007 False dummy_constant 101 0.119081 1.017576 0.119081 1.017576 0.078535 0.412984 [1, 2, 3] 0.000007 False dummy_constant 102 0.119081 1.067561 0.119081 1.067561 0.174378 0.467224 [1, 2, 3] 0.000007 False dummy_constant <p>102 rows \u00d7 10 columns</p> In\u00a0[5]: Copied! <pre>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\ntheta = np.linspace(0, np.pi / 2)\nr = np.sqrt(1 + 0.1 * np.cos(16 * theta))\nx_1 = r * np.sin(theta)\nx_2_lower = r * np.cos(theta)\nx_2_upper = (0.5 - (x_1 - 0.5) ** 2) ** 0.5 + 0.5\n\nz = np.zeros_like(x_1)\n\n# ax2.plot(x_1, x_2_lower,'r')\nax.fill_between(x_1, z, x_2_lower, fc=\"white\")\ncircle = plt.Circle(\n    (0.5, 0.5), 0.5 ** 0.5, color=\"r\", alpha=0.25, zorder=0, label=\"Valid Region\"\n)\nax.add_patch(circle)\nhistory = pd.concat(\n    [X.data, tnk_vocs.feasibility_data(X.data)], axis=1, ignore_index=False\n)\n\nax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")\nax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")\n\nax.set_xlim(0, 3.14)\nax.set_ylim(0, 3.14)\nax.set_xlabel(\"x1\")\nax.set_ylabel(\"x2\")\nax.set_aspect(\"equal\")\n</pre> import matplotlib.pyplot as plt  fig, ax = plt.subplots()  theta = np.linspace(0, np.pi / 2) r = np.sqrt(1 + 0.1 * np.cos(16 * theta)) x_1 = r * np.sin(theta) x_2_lower = r * np.cos(theta) x_2_upper = (0.5 - (x_1 - 0.5) ** 2) ** 0.5 + 0.5  z = np.zeros_like(x_1)  # ax2.plot(x_1, x_2_lower,'r') ax.fill_between(x_1, z, x_2_lower, fc=\"white\") circle = plt.Circle(     (0.5, 0.5), 0.5 ** 0.5, color=\"r\", alpha=0.25, zorder=0, label=\"Valid Region\" ) ax.add_patch(circle) history = pd.concat(     [X.data, tnk_vocs.feasibility_data(X.data)], axis=1, ignore_index=False )  ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\") ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")  ax.set_xlim(0, 3.14) ax.set_ylim(0, 3.14) ax.set_xlabel(\"x1\") ax.set_ylabel(\"x2\") ax.set_aspect(\"equal\") In\u00a0[6]: Copied! <pre>from matplotlib import pyplot as plt  # plot model predictions\n\ndata = X.data\n\nbounds = X.generator.vocs.bounds\nmodel = X.generator.train_model(X.generator.data)\n\n# create mesh\nn = 50\nx = torch.linspace(*bounds.T[0], n)\ny = torch.linspace(*bounds.T[1], n)\nxx, yy = torch.meshgrid(x, y)\npts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()\n\noutputs = X.generator.vocs.output_names\nwith torch.no_grad():\n    post = model.posterior(pts)\n\n    for i in range(len(vocs.output_names)):\n        mean = post.mean[...,i]\n        fig, ax = plt.subplots()\n        ax.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C1\")\n        c = ax.pcolor(\n            xx, yy, mean.squeeze().reshape(n, n),\n            cmap=\"seismic\",\n            vmin=-10.0,\n            vmax=10.0)\n        fig.colorbar(c)\n        ax.set_title(f\"Posterior mean: {outputs[i]}\")\n</pre> from matplotlib import pyplot as plt  # plot model predictions  data = X.data  bounds = X.generator.vocs.bounds model = X.generator.train_model(X.generator.data)  # create mesh n = 50 x = torch.linspace(*bounds.T[0], n) y = torch.linspace(*bounds.T[1], n) xx, yy = torch.meshgrid(x, y) pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()  outputs = X.generator.vocs.output_names with torch.no_grad():     post = model.posterior(pts)      for i in range(len(vocs.output_names)):         mean = post.mean[...,i]         fig, ax = plt.subplots()         ax.plot(*data[[\"x1\", \"x2\"]].to_numpy().T, \"+C1\")         c = ax.pcolor(             xx, yy, mean.squeeze().reshape(n, n),             cmap=\"seismic\",             vmin=-10.0,             vmax=10.0)         fig.colorbar(c)         ax.set_title(f\"Posterior mean: {outputs[i]}\") In\u00a0[7]: Copied! <pre># plot the acquisition function\nfrom xopt.generators.bayesian.objectives import feasibility\n\nbounds = X.generator.vocs.bounds\nmodel = X.generator.model\n\n# create mesh\nn = 25\nx = torch.linspace(*bounds.T[0], n)\ny = torch.linspace(*bounds.T[1], n)\nxx, yy = torch.meshgrid(x, y)\npts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()\n\nacq_func = X.generator.get_acquisition(model)\nwith torch.no_grad():\n    acq_pts = pts.unsqueeze(1)\n    acq = acq_func(acq_pts)\n\n    fig, ax = plt.subplots()\n    c = ax.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")\n    fig.colorbar(c)\n    ax.set_title(\"Acquisition function\")\n\n    ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")\n    ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")\n\n    ax.plot(*history[[\"x1\", \"x2\"]].to_numpy()[-1].T, \"+\")\n\n    feas = feasibility(pts.unsqueeze(1), model, tnk_vocs).flatten()\n\n    fig2, ax2 = plt.subplots()\n    c = ax2.pcolor(xx, yy, feas.reshape(n, n))\n    fig2.colorbar(c)\n    ax2.set_title(\"Feasible Region\")\n\ncandidate = X.generator.generate(1)\nprint(candidate[[\"x1\", \"x2\"]].to_numpy())\nax.plot(*candidate[[\"x1\", \"x2\"]].to_numpy()[0], \"o\")\n</pre> # plot the acquisition function from xopt.generators.bayesian.objectives import feasibility  bounds = X.generator.vocs.bounds model = X.generator.model  # create mesh n = 25 x = torch.linspace(*bounds.T[0], n) y = torch.linspace(*bounds.T[1], n) xx, yy = torch.meshgrid(x, y) pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()  acq_func = X.generator.get_acquisition(model) with torch.no_grad():     acq_pts = pts.unsqueeze(1)     acq = acq_func(acq_pts)      fig, ax = plt.subplots()     c = ax.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")     fig.colorbar(c)     ax.set_title(\"Acquisition function\")      ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")     ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")      ax.plot(*history[[\"x1\", \"x2\"]].to_numpy()[-1].T, \"+\")      feas = feasibility(pts.unsqueeze(1), model, tnk_vocs).flatten()      fig2, ax2 = plt.subplots()     c = ax2.pcolor(xx, yy, feas.reshape(n, n))     fig2.colorbar(c)     ax2.set_title(\"Feasible Region\")  candidate = X.generator.generate(1) print(candidate[[\"x1\", \"x2\"]].to_numpy()) ax.plot(*candidate[[\"x1\", \"x2\"]].to_numpy()[0], \"o\") <pre>[[0.9921172  0.39381641]]\n</pre> Out[7]: <pre>[&lt;matplotlib.lines.Line2D at 0x250803eb640&gt;]</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/multi_objective_bayes_opt/mggpo/#multi-objective-bayesian-optimization","title":"Multi-objective Bayesian Optimization\u00b6","text":"<p>TNK function $n=2$ variables: $x_i \\in [0, \\pi], i=1,2$</p> <p>Objectives:</p> <ul> <li>$f_i(x) = x_i$</li> </ul> <p>Constraints:</p> <ul> <li>$g_1(x) = -x_1^2 -x_2^2 + 1 + 0.1 \\cos\\left(16 \\arctan \\frac{x_1}{x_2}\\right) \\le 0$</li> <li>$g_2(x) = (x_1 - 1/2)^2 + (x_2-1/2)^2 \\le 0.5$</li> </ul>"},{"location":"examples/multi_objective_bayes_opt/mggpo/#plot-results","title":"plot results\u00b6","text":""},{"location":"examples/multi_objective_bayes_opt/mobo/","title":"Multi-objective Bayesian Optimization","text":"In\u00a0[1]: Copied! <pre># set values if testing\nimport os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nN_MC_SAMPLES = 1 if SMOKE_TEST else 128\nNUM_RESTARTS = 1 if SMOKE_TEST else 20\nN_STEPS = 1 if SMOKE_TEST else 30\n\n# Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport pandas as pd\nimport numpy as np\nimport torch\n\nfrom xopt import Xopt, Evaluator\nfrom xopt.generators.bayesian import MOBOGenerator\nfrom xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs\n\n\nevaluator = Evaluator(function=evaluate_TNK)\nprint(tnk_vocs.dict())\n</pre> # set values if testing import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") N_MC_SAMPLES = 1 if SMOKE_TEST else 128 NUM_RESTARTS = 1 if SMOKE_TEST else 20 N_STEPS = 1 if SMOKE_TEST else 30  # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")   import pandas as pd import numpy as np import torch  from xopt import Xopt, Evaluator from xopt.generators.bayesian import MOBOGenerator from xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs   evaluator = Evaluator(function=evaluate_TNK) print(tnk_vocs.dict()) <pre>{'variables': {'x1': [0.0, 3.14159], 'x2': [0.0, 3.14159]}, 'constraints': {'c1': ['GREATER_THAN', 0.0], 'c2': ['LESS_THAN', 0.5]}, 'objectives': {'y1': 'MINIMIZE', 'y2': 'MINIMIZE'}, 'constants': {'a': 'dummy_constant'}, 'observables': []}\n</pre> In\u00a0[2]: Copied! <pre>generator = MOBOGenerator(vocs=tnk_vocs, reference_point = {\"y1\":1.5,\"y2\":1.5})\ngenerator.n_monte_carlo_samples = N_MC_SAMPLES\ngenerator.numerical_optimizer.n_restarts = NUM_RESTARTS\n\nX = Xopt(generator=generator, evaluator=evaluator, vocs=tnk_vocs)\nX.evaluate_data(pd.DataFrame({\"x1\":[1.0, 0.75],\"x2\":[0.75, 1.0]}))\n\nfor i in range(N_STEPS):\n    print(i)\n    X.step()\n</pre> generator = MOBOGenerator(vocs=tnk_vocs, reference_point = {\"y1\":1.5,\"y2\":1.5}) generator.n_monte_carlo_samples = N_MC_SAMPLES generator.numerical_optimizer.n_restarts = NUM_RESTARTS  X = Xopt(generator=generator, evaluator=evaluator, vocs=tnk_vocs) X.evaluate_data(pd.DataFrame({\"x1\":[1.0, 0.75],\"x2\":[0.75, 1.0]}))  for i in range(N_STEPS):     print(i)     X.step() <pre>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre> In\u00a0[3]: Copied! <pre>X.generator.data\n</pre> X.generator.data Out[3]: x1 x2 y1 y2 c1 c2 some_array xopt_runtime xopt_error a 1 1.000000 0.750000 1.000000 0.750000 0.626888 0.312500 [1, 2, 3] 0.000064 False NaN 2 0.750000 1.000000 0.750000 1.000000 0.626888 0.312500 [1, 2, 3] 0.000011 False NaN 3 3.006964 0.000000 3.006964 0.000000 7.941835 6.534871 [1, 2, 3] 0.000039 False dummy_constant 4 1.142973 2.990839 1.142973 2.990839 9.161141 6.617691 [1, 2, 3] 0.000038 False dummy_constant 5 0.077198 0.182534 0.077198 0.182534 -1.060019 0.279546 [1, 2, 3] 0.000041 False dummy_constant 6 0.473888 0.000000 0.473888 0.000000 -0.875430 0.250682 [1, 2, 3] 0.000043 False dummy_constant 7 0.000000 0.660498 0.000000 0.660498 -0.663742 0.275760 [1, 2, 3] 0.000040 False dummy_constant 8 0.869577 0.000000 0.869577 0.000000 -0.343835 0.386587 [1, 2, 3] 0.000039 False dummy_constant 9 1.051637 0.298037 1.051637 0.298037 0.223727 0.345093 [1, 2, 3] 0.000040 False dummy_constant 10 0.310495 1.014060 0.310495 1.014060 0.120563 0.300170 [1, 2, 3] 0.000040 False dummy_constant 11 0.835068 0.684852 0.835068 0.684852 0.166899 0.146441 [1, 2, 3] 0.000039 False dummy_constant 12 0.374255 0.247106 0.374255 0.247106 -0.699258 0.079767 [1, 2, 3] 0.000039 False dummy_constant 13 0.182934 0.851607 0.182934 0.851607 -0.144262 0.224158 [1, 2, 3] 0.000041 False dummy_constant 14 0.143428 1.034274 0.143428 1.034274 0.149526 0.412592 [1, 2, 3] 0.000042 False dummy_constant 15 0.053107 1.012860 0.053107 1.012860 -0.038179 0.462739 [1, 2, 3] 0.000043 False dummy_constant 16 0.537296 0.852472 0.537296 0.852472 0.106435 0.125628 [1, 2, 3] 0.000040 False dummy_constant 17 1.283753 0.227095 1.283753 0.227095 0.793862 0.688746 [1, 2, 3] 0.000040 False dummy_constant 18 0.908420 0.448627 0.908420 0.448627 -0.022714 0.169446 [1, 2, 3] 0.000044 False dummy_constant 19 0.891080 0.239793 0.891080 0.239793 -0.099976 0.220651 [1, 2, 3] 0.000041 False dummy_constant 20 0.616582 0.595914 0.616582 0.595914 -0.361017 0.022791 [1, 2, 3] 0.000041 False dummy_constant 21 0.812236 0.081810 0.812236 0.081810 -0.330047 0.272374 [1, 2, 3] 0.000041 False dummy_constant 22 0.080421 0.736812 0.080421 0.736812 -0.433855 0.232127 [1, 2, 3] 0.000041 False dummy_constant 23 0.787905 0.002133 0.787905 0.002133 -0.479108 0.330761 [1, 2, 3] 0.000042 False dummy_constant 24 0.321019 0.936558 0.321019 0.936558 -0.073856 0.222617 [1, 2, 3] 0.000047 False dummy_constant 25 0.913074 0.145062 0.913074 0.145062 -0.063906 0.296611 [1, 2, 3] 0.000037 False dummy_constant 26 0.446330 0.915966 0.446330 0.915966 -0.018201 0.175908 [1, 2, 3] 0.000042 False dummy_constant 27 0.364671 0.263148 0.364671 0.263148 -0.713929 0.074413 [1, 2, 3] 0.000039 False dummy_constant 28 0.709774 0.766319 0.709774 0.766319 0.009209 0.114931 [1, 2, 3] 0.000040 False dummy_constant 29 0.251648 1.212986 0.251648 1.212986 0.633801 0.570028 [1, 2, 3] 0.000041 False dummy_constant 30 0.870187 0.570136 0.870187 0.570136 0.181238 0.141958 [1, 2, 3] 0.000041 False dummy_constant 31 1.041686 0.084861 1.041686 0.084861 0.065616 0.465764 [1, 2, 3] 0.000039 False dummy_constant 32 0.620084 0.827714 0.620084 0.827714 0.134664 0.121817 [1, 2, 3] 0.000042 False dummy_constant In\u00a0[4]: Copied! <pre>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\ntheta = np.linspace(0, np.pi / 2)\nr = np.sqrt(1 + 0.1 * np.cos(16 * theta))\nx_1 = r * np.sin(theta)\nx_2_lower = r * np.cos(theta)\nx_2_upper = (0.5 - (x_1 - 0.5) ** 2) ** 0.5 + 0.5\n\nz = np.zeros_like(x_1)\n\n# ax2.plot(x_1, x_2_lower,'r')\nax.fill_between(x_1, z, x_2_lower, fc=\"white\")\ncircle = plt.Circle(\n    (0.5, 0.5), 0.5 ** 0.5, color=\"r\", alpha=0.25, zorder=0, label=\"Valid Region\"\n)\nax.add_patch(circle)\nhistory = pd.concat(\n    [X.data, tnk_vocs.feasibility_data(X.data)], axis=1, ignore_index=False\n)\n\n\nax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")\nax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")\n\nax.set_xlim(0, 3.14)\nax.set_ylim(0, 3.14)\nax.set_xlabel(\"x1\")\nax.set_ylabel(\"x2\")\nax.set_aspect(\"equal\")\n</pre> import matplotlib.pyplot as plt  fig, ax = plt.subplots()  theta = np.linspace(0, np.pi / 2) r = np.sqrt(1 + 0.1 * np.cos(16 * theta)) x_1 = r * np.sin(theta) x_2_lower = r * np.cos(theta) x_2_upper = (0.5 - (x_1 - 0.5) ** 2) ** 0.5 + 0.5  z = np.zeros_like(x_1)  # ax2.plot(x_1, x_2_lower,'r') ax.fill_between(x_1, z, x_2_lower, fc=\"white\") circle = plt.Circle(     (0.5, 0.5), 0.5 ** 0.5, color=\"r\", alpha=0.25, zorder=0, label=\"Valid Region\" ) ax.add_patch(circle) history = pd.concat(     [X.data, tnk_vocs.feasibility_data(X.data)], axis=1, ignore_index=False )   ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\") ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")  ax.set_xlim(0, 3.14) ax.set_ylim(0, 3.14) ax.set_xlabel(\"x1\") ax.set_ylabel(\"x2\") ax.set_aspect(\"equal\") In\u00a0[5]: Copied! <pre>ax = history.plot(\"x1\", \"x2\")\nax.set_ylim(0, 3.14)\nax.set_xlim(0, 3.14)\nax.set_aspect(\"equal\")\n</pre> ax = history.plot(\"x1\", \"x2\") ax.set_ylim(0, 3.14) ax.set_xlim(0, 3.14) ax.set_aspect(\"equal\") In\u00a0[6]: Copied! <pre># plot the acquisition function\nfrom xopt.generators.bayesian.objectives import feasibility\n\nbounds = generator.vocs.bounds\nmodel = generator.model\n\n# create mesh\nn = 200\nx = torch.linspace(*bounds.T[0], n)\ny = torch.linspace(*bounds.T[1], n)\nxx, yy = torch.meshgrid(x, y)\npts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()\n\nacq_func = generator.get_acquisition(model)\nwith torch.no_grad():\n    acq_pts = pts.unsqueeze(1)\n    acq = acq_func(acq_pts)\n\n    fig, ax = plt.subplots()\n    c = ax.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")\n    fig.colorbar(c)\n    ax.set_title(\"Acquisition function\")\n\n    ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")\n    ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")\n\n    ax.plot(*history[[\"x1\", \"x2\"]].to_numpy()[-1].T, \"+\")\n\n    feas = feasibility(pts.unsqueeze(1), model, tnk_vocs).flatten()\n\n    fig2, ax2 = plt.subplots()\n    c = ax2.pcolor(xx, yy, feas.reshape(n, n))\n    fig2.colorbar(c)\n    ax2.set_title(\"Feasible Region\")\n\ncandidate = generator.generate(1)\nprint(candidate[[\"x1\", \"x2\"]].to_numpy())\nax.plot(*candidate[[\"x1\", \"x2\"]].to_numpy()[0], \"o\")\n</pre> # plot the acquisition function from xopt.generators.bayesian.objectives import feasibility  bounds = generator.vocs.bounds model = generator.model  # create mesh n = 200 x = torch.linspace(*bounds.T[0], n) y = torch.linspace(*bounds.T[1], n) xx, yy = torch.meshgrid(x, y) pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()  acq_func = generator.get_acquisition(model) with torch.no_grad():     acq_pts = pts.unsqueeze(1)     acq = acq_func(acq_pts)      fig, ax = plt.subplots()     c = ax.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")     fig.colorbar(c)     ax.set_title(\"Acquisition function\")      ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")     ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")      ax.plot(*history[[\"x1\", \"x2\"]].to_numpy()[-1].T, \"+\")      feas = feasibility(pts.unsqueeze(1), model, tnk_vocs).flatten()      fig2, ax2 = plt.subplots()     c = ax2.pcolor(xx, yy, feas.reshape(n, n))     fig2.colorbar(c)     ax2.set_title(\"Feasible Region\")  candidate = generator.generate(1) print(candidate[[\"x1\", \"x2\"]].to_numpy()) ax.plot(*candidate[[\"x1\", \"x2\"]].to_numpy()[0], \"o\") <pre>[[0.06616396 1.03984191]]\n</pre> Out[6]: <pre>[&lt;matplotlib.lines.Line2D at 0x7f2a8c53daf0&gt;]</pre> In\u00a0[7]: Copied! <pre>%%time\ncandidate = generator.generate(1)\n</pre> %%time candidate = generator.generate(1) <pre>CPU times: user 2.16 s, sys: 47 ms, total: 2.21 s\nWall time: 1.11 s\n</pre>"},{"location":"examples/multi_objective_bayes_opt/mobo/#multi-objective-bayesian-optimization","title":"Multi-objective Bayesian Optimization\u00b6","text":"<p>TNK function $n=2$ variables: $x_i \\in [0, \\pi], i=1,2$</p> <p>Objectives:</p> <ul> <li>$f_i(x) = x_i$</li> </ul> <p>Constraints:</p> <ul> <li>$g_1(x) = -x_1^2 -x_2^2 + 1 + 0.1 \\cos\\left(16 \\arctan \\frac{x_1}{x_2}\\right) \\le 0$</li> <li>$g_2(x) = (x_1 - 1/2)^2 + (x_2-1/2)^2 \\le 0.5$</li> </ul>"},{"location":"examples/multi_objective_bayes_opt/mobo/#plot-results","title":"plot results\u00b6","text":""},{"location":"examples/multi_objective_bayes_opt/mobo/#plot-path-through-input-space","title":"Plot path through input space\u00b6","text":""},{"location":"examples/multi_objective_bayes_opt/mobo_from_yaml/","title":"Multi-objective Bayesian Optimization","text":"In\u00a0[1]: Copied! <pre>import os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nNUM_STEPS = 2 if SMOKE_TEST else 50\n\n# Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport torch\nfrom xopt import Xopt\nimport yaml\n\nYAML = \"\"\"\nxopt: {}\ngenerator:\n    name: mobo\n    reference_point: {y1: 1.5, y2: 1.5}\n\nevaluator:\n    function: xopt.resources.test_functions.tnk.evaluate_TNK\n\nvocs:\n    variables:\n        x1: [0, 3.14159]\n        x2: [0, 3.14159]\n    objectives: {y1: MINIMIZE, y2: MINIMIZE}\n    constraints:\n        c1: [GREATER_THAN, 0]\n        c2: [LESS_THAN, 0.5]\n    constants: {a: dummy_constant}\n\n\"\"\"\n</pre> import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") NUM_STEPS = 2 if SMOKE_TEST else 50  # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import torch from xopt import Xopt import yaml  YAML = \"\"\" xopt: {} generator:     name: mobo     reference_point: {y1: 1.5, y2: 1.5}  evaluator:     function: xopt.resources.test_functions.tnk.evaluate_TNK  vocs:     variables:         x1: [0, 3.14159]         x2: [0, 3.14159]     objectives: {y1: MINIMIZE, y2: MINIMIZE}     constraints:         c1: [GREATER_THAN, 0]         c2: [LESS_THAN, 0.5]     constants: {a: dummy_constant}  \"\"\" In\u00a0[2]: Copied! <pre>X = Xopt(config=yaml.safe_load(YAML))\n\n# for testing purposes only\nif SMOKE_TEST:\n    X.generator.numerical_optimizer.n_restarts = 1\n    X.generator.n_monte_carlo_samples = 1\n\nX.random_evaluate(5)\nfor i in range(NUM_STEPS):\n    print(i)\n    X.step()\n</pre> X = Xopt(config=yaml.safe_load(YAML))  # for testing purposes only if SMOKE_TEST:     X.generator.numerical_optimizer.n_restarts = 1     X.generator.n_monte_carlo_samples = 1  X.random_evaluate(5) for i in range(NUM_STEPS):     print(i)     X.step() <pre>0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n</pre> In\u00a0[3]: Copied! <pre>X.generator.data\n</pre> X.generator.data Out[3]: x1 x2 a y1 y2 c1 c2 some_array xopt_runtime xopt_error 1 0.281738 0.042924 dummy_constant 0.281738 0.042924 -0.843767 0.256557 [1, 2, 3] 0.000061 False 2 1.056567 0.783702 dummy_constant 1.056567 0.783702 0.801164 0.390253 [1, 2, 3] 0.000011 False 3 1.616094 2.809595 dummy_constant 1.616094 2.809595 9.553335 6.579894 [1, 2, 3] 0.000009 False 4 0.361592 2.944434 dummy_constant 0.361592 2.944434 7.837931 5.994414 [1, 2, 3] 0.000009 False 5 1.586624 1.309544 dummy_constant 1.586624 1.309544 3.227814 1.836114 [1, 2, 3] 0.000008 False 6 0.113953 0.450641 dummy_constant 0.113953 0.450641 -0.715804 0.151469 [1, 2, 3] 0.000040 False 7 0.377477 0.790668 dummy_constant 0.377477 0.790668 -0.298841 0.099499 [1, 2, 3] 0.000043 False 8 0.786602 0.006523 dummy_constant 0.786602 0.006523 -0.480337 0.325660 [1, 2, 3] 0.000039 False 9 0.573023 0.933118 dummy_constant 0.573023 0.933118 0.280841 0.192923 [1, 2, 3] 0.000040 False 10 1.014712 0.501125 dummy_constant 1.014712 0.501125 0.231565 0.264930 [1, 2, 3] 0.000043 False 11 1.080020 0.222445 dummy_constant 1.080020 0.222445 0.315339 0.413460 [1, 2, 3] 0.000043 False 12 0.997951 0.039602 dummy_constant 0.997951 0.039602 -0.083056 0.459922 [1, 2, 3] 0.000042 False 13 0.063657 0.887809 dummy_constant 0.063657 0.887809 -0.249024 0.340791 [1, 2, 3] 0.000042 False 14 1.033740 0.073634 dummy_constant 1.033740 0.073634 0.032077 0.466666 [1, 2, 3] 0.000041 False 15 0.793336 0.285323 dummy_constant 0.793336 0.285323 -0.361743 0.132132 [1, 2, 3] 0.000039 False 16 0.137010 1.015037 dummy_constant 0.137010 1.015037 0.103531 0.397024 [1, 2, 3] 0.000040 False 17 0.244055 0.857676 dummy_constant 0.244055 0.857676 -0.177504 0.193440 [1, 2, 3] 0.000042 False 18 0.793193 0.726891 dummy_constant 0.793193 0.726891 0.080876 0.137442 [1, 2, 3] 0.000040 False 19 0.053760 1.012952 dummy_constant 0.053760 1.012952 -0.037158 0.462250 [1, 2, 3] 0.000042 False 20 0.204494 0.786930 dummy_constant 0.204494 0.786930 -0.278840 0.169652 [1, 2, 3] 0.000041 False 21 0.953049 0.090709 dummy_constant 0.953049 0.090709 -0.088720 0.372773 [1, 2, 3] 0.000043 False 22 0.049353 0.481791 dummy_constant 0.049353 0.481791 -0.759196 0.203414 [1, 2, 3] 0.000042 False 23 0.253543 0.871860 dummy_constant 0.253543 0.871860 -0.157244 0.199021 [1, 2, 3] 0.000039 False 24 0.453667 0.893342 dummy_constant 0.453667 0.893342 -0.029068 0.156865 [1, 2, 3] 0.000041 False 25 0.921396 0.518010 dummy_constant 0.921396 0.518010 0.150712 0.177899 [1, 2, 3] 0.000042 False 26 0.189352 0.286648 dummy_constant 0.189352 0.286648 -0.782335 0.142021 [1, 2, 3] 0.000058 False 27 0.643186 0.813731 dummy_constant 0.643186 0.813731 0.104793 0.118930 [1, 2, 3] 0.000041 False 28 0.547654 0.853948 dummy_constant 0.547654 0.853948 0.124662 0.127550 [1, 2, 3] 0.000039 False 29 0.703919 0.743104 dummy_constant 0.703919 0.743104 -0.043059 0.100682 [1, 2, 3] 0.000039 False 30 0.809940 0.408089 dummy_constant 0.809940 0.408089 -0.215147 0.104510 [1, 2, 3] 0.000041 False 31 0.322683 0.961170 dummy_constant 0.322683 0.961170 -0.017311 0.244120 [1, 2, 3] 0.000039 False 32 0.670113 0.219115 dummy_constant 0.670113 0.219115 -0.536661 0.107835 [1, 2, 3] 0.000039 False 33 0.672355 0.778412 dummy_constant 0.672355 0.778412 0.018750 0.107220 [1, 2, 3] 0.000039 False 34 1.333727 0.078842 dummy_constant 1.333727 0.078842 0.726447 0.872474 [1, 2, 3] 0.000043 False 35 0.067736 1.116269 dummy_constant 0.067736 1.116269 0.194089 0.566639 [1, 2, 3] 0.000039 False 36 0.059772 1.039854 dummy_constant 0.059772 1.039854 0.024183 0.485243 [1, 2, 3] 0.000042 False 37 0.521843 0.718851 dummy_constant 0.521843 0.718851 -0.129661 0.048373 [1, 2, 3] 0.000040 False 38 0.734912 0.160064 dummy_constant 0.734912 0.160064 -0.338448 0.170740 [1, 2, 3] 0.000041 False 39 0.852261 0.148179 dummy_constant 0.852261 0.148179 -0.159099 0.247866 [1, 2, 3] 0.000041 False 40 0.971396 0.273335 dummy_constant 0.971396 0.273335 0.050131 0.273591 [1, 2, 3] 0.000041 False 41 0.360726 0.521097 dummy_constant 0.360726 0.521097 -0.501779 0.019842 [1, 2, 3] 0.000042 False 42 0.347242 0.513598 dummy_constant 0.347242 0.513598 -0.516020 0.023520 [1, 2, 3] 0.000041 False 43 0.061959 0.684007 dummy_constant 0.061959 0.684007 -0.540804 0.225738 [1, 2, 3] 0.000040 False 44 1.007599 0.148683 dummy_constant 1.007599 0.148683 0.107211 0.381081 [1, 2, 3] 0.000039 False 45 0.093625 1.386005 dummy_constant 0.093625 1.386005 0.882569 0.950145 [1, 2, 3] 0.000039 False 46 0.832132 0.602427 dummy_constant 0.832132 0.602427 0.137829 0.120803 [1, 2, 3] 0.000040 False 47 0.076339 1.055113 dummy_constant 0.076339 1.055113 0.078756 0.487639 [1, 2, 3] 0.000046 False 48 0.657335 0.311399 dummy_constant 0.657335 0.311399 -0.540941 0.060324 [1, 2, 3] 0.000040 False 49 0.357569 0.664471 dummy_constant 0.357569 0.664471 -0.426131 0.047337 [1, 2, 3] 0.000039 False 50 0.280157 0.911649 dummy_constant 0.280157 0.911649 -0.096203 0.217786 [1, 2, 3] 0.000038 False 51 0.707603 0.355050 dummy_constant 0.707603 0.355050 -0.413379 0.064110 [1, 2, 3] 0.000040 False 52 0.765060 0.671525 dummy_constant 0.765060 0.671525 -0.014335 0.099678 [1, 2, 3] 0.000039 False 53 1.235464 0.058399 dummy_constant 1.235464 0.058399 0.457005 0.735919 [1, 2, 3] 0.000041 False 54 0.411001 0.933788 dummy_constant 0.411001 0.933788 -0.053026 0.196093 [1, 2, 3] 0.000041 False 55 0.237145 0.570946 dummy_constant 0.237145 0.570946 -0.717771 0.074126 [1, 2, 3] 0.000042 False In\u00a0[4]: Copied! <pre>import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nfig, ax = plt.subplots()\n\ntheta = np.linspace(0, np.pi / 2)\nr = np.sqrt(1 + 0.1 * np.cos(16 * theta))\nx_1 = r * np.sin(theta)\nx_2_lower = r * np.cos(theta)\nx_2_upper = (0.5 - (x_1 - 0.5) ** 2) ** 0.5 + 0.5\n\nz = np.zeros_like(x_1)\n\n# ax2.plot(x_1, x_2_lower,'r')\nax.fill_between(x_1, z, x_2_lower, fc=\"white\")\ncircle = plt.Circle(\n    (0.5, 0.5), 0.5 ** 0.5, color=\"r\", alpha=0.25, zorder=0, label=\"Valid Region\"\n)\nax.add_patch(circle)\nhistory = pd.concat(\n    [X.data, X.vocs.feasibility_data(X.data)], axis=1, ignore_index=False\n)\n\n\nax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")\nax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")\n\nax.set_xlim(0, 3.14)\nax.set_ylim(0, 3.14)\nax.set_xlabel(\"x1\")\nax.set_ylabel(\"x2\")\nax.set_aspect(\"equal\")\n</pre> import matplotlib.pyplot as plt import numpy as np import pandas as pd  fig, ax = plt.subplots()  theta = np.linspace(0, np.pi / 2) r = np.sqrt(1 + 0.1 * np.cos(16 * theta)) x_1 = r * np.sin(theta) x_2_lower = r * np.cos(theta) x_2_upper = (0.5 - (x_1 - 0.5) ** 2) ** 0.5 + 0.5  z = np.zeros_like(x_1)  # ax2.plot(x_1, x_2_lower,'r') ax.fill_between(x_1, z, x_2_lower, fc=\"white\") circle = plt.Circle(     (0.5, 0.5), 0.5 ** 0.5, color=\"r\", alpha=0.25, zorder=0, label=\"Valid Region\" ) ax.add_patch(circle) history = pd.concat(     [X.data, X.vocs.feasibility_data(X.data)], axis=1, ignore_index=False )   ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\") ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")  ax.set_xlim(0, 3.14) ax.set_ylim(0, 3.14) ax.set_xlabel(\"x1\") ax.set_ylabel(\"x2\") ax.set_aspect(\"equal\") In\u00a0[5]: Copied! <pre>ax = history.plot(\"x1\", \"x2\")\nax.set_ylim(0, 3.14)\nax.set_xlim(0, 3.14)\nax.set_aspect(\"equal\")\n</pre> ax = history.plot(\"x1\", \"x2\") ax.set_ylim(0, 3.14) ax.set_xlim(0, 3.14) ax.set_aspect(\"equal\") In\u00a0[6]: Copied! <pre># plot the acquisition function\nfrom xopt.generators.bayesian.objectives import feasibility\n\nbounds = X.generator.vocs.bounds\nmodel = X.generator.model\n\n# create mesh\nn = 100\nx = torch.linspace(*bounds.T[0], n)\ny = torch.linspace(*bounds.T[1], n)\nxx, yy = torch.meshgrid(x, y)\npts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()\n\nacq_func = X.generator.get_acquisition(model)\nwith torch.no_grad():\n    acq_pts = pts.unsqueeze(1)\n    acq = acq_func(acq_pts)\n\n    fig, ax = plt.subplots(figsize=(8,8))\n    c = ax.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")\n    fig.colorbar(c)\n    ax.set_title(\"Acquisition function\")\n\n    ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")\n    ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")\n\n    ax.plot(*history[[\"x1\", \"x2\"]].to_numpy()[-1].T, \"+\")\n\n    feas = feasibility(pts.unsqueeze(1), model, X.vocs).flatten()\n\n    fig2, ax2 = plt.subplots(figsize=(8,8))\n    c = ax2.pcolor(xx, yy, feas.reshape(n, n))\n    fig2.colorbar(c)\n    ax2.set_title(\"Feasible Region\")\n\ncandidate = X.generator.generate(1)\nprint(candidate[[\"x1\", \"x2\"]].to_numpy())\nax.plot(*candidate[[\"x1\", \"x2\"]].to_numpy()[0], \"o\")\n</pre> # plot the acquisition function from xopt.generators.bayesian.objectives import feasibility  bounds = X.generator.vocs.bounds model = X.generator.model  # create mesh n = 100 x = torch.linspace(*bounds.T[0], n) y = torch.linspace(*bounds.T[1], n) xx, yy = torch.meshgrid(x, y) pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()  acq_func = X.generator.get_acquisition(model) with torch.no_grad():     acq_pts = pts.unsqueeze(1)     acq = acq_func(acq_pts)      fig, ax = plt.subplots(figsize=(8,8))     c = ax.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")     fig.colorbar(c)     ax.set_title(\"Acquisition function\")      ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")     ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")      ax.plot(*history[[\"x1\", \"x2\"]].to_numpy()[-1].T, \"+\")      feas = feasibility(pts.unsqueeze(1), model, X.vocs).flatten()      fig2, ax2 = plt.subplots(figsize=(8,8))     c = ax2.pcolor(xx, yy, feas.reshape(n, n))     fig2.colorbar(c)     ax2.set_title(\"Feasible Region\")  candidate = X.generator.generate(1) print(candidate[[\"x1\", \"x2\"]].to_numpy()) ax.plot(*candidate[[\"x1\", \"x2\"]].to_numpy()[0], \"o\") <pre>[[0.49905304 0.87973596]]\n</pre> Out[6]: <pre>[&lt;matplotlib.lines.Line2D at 0x7f778aadd670&gt;]</pre>"},{"location":"examples/multi_objective_bayes_opt/mobo_from_yaml/#multi-objective-bayesian-optimization","title":"Multi-objective Bayesian Optimization\u00b6","text":"<p>TNK function $n=2$ variables: $x_i \\in [0, \\pi], i=1,2$</p> <p>Objectives:</p> <ul> <li>$f_i(x) = x_i$</li> </ul> <p>Constraints:</p> <ul> <li>$g_1(x) = -x_1^2 -x_2^2 + 1 + 0.1 \\cos\\left(16 \\arctan \\frac{x_1}{x_2}\\right) \\le 0$</li> <li>$g_2(x) = (x_1 - 1/2)^2 + (x_2-1/2)^2 \\le 0.5$</li> </ul>"},{"location":"examples/multi_objective_bayes_opt/mobo_from_yaml/#plot-results","title":"plot results\u00b6","text":""},{"location":"examples/multi_objective_bayes_opt/mobo_from_yaml/#plot-path-through-input-space","title":"Plot path through input space\u00b6","text":""},{"location":"examples/multi_objective_bayes_opt/multi_fidelity_mobo/","title":"Multi-fidelity Multi-objective Bayesian Optimization","text":"In\u00a0[1]: Copied! <pre># set values if testing\nimport os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nN_MC_SAMPLES = 1 if SMOKE_TEST else 128\nNUM_RESTARTS = 1 if SMOKE_TEST else 20\nBUDGET = 0.02 if SMOKE_TEST else 10\n\n# Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport numpy as np\nimport torch\n\nfrom xopt import Xopt, Evaluator\nfrom xopt.generators.bayesian import MultiFidelityGenerator\nfrom xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs\n\nevaluator = Evaluator(function=evaluate_TNK)\nprint(tnk_vocs.dict())\n</pre> # set values if testing import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") N_MC_SAMPLES = 1 if SMOKE_TEST else 128 NUM_RESTARTS = 1 if SMOKE_TEST else 20 BUDGET = 0.02 if SMOKE_TEST else 10  # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import pandas as pd import numpy as np import torch  from xopt import Xopt, Evaluator from xopt.generators.bayesian import MultiFidelityGenerator from xopt.resources.test_functions.tnk import evaluate_TNK, tnk_vocs  evaluator = Evaluator(function=evaluate_TNK) print(tnk_vocs.dict()) <pre>{'variables': {'x1': [0.0, 3.14159], 'x2': [0.0, 3.14159]}, 'constraints': {'c1': ['GREATER_THAN', 0.0], 'c2': ['LESS_THAN', 0.5]}, 'objectives': {'y1': 'MINIMIZE', 'y2': 'MINIMIZE'}, 'constants': {'a': 'dummy_constant'}, 'observables': []}\n</pre> In\u00a0[2]: Copied! <pre>from copy import deepcopy\nmy_vocs = deepcopy(tnk_vocs)\nmy_vocs.constraints = {}\ngenerator = MultiFidelityGenerator(vocs=my_vocs, reference_point = {\"y1\":1.5,\"y2\":1.5})\n\n# set cost function according to approximate scaling of laser plasma accelerator\n# problem, see https://journals.aps.org/prresearch/abstract/10.1103/PhysRevResearch.5.013063\ngenerator.cost_function = lambda s: s**3.5\ngenerator.numerical_optimizer.n_restarts = NUM_RESTARTS\ngenerator.n_monte_carlo_samples = N_MC_SAMPLES\n\nX = Xopt(generator=generator, evaluator=evaluator, vocs=my_vocs)\n\n# evaluate at some explicit initial points\nX.evaluate_data(pd.DataFrame({\"x1\":[1.0, 0.75],\"x2\":[0.75, 1.0],\"s\":[0.0,0.1]}))\n\nX\n</pre> from copy import deepcopy my_vocs = deepcopy(tnk_vocs) my_vocs.constraints = {} generator = MultiFidelityGenerator(vocs=my_vocs, reference_point = {\"y1\":1.5,\"y2\":1.5})  # set cost function according to approximate scaling of laser plasma accelerator # problem, see https://journals.aps.org/prresearch/abstract/10.1103/PhysRevResearch.5.013063 generator.cost_function = lambda s: s**3.5 generator.numerical_optimizer.n_restarts = NUM_RESTARTS generator.n_monte_carlo_samples = N_MC_SAMPLES  X = Xopt(generator=generator, evaluator=evaluator, vocs=my_vocs)  # evaluate at some explicit initial points X.evaluate_data(pd.DataFrame({\"x1\":[1.0, 0.75],\"x2\":[0.75, 1.0],\"s\":[0.0,0.1]}))  X Out[2]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 2\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: null}\ngenerator:\n  name: multi_fidelity\n  model: null\n  turbo_controller: null\n  use_cuda: false\n  model_constructor:\n    name: standard\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n    trainable_mean_keys: []\n  numerical_optimizer: {name: LBFGS, n_raw_samples: 20, n_restarts: 20, max_iter: 2000}\n  max_travel_distances: null\n  n_monte_carlo_samples: 128\n  reference_point: {y1: 1.5, y2: 1.5, s: 0.0}\n  fidelity_parameter: s\n  cost_function: __main__.&lt;lambda&gt;\nevaluator:\n  function: xopt.resources.test_functions.tnk.evaluate_TNK\n  max_workers: 1\n  function_kwargs: {sleep: 0, random_sleep: 0, raise_probability: 0}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 3.14159]\n    x2: [0.0, 3.14159]\n    s: [0, 1]\n  constraints: {}\n  objectives: {y1: MINIMIZE, y2: MINIMIZE, s: MAXIMIZE}\n  constants: {a: dummy_constant}\n  observables: []\n</pre> In\u00a0[3]: Copied! <pre>budget = BUDGET\nwhile X.generator.calculate_total_cost() &lt; budget:\n    X.step()\n    print(f\"n_samples: {len(X.data)} \"\n          f\"budget used: {X.generator.calculate_total_cost():.4} \"\n          f\"hypervolume: {X.generator.calculate_hypervolume():.4}\")\n</pre> budget = BUDGET while X.generator.calculate_total_cost() &lt; budget:     X.step()     print(f\"n_samples: {len(X.data)} \"           f\"budget used: {X.generator.calculate_total_cost():.4} \"           f\"hypervolume: {X.generator.calculate_hypervolume():.4}\") <pre>n_samples: 3 budget used: 0.01034 hypervolume: 0.04498\nn_samples: 4 budget used: 0.0114 hypervolume: 0.04498\nn_samples: 5 budget used: 0.0214 hypervolume: 0.278\nn_samples: 6 budget used: 0.03146 hypervolume: 0.5672\nn_samples: 7 budget used: 0.05762 hypervolume: 0.7945\nn_samples: 8 budget used: 0.1043 hypervolume: 0.9102\nn_samples: 9 budget used: 0.1143 hypervolume: 0.9102\nn_samples: 10 budget used: 0.2024 hypervolume: 1.124\nn_samples: 11 budget used: 0.3927 hypervolume: 1.4\nn_samples: 12 budget used: 0.8066 hypervolume: 1.749\nn_samples: 13 budget used: 1.678 hypervolume: 2.163\nn_samples: 14 budget used: 2.678 hypervolume: 2.219\nn_samples: 15 budget used: 3.678 hypervolume: 2.239\nn_samples: 16 budget used: 3.77 hypervolume: 2.239\nn_samples: 17 budget used: 3.898 hypervolume: 2.239\nn_samples: 18 budget used: 4.898 hypervolume: 2.25\nn_samples: 19 budget used: 4.964 hypervolume: 2.25\nn_samples: 20 budget used: 5.964 hypervolume: 2.25\nn_samples: 21 budget used: 6.964 hypervolume: 2.25\nn_samples: 22 budget used: 7.964 hypervolume: 2.25\nn_samples: 23 budget used: 7.968 hypervolume: 2.25\nn_samples: 24 budget used: 7.991 hypervolume: 2.25\nn_samples: 25 budget used: 8.0 hypervolume: 2.25\nn_samples: 26 budget used: 8.849 hypervolume: 2.25\nn_samples: 27 budget used: 9.662 hypervolume: 2.25\nn_samples: 28 budget used: 9.662 hypervolume: 2.25\nn_samples: 29 budget used: 9.932 hypervolume: 2.25\nn_samples: 30 budget used: 9.939 hypervolume: 2.25\nn_samples: 31 budget used: 10.05 hypervolume: 2.25\n</pre> In\u00a0[4]: Copied! <pre>X.data\n</pre> X.data Out[4]: x1 x2 s y1 y2 c1 c2 some_array xopt_runtime xopt_error a 1 1.000000 0.750000 0.000000 1.000000 0.750000 0.626888 0.312500 [1, 2, 3] 0.000048 False NaN 2 0.750000 1.000000 0.100000 0.750000 1.000000 0.626888 0.312500 [1, 2, 3] 0.000011 False NaN 3 0.215439 1.472264 0.268420 0.215439 1.472264 1.282432 1.026273 [1, 2, 3] 0.000037 False dummy_constant 4 0.399186 2.911031 0.141286 0.399186 2.911031 7.690711 5.823234 [1, 2, 3] 0.000040 False dummy_constant 5 0.000000 0.809157 0.268270 0.000000 0.809157 -0.445265 0.345578 [1, 2, 3] 0.000040 False dummy_constant 6 0.000000 0.092780 0.268727 0.000000 0.092780 -1.091392 0.415828 [1, 2, 3] 0.000036 False dummy_constant 7 0.000000 0.000000 0.353111 0.000000 0.000000 -1.100000 0.500000 [1, 2, 3] 0.000039 False dummy_constant 8 0.283958 0.000000 0.416517 0.283958 0.000000 -1.019368 0.296674 [1, 2, 3] 0.000040 False dummy_constant 9 3.140453 0.000000 0.268270 3.140453 0.000000 8.762442 7.221990 [1, 2, 3] 0.000037 False dummy_constant 10 0.000000 0.000000 0.499687 0.000000 0.000000 -1.100000 0.500000 [1, 2, 3] 0.000040 False dummy_constant 11 0.000000 0.000000 0.622444 0.000000 0.000000 -1.100000 0.500000 [1, 2, 3] 0.000040 False dummy_constant 12 0.000000 0.000000 0.777226 0.000000 0.000000 -1.100000 0.500000 [1, 2, 3] 0.000040 False dummy_constant 13 0.000000 0.000000 0.961353 0.000000 0.000000 -1.100000 0.500000 [1, 2, 3] 0.000039 False dummy_constant 14 0.000000 0.532698 1.000000 0.000000 0.532698 -0.816232 0.251069 [1, 2, 3] 0.000038 False dummy_constant 15 0.519467 0.000000 1.000000 0.519467 0.000000 -0.830155 0.250379 [1, 2, 3] 0.000039 False dummy_constant 16 0.000000 0.484618 0.505587 0.000000 0.484618 -0.865146 0.250237 [1, 2, 3] 0.000042 False dummy_constant 17 0.900601 0.000000 0.556434 0.900601 0.000000 -0.288919 0.410481 [1, 2, 3] 0.000040 False dummy_constant 18 0.000000 0.000000 1.000000 0.000000 0.000000 -1.100000 0.500000 [1, 2, 3] 0.000041 False dummy_constant 19 2.977769 1.272948 0.460238 2.977769 1.272948 9.389126 6.736787 [1, 2, 3] 0.000039 False dummy_constant 20 0.307589 0.319884 1.000000 0.307589 0.319884 -0.898189 0.069464 [1, 2, 3] 0.000064 False dummy_constant 21 0.000000 1.117495 1.000000 0.000000 1.117495 0.148796 0.631300 [1, 2, 3] 0.000040 False dummy_constant 22 1.133128 0.000000 1.000000 1.133128 0.000000 0.183980 0.650851 [1, 2, 3] 0.000041 False dummy_constant 23 2.723703 1.492472 0.194917 2.723703 1.492472 8.662597 5.929858 [1, 2, 3] 0.000041 False dummy_constant 24 2.976194 0.670924 0.340490 2.976194 0.670924 8.399743 6.160754 [1, 2, 3] 0.000041 False dummy_constant 25 0.854149 0.000000 0.263056 0.854149 0.000000 -0.370430 0.375421 [1, 2, 3] 0.000041 False dummy_constant 26 1.926431 0.333354 0.954464 1.926431 0.333354 2.914363 2.062475 [1, 2, 3] 0.000041 False dummy_constant 27 0.164881 0.118438 0.942297 0.164881 0.118438 -0.873116 0.257894 [1, 2, 3] 0.000041 False dummy_constant 28 3.122533 1.009247 0.073618 3.122533 1.009247 9.740249 7.137013 [1, 2, 3] 0.000040 False dummy_constant 29 1.631240 0.145665 0.688215 1.631240 0.145665 1.667631 1.405258 [1, 2, 3] 0.000041 False dummy_constant 30 1.954394 2.579675 0.241212 1.954394 2.579675 9.532636 6.440310 [1, 2, 3] 0.000041 False dummy_constant 31 1.335671 2.578614 0.530520 1.335671 2.578614 7.412699 5.018980 [1, 2, 3] 0.000039 False dummy_constant In\u00a0[5]: Copied! <pre>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\ntheta = np.linspace(0, np.pi / 2)\nr = np.sqrt(1 + 0.1 * np.cos(16 * theta))\nx_1 = r * np.sin(theta)\nx_2_lower = r * np.cos(theta)\nx_2_upper = (0.5 - (x_1 - 0.5) ** 2) ** 0.5 + 0.5\n\nz = np.zeros_like(x_1)\n\n# ax2.plot(x_1, x_2_lower,'r')\nax.fill_between(x_1, z, x_2_lower, fc=\"white\")\ncircle = plt.Circle(\n    (0.5, 0.5), 0.5 ** 0.5, color=\"r\", alpha=0.25, zorder=0, label=\"Valid Region\"\n)\nax.add_patch(circle)\nhistory = pd.concat(\n    [X.data, tnk_vocs.feasibility_data(X.data)], axis=1, ignore_index=False\n)\n\nax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")\nax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")\n\nax.set_xlim(0, 3.14)\nax.set_ylim(0, 3.14)\nax.set_xlabel(\"x1\")\nax.set_ylabel(\"x2\")\nax.set_aspect(\"equal\")\n</pre> import matplotlib.pyplot as plt  fig, ax = plt.subplots()  theta = np.linspace(0, np.pi / 2) r = np.sqrt(1 + 0.1 * np.cos(16 * theta)) x_1 = r * np.sin(theta) x_2_lower = r * np.cos(theta) x_2_upper = (0.5 - (x_1 - 0.5) ** 2) ** 0.5 + 0.5  z = np.zeros_like(x_1)  # ax2.plot(x_1, x_2_lower,'r') ax.fill_between(x_1, z, x_2_lower, fc=\"white\") circle = plt.Circle(     (0.5, 0.5), 0.5 ** 0.5, color=\"r\", alpha=0.25, zorder=0, label=\"Valid Region\" ) ax.add_patch(circle) history = pd.concat(     [X.data, tnk_vocs.feasibility_data(X.data)], axis=1, ignore_index=False )  ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\") ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")  ax.set_xlim(0, 3.14) ax.set_ylim(0, 3.14) ax.set_xlabel(\"x1\") ax.set_ylabel(\"x2\") ax.set_aspect(\"equal\") In\u00a0[6]: Copied! <pre>ax = history.hist([\"x1\", \"x2\", \"s\"],bins=20)\n</pre> ax = history.hist([\"x1\", \"x2\", \"s\"],bins=20) In\u00a0[7]: Copied! <pre>history.plot(y=[\"x1\", \"x2\", \"s\"])\n</pre> history.plot(y=[\"x1\", \"x2\", \"s\"]) Out[7]: <pre>&lt;Axes: &gt;</pre> In\u00a0[8]: Copied! <pre># plot the acquisition function\nfrom xopt.generators.bayesian.objectives import feasibility\n\nbounds = generator.vocs.bounds\nmodel = generator.model\n\n# create mesh over non-fidelity parameters\nn = 100\nx = torch.linspace(*bounds.T[1], n)\ny = torch.linspace(*bounds.T[2], n)\nxx, yy = torch.meshgrid(x, y)\n\n# plot function(s) at a single fidelity parameter\nfidelities = [0.0, 0.5, 1.0]\nfor fidelity in fidelities:\n    pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()\n    pts = torch.cat((torch.ones(pts.shape[0],1)*fidelity, pts), dim=-1)\n\n    acq_func = generator.get_acquisition(model)\n    with torch.no_grad():\n        acq_pts = pts.unsqueeze(1)\n        acq = acq_func(acq_pts)\n\n        fig, ax = plt.subplots()\n        c = ax.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")\n        fig.colorbar(c)\n        ax.set_title(f\"Acquisition function - s: {fidelity}\")\n\n        ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")\n        ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")\n\n        ax.plot(*history[[\"x1\", \"x2\"]].to_numpy()[-1].T, \"+\")\n\n\ncandidate = generator.generate(1)\nprint(candidate[[\"x1\", \"x2\"]].to_numpy())\nax.plot(*candidate[[\"x1\", \"x2\"]].to_numpy()[0], \"o\")\n</pre> # plot the acquisition function from xopt.generators.bayesian.objectives import feasibility  bounds = generator.vocs.bounds model = generator.model  # create mesh over non-fidelity parameters n = 100 x = torch.linspace(*bounds.T[1], n) y = torch.linspace(*bounds.T[2], n) xx, yy = torch.meshgrid(x, y)  # plot function(s) at a single fidelity parameter fidelities = [0.0, 0.5, 1.0] for fidelity in fidelities:     pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()     pts = torch.cat((torch.ones(pts.shape[0],1)*fidelity, pts), dim=-1)      acq_func = generator.get_acquisition(model)     with torch.no_grad():         acq_pts = pts.unsqueeze(1)         acq = acq_func(acq_pts)          fig, ax = plt.subplots()         c = ax.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")         fig.colorbar(c)         ax.set_title(f\"Acquisition function - s: {fidelity}\")          ax.plot(*history[[\"x1\", \"x2\"]][history[\"feasible\"]].to_numpy().T, \".C1\")         ax.plot(*history[[\"x1\", \"x2\"]][~history[\"feasible\"]].to_numpy().T, \".C2\")          ax.plot(*history[[\"x1\", \"x2\"]].to_numpy()[-1].T, \"+\")   candidate = generator.generate(1) print(candidate[[\"x1\", \"x2\"]].to_numpy()) ax.plot(*candidate[[\"x1\", \"x2\"]].to_numpy()[0], \"o\") <pre>[[2.93638747 2.18543916]]\n</pre> Out[8]: <pre>[&lt;matplotlib.lines.Line2D at 0x7fe2304799a0&gt;]</pre> In\u00a0[9]: Copied! <pre># examine lengthscale of the first objective\nlist(model.models[0].named_parameters())\n</pre> # examine lengthscale of the first objective list(model.models[0].named_parameters()) Out[9]: <pre>[('likelihood.noise_covar.raw_noise',\n  Parameter containing:\n  tensor([-22.3317], dtype=torch.float64, requires_grad=True)),\n ('mean_module.raw_constant',\n  Parameter containing:\n  tensor(-0.1166, dtype=torch.float64, requires_grad=True)),\n ('covar_module.raw_outputscale',\n  Parameter containing:\n  tensor(-0.0486, dtype=torch.float64, requires_grad=True)),\n ('covar_module.base_kernel.raw_lengthscale',\n  Parameter containing:\n  tensor([[0.6367, 2.0964, 1.9226]], dtype=torch.float64, requires_grad=True))]</pre> In\u00a0[10]: Copied! <pre># dump results to file\nX.options.dump_file = \"results.yaml\"\nX.dump_state()\n</pre> # dump results to file X.options.dump_file = \"results.yaml\" X.dump_state() In\u00a0[10]: Copied! <pre>\n</pre>"},{"location":"examples/multi_objective_bayes_opt/multi_fidelity_mobo/#multi-fidelity-multi-objective-bayesian-optimization","title":"Multi-fidelity Multi-objective Bayesian Optimization\u00b6","text":"<p>Here we attempt to solve for the constrained Pareto front of the TNK multi-objective optimization problem using Multi-Fidelity Multi-Objective Bayesian optimization. For simplicity we assume that the objective and constraint functions at lower fidelities is exactly equal to the functions at higher fidelities (this is obviously not a requirement, although for the best results lower fidelity calculations should correlate with higher fidelity ones). The algorithm should learn this relationship and use information gathered at lower fidelities to gather samples to improve the hypervolume of the Pareto front at the maximum fidelity.</p> <p>TNK function $n=2$ variables: $x_i \\in [0, \\pi], i=1,2$</p> <p>Objectives:</p> <ul> <li>$f_i(x) = x_i$</li> </ul> <p>Constraints:</p> <ul> <li>$g_1(x) = -x_1^2 -x_2^2 + 1 + 0.1 \\cos\\left(16 \\arctan \\frac{x_1}{x_2}\\right) \\le 0$</li> <li>$g_2(x) = (x_1 - 1/2)^2 + (x_2-1/2)^2 \\le 0.5$</li> </ul>"},{"location":"examples/multi_objective_bayes_opt/multi_fidelity_mobo/#set-up-the-multi-fidelity-multi-objective-optimization-algorithm","title":"Set up the Multi-Fidelity Multi-objective optimization algorithm\u00b6","text":"<p>Here we create the Multi-Fidelity generator object which can solve both single and multi-objective optimization problems depending on the number of objectives in VOCS. We specify a cost function as a function of fidelity parameter $s=[0,1]$ as $C(s) = s^{3.5}$ as an example from a real life multi-fidelity simulation problem.</p>"},{"location":"examples/multi_objective_bayes_opt/multi_fidelity_mobo/#run-optimization-routine","title":"Run optimization routine\u00b6","text":"<p>Instead of ending the optimization routine after an explict number of samples we end optimization once a given optimization budget has been exceeded. WARNING: This will slightly exceed the given budget</p>"},{"location":"examples/multi_objective_bayes_opt/multi_fidelity_mobo/#show-results","title":"Show results\u00b6","text":""},{"location":"examples/multi_objective_bayes_opt/multi_fidelity_mobo/#plot-results","title":"Plot results\u00b6","text":"<p>Here we plot the resulting observations in input space, colored by feasibility (neglecting the fact that these data points are at varying fidelities).</p>"},{"location":"examples/multi_objective_bayes_opt/multi_fidelity_mobo/#plot-path-through-input-space","title":"Plot path through input space\u00b6","text":""},{"location":"examples/multi_objective_bayes_opt/multi_fidelity_mobo/#plot-the-acqusisition-function","title":"Plot the acqusisition function\u00b6","text":"<p>Here we plot the acquisition function at a small set of fidelities $[0, 0.5, 1.0]$.</p>"},{"location":"examples/rcds/rcds/","title":"RCDS","text":"In\u00a0[1]: Copied! <pre># If you encounter the \"Initializing libomp.dylib, but found libomp.dylib already initialized.\" error\n# Please run this cell\n\nimport os\n\nos.environ['KMP_DUPLICATE_LIB_OK']='True'\n</pre> # If you encounter the \"Initializing libomp.dylib, but found libomp.dylib already initialized.\" error # Please run this cell  import os  os.environ['KMP_DUPLICATE_LIB_OK']='True' In\u00a0[2]: Copied! <pre>import time\nimport numpy as np\nfrom xopt.generators.rcds.rcds import RCDSGenerator\nfrom xopt.vocs import VOCS\nfrom xopt.evaluator import Evaluator\nfrom xopt import Xopt\nimport pandas as pd\nfrom tqdm.auto import tqdm\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import time import numpy as np from xopt.generators.rcds.rcds import RCDSGenerator from xopt.vocs import VOCS from xopt.evaluator import Evaluator from xopt import Xopt import pandas as pd from tqdm.auto import tqdm import warnings warnings.filterwarnings(\"ignore\") In\u00a0[3]: Copied! <pre>def f_RCDS_minimize(input_dict):\n    p = []\n    for i in range(2):\n        p.append(input_dict[f'p{i}'])\n    \n    obj = np.linalg.norm(p)\n    outcome_dict = {'f': obj}\n    \n    return outcome_dict\n</pre> def f_RCDS_minimize(input_dict):     p = []     for i in range(2):         p.append(input_dict[f'p{i}'])          obj = np.linalg.norm(p)     outcome_dict = {'f': obj}          return outcome_dict In\u00a0[4]: Copied! <pre>YAML = \"\"\"\nxopt:\n    max_evaluations: 400\ngenerator:\n    name: rcds\n    x0: null\n    init_mat: null\n    noise: 0.00001\n    step: 0.01\n    tol: 0.00001\nevaluator:\n    function: __main__.f_RCDS_minimize\nvocs:\n    variables:\n        p0: [0, 1]\n        p1: [0, 1]\n    objectives:\n        f: MINIMIZE\n\"\"\"\n\nX = Xopt(YAML)\nX\n</pre> YAML = \"\"\" xopt:     max_evaluations: 400 generator:     name: rcds     x0: null     init_mat: null     noise: 0.00001     step: 0.01     tol: 0.00001 evaluator:     function: __main__.f_RCDS_minimize vocs:     variables:         p0: [0, 1]         p1: [0, 1]     objectives:         f: MINIMIZE \"\"\"  X = Xopt(YAML) X Out[4]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: 400}\ngenerator: {name: rcds, x0: null, init_mat: null, noise: 1.0e-05, step: 0.01, tol: 1.0e-05}\nevaluator:\n  function: __main__.f_RCDS_minimize\n  max_workers: 1\n  function_kwargs: {}\n  vectorized: false\nvocs:\n  variables:\n    p0: [0.0, 1.0]\n    p1: [0.0, 1.0]\n  constraints: {}\n  objectives: {f: MINIMIZE}\n  constants: {}\n  observables: []\n</pre> In\u00a0[5]: Copied! <pre>X.run()\n</pre> X.run() <p>Now you can go directly to the Visualization section and check out the results.</p> In\u00a0[6]: Copied! <pre>n_var = 2\n</pre> n_var = 2 In\u00a0[7]: Copied! <pre>variables = {}\nfor i in range(n_var):\n    variables[f'p{i}'] = [0, 1]\n\nvocs = VOCS(\n    variables=variables,\n    objectives={'f': 'MINIMIZE'},\n)\n</pre> variables = {} for i in range(n_var):     variables[f'p{i}'] = [0, 1]  vocs = VOCS(     variables=variables,     objectives={'f': 'MINIMIZE'}, ) In\u00a0[8]: Copied! <pre>vocs\n</pre> vocs Out[8]: <pre>VOCS(variables={'p0': [0.0, 1.0], 'p1': [0.0, 1.0]}, constraints={}, objectives={'f': 'MINIMIZE'}, constants={}, observables=[])</pre> In\u00a0[9]: Copied! <pre>evaluator = Evaluator(function=f_RCDS_minimize)\n</pre> evaluator = Evaluator(function=f_RCDS_minimize) In\u00a0[10]: Copied! <pre>generator = RCDSGenerator(vocs=vocs)\n</pre> generator = RCDSGenerator(vocs=vocs) In\u00a0[11]: Copied! <pre>generator.dict()\n</pre> generator.dict() Out[11]: <pre>{'x0': None, 'init_mat': None, 'noise': 1e-05, 'step': 0.01, 'tol': 1e-05}</pre> In\u00a0[12]: Copied! <pre>X = Xopt(vocs=vocs, evaluator=evaluator, generator=generator)\n</pre> X = Xopt(vocs=vocs, evaluator=evaluator, generator=generator) In\u00a0[13]: Copied! <pre>max_eval = 400\n\nfor i in tqdm(range(max_eval)):\n    X.step()\n</pre> max_eval = 400  for i in tqdm(range(max_eval)):     X.step() In\u00a0[14]: Copied! <pre>X.data.plot(y='f')\n</pre> X.data.plot(y='f') Out[14]: <pre>&lt;Axes: &gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/rcds/rcds/#rcds-optimization","title":"RCDS Optimization\u00b6","text":"<p>In this example we demonstrate RCDS optimization.</p>"},{"location":"examples/rcds/rcds/#rcds-test-problem","title":"RCDS test problem\u00b6","text":"<p>This test problem is a 2-D quadratic function.</p>"},{"location":"examples/rcds/rcds/#run-rcds-on-the-test-problem-yaml-method","title":"Run RCDS on the test problem (YAML method)\u00b6","text":""},{"location":"examples/rcds/rcds/#run-rcds-on-the-test-problem-api-method","title":"Run RCDS on the test problem (API method)\u00b6","text":""},{"location":"examples/rcds/rcds/#vocs","title":"VOCS\u00b6","text":"<p>We'll set the bounds for all the variables pi to [0, 1].</p>"},{"location":"examples/rcds/rcds/#evaluator","title":"Evaluator\u00b6","text":""},{"location":"examples/rcds/rcds/#generator","title":"Generator\u00b6","text":""},{"location":"examples/rcds/rcds/#run-the-optimization","title":"Run the optimization\u00b6","text":""},{"location":"examples/rcds/rcds/#visualization","title":"Visualization\u00b6","text":""},{"location":"examples/scipy/neldermead/","title":"Nelder-Mead Generator adapted from SciPy","text":"In\u00a0[1]: Copied! <pre>from xopt import Xopt\nimport numpy as np\n\n#from xopt import output_notebook\n#output_notebook()\n\nimport matplotlib.pyplot as plt\n</pre> from xopt import Xopt import numpy as np  #from xopt import output_notebook #output_notebook()  import matplotlib.pyplot as plt In\u00a0[2]: Copied! <pre>YAML = \"\"\"\nxopt: {}\ngenerator:\n  name: neldermead\n  initial_point: {x0: -1, x1: -1}\n  adaptive: true\n  xatol: 0.0001\n  fatol: 0.0001  \nevaluator:\n  function: xopt.resources.test_functions.rosenbrock.evaluate_rosenbrock\nvocs:\n  variables:\n    x0: [-5, 5]\n    x1: [-5, 5]\n  objectives: {y: MINIMIZE}\n\"\"\"\nX = Xopt(YAML)\n</pre> YAML = \"\"\" xopt: {} generator:   name: neldermead   initial_point: {x0: -1, x1: -1}   adaptive: true   xatol: 0.0001   fatol: 0.0001   evaluator:   function: xopt.resources.test_functions.rosenbrock.evaluate_rosenbrock vocs:   variables:     x0: [-5, 5]     x1: [-5, 5]   objectives: {y: MINIMIZE} \"\"\" X = Xopt(YAML) In\u00a0[3]: Copied! <pre>XMIN = [1,1] # True minimum\n</pre> XMIN = [1,1] # True minimum In\u00a0[4]: Copied! <pre># Test \nX.evaluate({\"x0\":XMIN[0], \"x1\": XMIN[1]})\n</pre> # Test  X.evaluate({\"x0\":XMIN[0], \"x1\": XMIN[1]}) Out[4]: <pre>{'y': 0, 'xopt_runtime': 9.900000009110954e-06, 'xopt_error': False}</pre> In\u00a0[5]: Copied! <pre>X.run()\nX.data\n</pre> X.run() X.data Out[5]: x0 x1 y xopt_runtime xopt_error 1 -1.000000 -1.000000 4.040000e+02 0.000015 False 2 -1.050000 -1.000000 4.462531e+02 0.000010 False 3 -1.000000 -1.050000 4.242500e+02 0.000010 False 4 -0.950000 -1.050000 3.850281e+02 0.000010 False 5 -0.900000 -1.075000 3.589325e+02 0.000009 False ... ... ... ... ... ... 122 0.999877 0.999764 2.587916e-08 0.000009 False 123 0.999999 0.999995 5.309344e-10 0.000009 False 124 1.000045 1.000097 7.751675e-09 0.000009 False 125 0.999963 0.999925 1.412126e-09 0.000010 False 126 0.999963 0.999925 1.412126e-09 0.000009 False <p>126 rows \u00d7 5 columns</p> In\u00a0[6]: Copied! <pre># Evaluation progression\nX.data['y'].plot(marker='.')\nplt.yscale('log')\nplt.xlabel('iteration')\nplt.ylabel('Rosenbrock value')\n</pre> # Evaluation progression X.data['y'].plot(marker='.') plt.yscale('log') plt.xlabel('iteration') plt.ylabel('Rosenbrock value') Out[6]: <pre>Text(0, 0.5, 'Rosenbrock value')</pre> In\u00a0[7]: Copied! <pre># Minimum\ndict(X.data.iloc[X.data[\"y\"].argmin()])\n</pre> # Minimum dict(X.data.iloc[X.data[\"y\"].argmin()]) Out[7]: <pre>{'x0': 0.9999988592114838,\n 'x1': 0.9999954170486077,\n 'y': 5.309343918637161e-10,\n 'xopt_runtime': 8.999999977277184e-06,\n 'xopt_error': False}</pre> In\u00a0[8]: Copied! <pre>from xopt.resources.test_functions.rosenbrock import rosenbrock\n</pre> from xopt.resources.test_functions.rosenbrock import rosenbrock In\u00a0[9]: Copied! <pre>fig, ax = plt.subplots(figsize=(8,8))\n\nXgrid, Ygrid = np.meshgrid(np.linspace(-2, 2, 201), np.linspace(-2, 2, 201) )\n\nZgrid = np.vectorize(lambda x, y: rosenbrock([x, y]))(Xgrid, Ygrid)\nZgrid = np.log(Zgrid+1)\n\nax.pcolormesh(Xgrid, Ygrid, Zgrid)\nax.contour(Xgrid, Ygrid, Zgrid, levels=10, colors='black')\nax.set_xlabel('x0')\nax.set_ylabel('x1')\n\n\n# Add all evaluations\nax.plot(X.data[\"x0\"], X.data[\"x1\"], color='red', alpha=0.5, marker='.')\nax.scatter(XMIN[0], XMIN[1], 50, marker='o', color='orange', label=\"True minimum\")\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n#plt.legend()\nax.set_title(\"Xopt's Nelder-Mead progression\")\n</pre> fig, ax = plt.subplots(figsize=(8,8))  Xgrid, Ygrid = np.meshgrid(np.linspace(-2, 2, 201), np.linspace(-2, 2, 201) )  Zgrid = np.vectorize(lambda x, y: rosenbrock([x, y]))(Xgrid, Ygrid) Zgrid = np.log(Zgrid+1)  ax.pcolormesh(Xgrid, Ygrid, Zgrid) ax.contour(Xgrid, Ygrid, Zgrid, levels=10, colors='black') ax.set_xlabel('x0') ax.set_ylabel('x1')   # Add all evaluations ax.plot(X.data[\"x0\"], X.data[\"x1\"], color='red', alpha=0.5, marker='.') ax.scatter(XMIN[0], XMIN[1], 50, marker='o', color='orange', label=\"True minimum\") ax.set_xlim(-2, 2) ax.set_ylim(-2, 2) #plt.legend() ax.set_title(\"Xopt's Nelder-Mead progression\") Out[9]: <pre>Text(0.5, 1.0, \"Xopt's Nelder-Mead progression\")</pre> In\u00a0[10]: Copied! <pre># Manually step the algorithm and collect simplexes\nX = Xopt(YAML)\nsimplexes = []\nwhile not X.is_done:\n    X.step()\n    simplexes.append(X.generator.simplex)\n</pre> # Manually step the algorithm and collect simplexes X = Xopt(YAML) simplexes = [] while not X.is_done:     X.step()     simplexes.append(X.generator.simplex)  In\u00a0[11]: Copied! <pre>def plot_simplex(simplex, ax=None):\n    x0 = simplex[\"x0\"]\n    x1 = simplex[\"x1\"]\n    x0 = np.append(x0, x0[0])\n    x1 = np.append(x1, x1[0])\n    ax.plot(x0, x1)\n\nfig, ax = plt.subplots(figsize=(8,8))\nax.pcolormesh(Xgrid, Ygrid, Zgrid)\n#ax.contour(Xgrid, Ygrid, Zgrid, levels=10, colors='black')\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)  \nax.set_xlabel('x0')\nax.set_ylabel('x1')\nax.set_title('Nelder-Mead simplex progression')\n\nax.scatter(XMIN[0], XMIN[1], 50, marker='o', color='orange', label=\"True minimum\")\n\nfor simplex in simplexes:\n    plot_simplex(simplex, ax)\n</pre> def plot_simplex(simplex, ax=None):     x0 = simplex[\"x0\"]     x1 = simplex[\"x1\"]     x0 = np.append(x0, x0[0])     x1 = np.append(x1, x1[0])     ax.plot(x0, x1)  fig, ax = plt.subplots(figsize=(8,8)) ax.pcolormesh(Xgrid, Ygrid, Zgrid) #ax.contour(Xgrid, Ygrid, Zgrid, levels=10, colors='black') ax.set_xlim(-2, 2) ax.set_ylim(-2, 2)   ax.set_xlabel('x0') ax.set_ylabel('x1') ax.set_title('Nelder-Mead simplex progression')  ax.scatter(XMIN[0], XMIN[1], 50, marker='o', color='orange', label=\"True minimum\")  for simplex in simplexes:     plot_simplex(simplex, ax) In\u00a0[12]: Copied! <pre>from scipy.optimize import fmin\n</pre> from scipy.optimize import fmin In\u00a0[13]: Copied! <pre>result = fmin(rosenbrock, [-1, -1])\nresult\n</pre> result = fmin(rosenbrock, [-1, -1]) result <pre>Optimization terminated successfully.\n         Current function value: 0.000000\n         Iterations: 67\n         Function evaluations: 125\n</pre> Out[13]: <pre>array([0.99999886, 0.99999542])</pre> In\u00a0[14]: Copied! <pre>X = Xopt(YAML)\n</pre> X = Xopt(YAML) In\u00a0[15]: Copied! <pre>X.run()\n# Almost exactly the same number evaluations. \nlen(X.data)\n</pre> X.run() # Almost exactly the same number evaluations.  len(X.data)  Out[15]: <pre>126</pre> In\u00a0[16]: Copied! <pre># results are the same\nxbest = X.data.iloc[X.data[\"y\"].argmin()]\nxbest['x0'] == result[0], xbest['x1'] == result[1]\n</pre> # results are the same xbest = X.data.iloc[X.data[\"y\"].argmin()] xbest['x0'] == result[0], xbest['x1'] == result[1] Out[16]: <pre>(True, True)</pre> In\u00a0[17]: Copied! <pre>from xopt.generators.scipy.neldermead import NelderMeadGenerator\nfrom xopt import Evaluator, VOCS\n</pre> from xopt.generators.scipy.neldermead import NelderMeadGenerator from xopt import Evaluator, VOCS In\u00a0[18]: Copied! <pre>NelderMeadGenerator.__fields__\n</pre> NelderMeadGenerator.__fields__ Out[18]: <pre>{'vocs': ModelField(name='vocs', type=VOCS, required=True),\n 'data': ModelField(name='data', type=DataFrame, required=False, default=Empty DataFrame\n Columns: []\n Index: []),\n 'initial_point': ModelField(name='initial_point', type=Optional[Mapping[str, float]], required=False, default=None),\n 'initial_simplex': ModelField(name='initial_simplex', type=Optional[Mapping[str, Union[List[float], ndarray]]], required=False, default=None),\n 'adaptive': ModelField(name='adaptive', type=bool, required=False, default=True),\n 'xatol': ModelField(name='xatol', type=float, required=False, default=0.0001),\n 'fatol': ModelField(name='fatol', type=float, required=False, default=0.0001)}</pre> In\u00a0[19]: Copied! <pre>Xbest = [33, 44]\n\ndef f(inputs, verbose=False):\n\n    if verbose:\n        print(f'evaluate f({x})')\n    x0 = inputs[\"x0\"]\n    x1 = inputs[\"x1\"]\n    \n    #if x0 &lt; 10:\n    #    raise ValueError('test XXXX')\n\n    y = (x0-Xbest[0])**2  + (x1-Xbest[1])**2\n\n    return {\"y\":y}\n\nev = Evaluator(function=f)\nvocs = VOCS(variables={\"x0\": [-100, 100], \"x1\": [-100,100]}, objectives={\"y\":\"MINIMIZE\"})\nvocs.json()\n</pre> Xbest = [33, 44]  def f(inputs, verbose=False):      if verbose:         print(f'evaluate f({x})')     x0 = inputs[\"x0\"]     x1 = inputs[\"x1\"]          #if x0 &lt; 10:     #    raise ValueError('test XXXX')      y = (x0-Xbest[0])**2  + (x1-Xbest[1])**2      return {\"y\":y}  ev = Evaluator(function=f) vocs = VOCS(variables={\"x0\": [-100, 100], \"x1\": [-100,100]}, objectives={\"y\":\"MINIMIZE\"}) vocs.json() Out[19]: <pre>'{\"variables\":{\"x0\":[-100.0,100.0],\"x1\":[-100.0,100.0]},\"constraints\":{},\"objectives\":{\"y\":\"MINIMIZE\"},\"constants\":{},\"observables\":[]}'</pre> In\u00a0[20]: Copied! <pre># check output\nf(vocs.random_inputs())\n</pre> # check output f(vocs.random_inputs()) Out[20]: <pre>{'y': 9782.756679731161}</pre> In\u00a0[21]: Copied! <pre>G = NelderMeadGenerator(vocs=vocs)\nG.generate(1)\n</pre> G = NelderMeadGenerator(vocs=vocs) G.generate(1) Out[21]: <pre>[{'x0': -52.55247739804409, 'x1': 97.9245779130861}]</pre> In\u00a0[22]: Copied! <pre># This will throw an exception \ntry:\n    G.generate(1)\nexcept Exception as ex:\n    print(ex)\n</pre> # This will throw an exception  try:     G.generate(1) except Exception as ex:     print(ex) <pre>Generation is locked via ._lock. Please call `add_data` before any further generate(1)\n</pre> In\u00a0[23]: Copied! <pre># This will unlock\nG.add_data([ev.evaluate(G._inputs[0])])\nG.generate(1)\n</pre> # This will unlock G.add_data([ev.evaluate(G._inputs[0])]) G.generate(1) Out[23]: <pre>[{'x0': -55.1801012679463, 'x1': 97.9245779130861}]</pre> In\u00a0[24]: Copied! <pre># Create Xopt object\nX = Xopt(evaluator=ev, vocs=vocs, generator=NelderMeadGenerator(vocs=vocs))\n\n# Optional: give an initial pioint\nX.generator.initial_point = {'x0':0, 'x1':0}\n</pre> # Create Xopt object X = Xopt(evaluator=ev, vocs=vocs, generator=NelderMeadGenerator(vocs=vocs))  # Optional: give an initial pioint X.generator.initial_point = {'x0':0, 'x1':0} In\u00a0[25]: Copied! <pre>X.run()\n</pre> X.run() In\u00a0[26]: Copied! <pre># This shows the latest simplex\nX.generator.simplex\n</pre> # This shows the latest simplex X.generator.simplex Out[26]: <pre>{'x0': array([32.99996111, 32.99996171, 33.00002688]),\n 'x1': array([44.00000851, 44.00006811, 44.00003045])}</pre> In\u00a0[27]: Copied! <pre>X.data['y'].plot()\nplt.yscale('log')\n</pre> X.data['y'].plot() plt.yscale('log') In\u00a0[28]: Copied! <pre>fig, ax = plt.subplots()\nX.data.plot('x0', 'x1', ax=ax, color='black', alpha=0.5)\nax.scatter(Xbest[0], Xbest[1], marker='x', color='red')\n</pre> fig, ax = plt.subplots() X.data.plot('x0', 'x1', ax=ax, color='black', alpha=0.5) ax.scatter(Xbest[0], Xbest[1], marker='x', color='red')     Out[28]: <pre>&lt;matplotlib.collections.PathCollection at 0x7f35b44fa6d0&gt;</pre> In\u00a0[29]: Copied! <pre># This is the raw internal simplex points\na = X.generator._state\na\n</pre> # This is the raw internal simplex points a = X.generator._state a Out[29]: <pre>array([[32.99996111, 44.00000851],\n       [32.99996171, 44.00006811],\n       [33.00002688, 44.00003045]])</pre> In\u00a0[30]: Copied! <pre># Check JSON representation of options\nX.generator.json()\n</pre> # Check JSON representation of options X.generator.json() Out[30]: <pre>'{\"initial_point\":{\"x0\":0.0,\"x1\":0.0},\"initial_simplex\":null,\"adaptive\":true,\"xatol\":0.0001,\"fatol\":0.0001}'</pre> In\u00a0[31]: Copied! <pre># Set the initial simplex to be the latest, \nX.generator.initial_simplex = X.generator.simplex\nX.generator.xatol = 1e-9\nX.generator.fatol = 1e-9\nX.generator._is_done = False # Unlock\nX.run()\n\n\nX.data['y'].plot()\nplt.yscale('log')\n</pre> # Set the initial simplex to be the latest,  X.generator.initial_simplex = X.generator.simplex X.generator.xatol = 1e-9 X.generator.fatol = 1e-9 X.generator._is_done = False # Unlock X.run()   X.data['y'].plot() plt.yscale('log') In\u00a0[32]: Copied! <pre>YAML = \"\"\"\nxopt: {}\ngenerator:\n  name: neldermead\nevaluator:\n  function: xopt.resources.test_functions.rosenbrock.evaluate_rosenbrock\nvocs:\n  variables:\n    x1: [-5, 5]\n    x2: [-5, 5]\n    x3: [-5, 5]\n    x4: [-5, 5]\n    x5: [-5, 5]\n  objectives:\n    y: MINIMIZE\n\"\"\"\nX = Xopt(YAML)\n</pre> YAML = \"\"\" xopt: {} generator:   name: neldermead evaluator:   function: xopt.resources.test_functions.rosenbrock.evaluate_rosenbrock vocs:   variables:     x1: [-5, 5]     x2: [-5, 5]     x3: [-5, 5]     x4: [-5, 5]     x5: [-5, 5]   objectives:     y: MINIMIZE \"\"\" X = Xopt(YAML) In\u00a0[33]: Copied! <pre>X.run()\nX.data['y'].plot()\nplt.yscale('log')\n</pre> X.run() X.data['y'].plot() plt.yscale('log') In\u00a0[34]: Copied! <pre>fig, ax = plt.subplots(figsize=(8,8))\n\nXgrid, Ygrid = np.meshgrid(np.linspace(-2, 2, 201), np.linspace(-2, 2, 201) )\n\nZgrid = np.vectorize(lambda x, y: rosenbrock([x, y, 1, 1, 1]))(Xgrid, Ygrid)  # The minimum is at 1,1,1,1,1\nZgrid = np.log(Zgrid+1)\n\nax.pcolormesh(Xgrid, Ygrid, Zgrid)\nax.contour(Xgrid, Ygrid, Zgrid, levels=10, colors='black')\nax.set_xlabel('x0')\nax.set_ylabel('x1')\n\n\n# Add all evaluations\nax.plot(X.data[\"x1\"], X.data[\"x2\"], color='red', alpha=0.5, marker='.')\nax.scatter(XMIN[0], XMIN[1], 50, marker='o', color='orange', label=\"True minimum\")\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\n#plt.legend()\nax.set_title(\"Xopt's Nelder-Mead progression\")\n</pre> fig, ax = plt.subplots(figsize=(8,8))  Xgrid, Ygrid = np.meshgrid(np.linspace(-2, 2, 201), np.linspace(-2, 2, 201) )  Zgrid = np.vectorize(lambda x, y: rosenbrock([x, y, 1, 1, 1]))(Xgrid, Ygrid)  # The minimum is at 1,1,1,1,1 Zgrid = np.log(Zgrid+1)  ax.pcolormesh(Xgrid, Ygrid, Zgrid) ax.contour(Xgrid, Ygrid, Zgrid, levels=10, colors='black') ax.set_xlabel('x0') ax.set_ylabel('x1')   # Add all evaluations ax.plot(X.data[\"x1\"], X.data[\"x2\"], color='red', alpha=0.5, marker='.') ax.scatter(XMIN[0], XMIN[1], 50, marker='o', color='orange', label=\"True minimum\") ax.set_xlim(-2, 2) ax.set_ylim(-2, 2) #plt.legend() ax.set_title(\"Xopt's Nelder-Mead progression\") Out[34]: <pre>Text(0.5, 1.0, \"Xopt's Nelder-Mead progression\")</pre>"},{"location":"examples/scipy/neldermead/#nelder-mead-generator-adapted-from-scipy","title":"Nelder-Mead Generator adapted from SciPy\u00b6","text":"<p>Most of the algorithms in scipy.optimize are self-contained functions that operate on the user-provided <code>func</code>. Xopt has adapted the Nelder-Mead directly from scipy.optimize to be in a generator form. This allows for the manual stepping through the algorithm.</p>"},{"location":"examples/scipy/neldermead/#nelder-mead-optimization-of-the-rosenbrock-function-with-xopt","title":"Nelder-Mead optimization of the Rosenbrock function with Xopt\u00b6","text":""},{"location":"examples/scipy/neldermead/#visualize","title":"Visualize\u00b6","text":""},{"location":"examples/scipy/neldermead/#compare-with-scipyoptimizefmin-nelder-mead","title":"Compare with scipy.optimize.fmin Nelder-Mead\u00b6","text":"<p>Notice that fmin is much faster here. This is because the function runs very fast, so the internal Xopt bookkeeping overhead dominates.</p>"},{"location":"examples/scipy/neldermead/#neldermeadgenerator-object","title":"NelderMeadGenerator object\u00b6","text":""},{"location":"examples/scipy/neldermead/#5-dimensional-rosenbrock","title":"5-dimensional Rosenbrock\u00b6","text":"<p><code>evaluate_rosenbrock</code> works for arbitrary dimensions, so adding more variables to <code>vocs</code> transforms this problem.</p>"},{"location":"examples/single_objective_bayes_opt/bax_tutorial/","title":"Basic Optimization using BAX","text":"In\u00a0[1]: Copied! <pre># Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nos.environ['KMP_DUPLICATE_LIB_OK'] = 'True'\n\nimport torch\n\nfrom xopt import Xopt\nfrom xopt.vocs import VOCS\nfrom xopt.generators.bayesian.bax_generator import BaxGenerator\n\nfrom xopt.evaluator import Evaluator\n\nimport numpy as np\nimport random\n\n\n#random seeds for reproducibility \nrand_seed = 2\n\ntorch.manual_seed(rand_seed)\nnp.random.seed(rand_seed) #only affects initial random observations through Xopt\nrandom.seed(rand_seed)\n</pre> # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import os os.environ['KMP_DUPLICATE_LIB_OK'] = 'True'  import torch  from xopt import Xopt from xopt.vocs import VOCS from xopt.generators.bayesian.bax_generator import BaxGenerator  from xopt.evaluator import Evaluator  import numpy as np import random   #random seeds for reproducibility  rand_seed = 2  torch.manual_seed(rand_seed) np.random.seed(rand_seed) #only affects initial random observations through Xopt random.seed(rand_seed) In\u00a0[2]: Copied! <pre>import math\n\n# define variables and function objectives\nvocs = VOCS(\n    variables={\"x\": [0, 2 * math.pi]},\n    objectives={\"f\": \"MAXIMIZE\"},\n)\n</pre> import math  # define variables and function objectives vocs = VOCS(     variables={\"x\": [0, 2 * math.pi]},     objectives={\"f\": \"MAXIMIZE\"}, ) In\u00a0[3]: Copied! <pre># define a test function to optimize\nimport numpy as np\n\ndef sin_function(input_dict):\n    return {\"f\": np.sin(input_dict[\"x\"])}\n</pre> # define a test function to optimize import numpy as np  def sin_function(input_dict):     return {\"f\": np.sin(input_dict[\"x\"])} In\u00a0[4]: Copied! <pre>from xopt.generators.bayesian.bax.algorithms import GridMinimize\n\n#Prepare BAX algorithm and generator options\nalgorithm = GridMinimize(n_mesh_points=50)\n\n#construct BAX generator\ngenerator = BaxGenerator(vocs=vocs, algorithm=algorithm)\n</pre> from xopt.generators.bayesian.bax.algorithms import GridMinimize  #Prepare BAX algorithm and generator options algorithm = GridMinimize(n_mesh_points=50)  #construct BAX generator generator = BaxGenerator(vocs=vocs, algorithm=algorithm) In\u00a0[5]: Copied! <pre>#construct evaluator\nevaluator = Evaluator(function=sin_function)\n\n#construct Xopt optimizer\nX = Xopt(evaluator=evaluator, generator=generator, vocs=vocs)\n</pre> #construct evaluator evaluator = Evaluator(function=sin_function)  #construct Xopt optimizer X = Xopt(evaluator=evaluator, generator=generator, vocs=vocs) In\u00a0[6]: Copied! <pre># evaluate initial points\nX.random_evaluate(3)\n\n# inspect the gathered data\nX.data\n</pre> # evaluate initial points X.random_evaluate(3)  # inspect the gathered data X.data Out[6]: x f xopt_runtime xopt_error 1 3.543749 -0.391403 0.000023 False 2 6.120286 -0.162180 0.000003 False 3 2.829554 0.306999 0.000001 False In\u00a0[7]: Copied! <pre>import torch\nimport matplotlib.pyplot as plt\nn_steps = 3\n\n# test points for plotting\ntest_x = torch.linspace(*X.vocs.bounds.flatten(),50).double()\n\nfor i in range(5):\n    # get the Gaussian process model from the generator\n    model = X.generator.train_model()\n\n    # get acquisition function from generator\n    acq = X.generator.get_acquisition(model)\n\n    # calculate model posterior and acquisition function at each test point\n    # NOTE: need to add a dimension to the input tensor for evaluating the\n    # posterior and another for the acquisition function, see\n    # https://botorch.org/docs/batching for details\n    # NOTE: we use the `torch.no_grad()` environment to speed up computation by\n    # skipping calculations for backpropagation\n    with torch.no_grad():\n        posterior = model.posterior(test_x.unsqueeze(1))\n        acq_val = acq(test_x.reshape(-1,1,1))\n\n    # get mean function and confidence regions\n    mean = posterior.mean\n    l,u = posterior.mvn.confidence_region()\n\n    # plot model and acquisition function\n    fig,ax = plt.subplots(3,1,sharex=\"all\")\n    fig.set_size_inches(8,6)\n\n    # plot model posterior\n    ax[0].plot(test_x, mean, label=\"Posterior mean\")\n    ax[0].fill_between(test_x, l, u,alpha=0.25, label=\"Posterior confidence region\")\n\n    # add data to model plot\n    ax[0].plot(X.data[\"x\"],X.data[\"f\"],\"C1o\", label=\"Training data\")\n\n    # plot true function\n    true_f = sin_function({\"x\": test_x})[\"f\"]\n    ax[0].plot(test_x, true_f,'--', label=\"Ground truth\")\n\n    if i == 0:\n        ax[0].legend(ncols=2)\n\n    # plot the function samples and their optima found by BAX\n    test_points = X.generator.algorithm_results[\"test_points\"]\n    posterior_samples = X.generator.algorithm_results[\"posterior_samples\"]\n    execution_paths = X.generator.algorithm_results[\"execution_paths\"]\n\n    label1 = 'Function Samples'\n    label2 = 'Sample Optima'\n    for i in range(X.generator.algorithm.n_samples):\n        samples, = ax[1].plot(test_points, posterior_samples[i], c='C0', alpha=0.3,\n                              label=label1)\n        optima = ax[1].scatter(*execution_paths[i], c='r', marker='x', s=80,\n                               label=label2,zorder=10)\n        label1 = None\n        label2 = None \n    \n    # add legend\n    if i == 0:\n        ax[1].legend()\n\n    # plot acquisition function\n    ax[2].plot(test_x, acq_val.flatten())\n\n    ax[0].set_ylabel(\"f\")\n    ax[1].set_ylabel(\"f\")\n    ax[2].set_ylabel(r\"$\\alpha(x)$\")\n    ax[2].set_xlabel(\"x\")\n\n    # do the optimization step\n    X.step()\n</pre> import torch import matplotlib.pyplot as plt n_steps = 3  # test points for plotting test_x = torch.linspace(*X.vocs.bounds.flatten(),50).double()  for i in range(5):     # get the Gaussian process model from the generator     model = X.generator.train_model()      # get acquisition function from generator     acq = X.generator.get_acquisition(model)      # calculate model posterior and acquisition function at each test point     # NOTE: need to add a dimension to the input tensor for evaluating the     # posterior and another for the acquisition function, see     # https://botorch.org/docs/batching for details     # NOTE: we use the `torch.no_grad()` environment to speed up computation by     # skipping calculations for backpropagation     with torch.no_grad():         posterior = model.posterior(test_x.unsqueeze(1))         acq_val = acq(test_x.reshape(-1,1,1))      # get mean function and confidence regions     mean = posterior.mean     l,u = posterior.mvn.confidence_region()      # plot model and acquisition function     fig,ax = plt.subplots(3,1,sharex=\"all\")     fig.set_size_inches(8,6)      # plot model posterior     ax[0].plot(test_x, mean, label=\"Posterior mean\")     ax[0].fill_between(test_x, l, u,alpha=0.25, label=\"Posterior confidence region\")      # add data to model plot     ax[0].plot(X.data[\"x\"],X.data[\"f\"],\"C1o\", label=\"Training data\")      # plot true function     true_f = sin_function({\"x\": test_x})[\"f\"]     ax[0].plot(test_x, true_f,'--', label=\"Ground truth\")      if i == 0:         ax[0].legend(ncols=2)      # plot the function samples and their optima found by BAX     test_points = X.generator.algorithm_results[\"test_points\"]     posterior_samples = X.generator.algorithm_results[\"posterior_samples\"]     execution_paths = X.generator.algorithm_results[\"execution_paths\"]      label1 = 'Function Samples'     label2 = 'Sample Optima'     for i in range(X.generator.algorithm.n_samples):         samples, = ax[1].plot(test_points, posterior_samples[i], c='C0', alpha=0.3,                               label=label1)         optima = ax[1].scatter(*execution_paths[i], c='r', marker='x', s=80,                                label=label2,zorder=10)         label1 = None         label2 = None           # add legend     if i == 0:         ax[1].legend()      # plot acquisition function     ax[2].plot(test_x, acq_val.flatten())      ax[0].set_ylabel(\"f\")     ax[1].set_ylabel(\"f\")     ax[2].set_ylabel(r\"$\\alpha(x)$\")     ax[2].set_xlabel(\"x\")      # do the optimization step     X.step()  In\u00a0[8]: Copied! <pre># access the collected data\nX.data\n</pre> # access the collected data X.data Out[8]: x f xopt_runtime xopt_error 1 3.543749 -0.391403 0.000023 False 2 6.120286 -0.162180 0.000003 False 3 2.829554 0.306999 0.000001 False 4 4.359615 -0.938418 0.000011 False 5 4.866001 -0.988225 0.000010 False 6 4.722885 -0.999945 0.000010 False 7 4.681529 -0.999524 0.000010 False 8 4.741417 -0.999579 0.000011 False"},{"location":"examples/single_objective_bayes_opt/bax_tutorial/#basic-optimization-using-bax","title":"Basic Optimization using BAX\u00b6","text":"<p>In this notebook we demonstrate the use of Xopt to perform Bayesian Algorithm Execution (BAX) as a means of minimizing the output of a simple test function. BAX is a generalization of Bayesian Optimization that seeks to acquire observations that provide our model with maximal information about our property of interest. In this simple example, our property of interest is the minimum function output and its location in input-space. See https://arxiv.org/pdf/2209.04587.pdf for details.</p>"},{"location":"examples/single_objective_bayes_opt/bax_tutorial/#imports-and-random-seeding-for-reproducibility","title":"Imports and random seeding for reproducibility\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/bax_tutorial/#define-the-test-problem","title":"Define the test problem\u00b6","text":"<p>Here we define a simple optimization problem, where we attempt to minimize the sin function in the domian [0,2*pi]. Note that the function used to evaluate the objective function takes a dictionary as input and returns a dictionary as the output.</p>"},{"location":"examples/single_objective_bayes_opt/bax_tutorial/#prepare-bax-generator-for-xopt","title":"Prepare BAX generator for Xopt\u00b6","text":"<p>Create a generator that uses the ExpectedInformationGain (InfoBAX) acquisition function to perform Bayesian Optimization. Note that we use minimization on a grid, so specifying the number of mesh points can negatively impact decision making time (especially in higher dimensional feature spaces).</p>"},{"location":"examples/single_objective_bayes_opt/bax_tutorial/#create-evaluator-and-xopt-objects","title":"Create Evaluator and Xopt objects\u00b6","text":"<p>Create the Evaluator (which allows Xopt to interface with our test function) and finish constructing our Xopt object.</p>"},{"location":"examples/single_objective_bayes_opt/bax_tutorial/#generate-and-evaluate-initial-points","title":"Generate and evaluate initial points\u00b6","text":"<p>To begin optimization, we must generate some random initial data points. The first call to <code>X.step()</code> will generate and evaluate a number of randomly points specified by the generator. Note that if we add data to xopt before calling <code>X.step()</code> by assigning the data to <code>X.data</code>, calls to <code>X.step()</code> will ignore the random generation and proceed to generating points via Bayesian optimization.</p>"},{"location":"examples/single_objective_bayes_opt/bax_tutorial/#do-bayesian-optimization-steps","title":"Do bayesian optimization steps\u00b6","text":"<p>To perform optimization we simply call <code>X.step()</code> in a loop. This allows us to do intermediate tasks in between optimization steps, such as examining the model and acquisition function at each step (as we demonstrate here).</p>"},{"location":"examples/single_objective_bayes_opt/benchmarking/","title":"Normal Model with Standard transforms and no constraints","text":"In\u00a0[1]: Copied! <pre># Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport torch\nfrom copy import deepcopy\nfrom xopt.generators.bayesian import UpperConfidenceBoundGenerator\nfrom xopt.vocs import VOCS\n\nvocs = VOCS(\n    variables = {\"x\":[0,1]},\n    objectives = {\"y\":\"MAXIMIZE\"},\n    constraints = {\"c\": [\"LESS_THAN\", 0]}\n)\n</pre> # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import matplotlib.pyplot as plt import pandas as pd import torch from copy import deepcopy from xopt.generators.bayesian import UpperConfidenceBoundGenerator from xopt.vocs import VOCS  vocs = VOCS(     variables = {\"x\":[0,1]},     objectives = {\"y\":\"MAXIMIZE\"},     constraints = {\"c\": [\"LESS_THAN\", 0]} )  In\u00a0[2]: Copied! <pre># define test functions\ndef y(x):\n    return torch.sin(2*3.14*x)\n\ndef c(x):\n    return 10.0*torch.cos(2*3.14*x + 0.25)\n\ntest_x = torch.linspace(*torch.tensor(vocs.bounds.flatten()), 100)\n\n# define training data to pass to the generator\ntrain_x = torch.tensor((0.2,0.5, 0.6))\ntrain_y = y(train_x)\ntrain_c = c(train_x)\n\ndata = pd.DataFrame(\n    {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": train_c}\n)\n\ndef plot_ground_truth():\n    fig,ax = plt.subplots()\n    ax.plot(test_x, y(test_x),'--C0')\n    ax.plot(test_x, c(test_x),'--C1')\n    ax.plot(train_x, train_y,'oC0')\n    ax.plot(train_x, train_c,'oC1')\n\n    return ax\nplot_ground_truth()\n</pre> # define test functions def y(x):     return torch.sin(2*3.14*x)  def c(x):     return 10.0*torch.cos(2*3.14*x + 0.25)  test_x = torch.linspace(*torch.tensor(vocs.bounds.flatten()), 100)  # define training data to pass to the generator train_x = torch.tensor((0.2,0.5, 0.6)) train_y = y(train_x) train_c = c(train_x)  data = pd.DataFrame(     {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": train_c} )  def plot_ground_truth():     fig,ax = plt.subplots()     ax.plot(test_x, y(test_x),'--C0')     ax.plot(test_x, c(test_x),'--C1')     ax.plot(train_x, train_y,'oC0')     ax.plot(train_x, train_c,'oC1')      return ax plot_ground_truth() Out[2]: <pre>&lt;Axes: &gt;</pre> In\u00a0[3]: Copied! <pre>from xopt.utils import visualize_model\n\n# plot the generator model and acquisition function\ntest_vocs = deepcopy(vocs)\ntest_vocs.constraints = {}\ngenerator = UpperConfidenceBoundGenerator(vocs=test_vocs)\n\nvisualize_model(generator, data)\n</pre> from xopt.utils import visualize_model  # plot the generator model and acquisition function test_vocs = deepcopy(vocs) test_vocs.constraints = {} generator = UpperConfidenceBoundGenerator(vocs=test_vocs)  visualize_model(generator, data) In\u00a0[4]: Copied! <pre># plot the generator model and acquisition function\ngenerator = UpperConfidenceBoundGenerator(vocs=deepcopy(vocs))\nvisualize_model(generator, data)\n</pre> # plot the generator model and acquisition function generator = UpperConfidenceBoundGenerator(vocs=deepcopy(vocs)) visualize_model(generator, data)  In\u00a0[5]: Copied! <pre># plot the generator model and acquisition function\ntvocs = deepcopy(vocs)\ntvocs.constraints = {\"c\": [\"GREATER_THAN\", 0]}\n\ngenerator = UpperConfidenceBoundGenerator(vocs=tvocs)\nvisualize_model(generator, data)\n</pre> # plot the generator model and acquisition function tvocs = deepcopy(vocs) tvocs.constraints = {\"c\": [\"GREATER_THAN\", 0]}  generator = UpperConfidenceBoundGenerator(vocs=tvocs) visualize_model(generator, data) In\u00a0[6]: Copied! <pre># plot the generator model and acquisition function\nfrom xopt.generators.bayesian import BayesianExplorationGenerator\ngenerator = BayesianExplorationGenerator(vocs=vocs)\nvisualize_model(generator, data)\n</pre> # plot the generator model and acquisition function from xopt.generators.bayesian import BayesianExplorationGenerator generator = BayesianExplorationGenerator(vocs=vocs) visualize_model(generator, data) In\u00a0[7]: Copied! <pre>generator = BayesianExplorationGenerator(vocs=vocs)\n\ndata = pd.DataFrame(\n    {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": torch.zeros_like(train_y).numpy()}\n)\nvisualize_model(generator, data)\n</pre> generator = BayesianExplorationGenerator(vocs=vocs)  data = pd.DataFrame(     {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": torch.zeros_like(train_y).numpy()} ) visualize_model(generator, data) In\u00a0[8]: Copied! <pre>test_vocs = deepcopy(vocs)\ntest_vocs.constraints = {}\ngenerator = BayesianExplorationGenerator(vocs=test_vocs)\n\ndata = pd.DataFrame(\n    {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": torch.zeros_like(train_y).numpy()}\n)\nvisualize_model(generator, data)\n</pre> test_vocs = deepcopy(vocs) test_vocs.constraints = {} generator = BayesianExplorationGenerator(vocs=test_vocs)  data = pd.DataFrame(     {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": torch.zeros_like(train_y).numpy()} ) visualize_model(generator, data)  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/single_objective_bayes_opt/benchmarking/#normal-model-with-standard-transforms-and-no-constraints","title":"Normal Model with Standard transforms and no constraints\u00b6","text":"<ul> <li>acquisition function is UCB with beta = 2</li> </ul>"},{"location":"examples/single_objective_bayes_opt/benchmarking/#normal-model-with-standard-transforms-and-constraints","title":"Normal Model with Standard transforms and constraints\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/bo_tutorial/","title":"Bayesian optimization tutorial","text":"In\u00a0[1]: Copied! <pre>from xopt.vocs import VOCS\nimport math\n\n# define variables and function objectives\nvocs = VOCS(\n    variables={\"x\": [0, 2 * math.pi]},\n    objectives={\"f\": \"MINIMIZE\"},\n)\n</pre> from xopt.vocs import VOCS import math  # define variables and function objectives vocs = VOCS(     variables={\"x\": [0, 2 * math.pi]},     objectives={\"f\": \"MINIMIZE\"}, ) In\u00a0[2]: Copied! <pre># define a test function to optimize\nimport numpy as np\n\ndef sin_function(input_dict):\n    return {\"f\": np.sin(input_dict[\"x\"])}\n</pre> # define a test function to optimize import numpy as np  def sin_function(input_dict):     return {\"f\": np.sin(input_dict[\"x\"])} In\u00a0[3]: Copied! <pre>from xopt.evaluator import Evaluator\nfrom xopt.generators.bayesian import UpperConfidenceBoundGenerator\nfrom xopt import Xopt\n\nevaluator = Evaluator(function=sin_function)\ngenerator = UpperConfidenceBoundGenerator(vocs=vocs)\nX = Xopt(evaluator=evaluator, generator=generator, vocs=vocs)\n</pre> from xopt.evaluator import Evaluator from xopt.generators.bayesian import UpperConfidenceBoundGenerator from xopt import Xopt  evaluator = Evaluator(function=sin_function) generator = UpperConfidenceBoundGenerator(vocs=vocs) X = Xopt(evaluator=evaluator, generator=generator, vocs=vocs) In\u00a0[4]: Copied! <pre># call X.random_evaluate() to generate + evaluate 3 initial points\nX.random_evaluate(2)\n\n# inspect the gathered data\nX.data\n</pre> # call X.random_evaluate() to generate + evaluate 3 initial points X.random_evaluate(2)  # inspect the gathered data X.data Out[4]: x f xopt_runtime xopt_error 1 3.752911 -0.573947 0.000012 False 2 3.650557 -0.487273 0.000002 False In\u00a0[5]: Copied! <pre>import torch\nimport matplotlib.pyplot as plt\n\nn_steps = 5\n\n# test points for plotting\ntest_x = torch.linspace(*X.vocs.bounds.flatten(), 50).double()\n\nfor i in range(n_steps):\n    # get the Gaussian process model from the generator\n    model = X.generator.train_model()\n\n    # get acquisition function from generator\n    acq = X.generator.get_acquisition(model)\n\n    # calculate model posterior and acquisition function at each test point\n    # NOTE: need to add a dimension to the input tensor for evaluating the\n    # posterior and another for the acquisition function, see\n    # https://botorch.org/docs/batching for details\n    # NOTE: we use the `torch.no_grad()` environment to speed up computation by\n    # skipping calculations for backpropagation\n    with torch.no_grad():\n        posterior = model.posterior(test_x.unsqueeze(1))\n        acq_val = acq(test_x.reshape(-1, 1, 1))\n\n    # get mean function and confidence regions\n    mean = posterior.mean\n    l,u = posterior.mvn.confidence_region()\n\n    # plot model and acquisition function\n    fig,ax = plt.subplots(2, 1, sharex=\"all\")\n\n    # plot model posterior\n    ax[0].plot(test_x, mean, label=\"Posterior mean\")\n    ax[0].fill_between(test_x, l, u, alpha=0.25, label=\"Posterior confidence region\")\n\n    # add data to model plot\n    ax[0].plot(X.data[\"x\"],X.data[\"f\"],\"C1o\", label=\"Training data\")\n\n    # plot true function\n    true_f = sin_function({\"x\": test_x})[\"f\"]\n    ax[0].plot(test_x, true_f,'--', label=\"Ground truth\")\n\n    # add legend\n    ax[0].legend()\n\n    # plot acquisition function\n    ax[1].plot(test_x, acq_val.flatten())\n\n    ax[0].set_ylabel(\"f\")\n    ax[1].set_ylabel(r\"$\\alpha(x)$\")\n    ax[1].set_xlabel(\"x\")\n\n    # do the optimization step\n    X.step()\n</pre> import torch import matplotlib.pyplot as plt  n_steps = 5  # test points for plotting test_x = torch.linspace(*X.vocs.bounds.flatten(), 50).double()  for i in range(n_steps):     # get the Gaussian process model from the generator     model = X.generator.train_model()      # get acquisition function from generator     acq = X.generator.get_acquisition(model)      # calculate model posterior and acquisition function at each test point     # NOTE: need to add a dimension to the input tensor for evaluating the     # posterior and another for the acquisition function, see     # https://botorch.org/docs/batching for details     # NOTE: we use the `torch.no_grad()` environment to speed up computation by     # skipping calculations for backpropagation     with torch.no_grad():         posterior = model.posterior(test_x.unsqueeze(1))         acq_val = acq(test_x.reshape(-1, 1, 1))      # get mean function and confidence regions     mean = posterior.mean     l,u = posterior.mvn.confidence_region()      # plot model and acquisition function     fig,ax = plt.subplots(2, 1, sharex=\"all\")      # plot model posterior     ax[0].plot(test_x, mean, label=\"Posterior mean\")     ax[0].fill_between(test_x, l, u, alpha=0.25, label=\"Posterior confidence region\")      # add data to model plot     ax[0].plot(X.data[\"x\"],X.data[\"f\"],\"C1o\", label=\"Training data\")      # plot true function     true_f = sin_function({\"x\": test_x})[\"f\"]     ax[0].plot(test_x, true_f,'--', label=\"Ground truth\")      # add legend     ax[0].legend()      # plot acquisition function     ax[1].plot(test_x, acq_val.flatten())      ax[0].set_ylabel(\"f\")     ax[1].set_ylabel(r\"$\\alpha(x)$\")     ax[1].set_xlabel(\"x\")      # do the optimization step     X.step()  In\u00a0[6]: Copied! <pre># access the collected data\nX.data\n</pre> # access the collected data X.data Out[6]: x f xopt_runtime xopt_error 1 3.752911 -0.573947 0.000012 False 2 3.650557 -0.487273 0.000002 False 3 4.255081 -0.897244 0.000010 False 4 6.010863 -0.268968 0.000010 False 5 4.800521 -0.996119 0.000011 False 6 4.643223 -0.997609 0.000012 False 7 4.706464 -0.999982 0.000010 False In\u00a0[7]: Copied! <pre>X.generator.get_optimum()\n</pre> X.generator.get_optimum() Out[7]: x 0 4.711309 In\u00a0[8]: Copied! <pre>X.generator.dict()\n</pre> X.generator.dict() Out[8]: <pre>{'model': ModelListGP(\n   (models): ModuleList(\n     (0): SingleTaskGP(\n       (likelihood): GaussianLikelihood(\n         (noise_covar): HomoskedasticNoise(\n           (noise_prior): GammaPrior()\n           (raw_noise_constraint): GreaterThan(1.000E-04)\n         )\n       )\n       (mean_module): ConstantMean()\n       (covar_module): ScaleKernel(\n         (base_kernel): MaternKernel(\n           (lengthscale_prior): GammaPrior()\n           (raw_lengthscale_constraint): Positive()\n         )\n         (outputscale_prior): GammaPrior()\n         (raw_outputscale_constraint): Positive()\n       )\n       (outcome_transform): Standardize()\n       (input_transform): Normalize()\n     )\n   )\n   (likelihood): LikelihoodList(\n     (likelihoods): ModuleList(\n       (0): GaussianLikelihood(\n         (noise_covar): HomoskedasticNoise(\n           (noise_prior): GammaPrior()\n           (raw_noise_constraint): GreaterThan(1.000E-04)\n         )\n       )\n     )\n   )\n ),\n 'turbo_controller': None,\n 'use_cuda': False,\n 'model_constructor': {'name': 'standard',\n  'use_low_noise_prior': True,\n  'covar_modules': {},\n  'mean_modules': {},\n  'trainable_mean_keys': []},\n 'numerical_optimizer': {'name': 'LBFGS',\n  'n_raw_samples': 20,\n  'n_restarts': 20,\n  'max_iter': 2000},\n 'max_travel_distances': None,\n 'n_monte_carlo_samples': 128,\n 'beta': 2.0}</pre> In\u00a0[8]: Copied! <pre>\n</pre>"},{"location":"examples/single_objective_bayes_opt/bo_tutorial/#basic-bayesian-optimization","title":"Basic Bayesian Optimization\u00b6","text":"<p>In this tutorial we demonstrate the use of Xopt to preform Bayesian Optimization on a simple test problem.</p>"},{"location":"examples/single_objective_bayes_opt/bo_tutorial/#define-the-test-problem","title":"Define the test problem\u00b6","text":"<p>Here we define a simple optimization problem, where we attempt to minimize the sin function in the domian [0,2*pi]. Note that the function used to evaluate the objective function takes a dictionary as input and returns a dictionary as the output.</p>"},{"location":"examples/single_objective_bayes_opt/bo_tutorial/#create-xopt-objects","title":"Create Xopt objects\u00b6","text":"<p>Create the evaluator to evaluate our test function and create a generator that uses the Upper Confidence Bound acqusition function to perform Bayesian Optimization.</p>"},{"location":"examples/single_objective_bayes_opt/bo_tutorial/#generate-and-evaluate-initial-points","title":"Generate and evaluate initial points\u00b6","text":"<p>To begin optimization, we must generate some random initial data points. The first call to <code>X.step()</code> will generate and evaluate a number of randomly points specified by the generator. Note that if we add data to xopt before calling <code>X.step()</code> by assigning the data to <code>X.data</code>, calls to <code>X.step()</code> will ignore the random generation and proceed to generating points via Bayesian optimization.</p>"},{"location":"examples/single_objective_bayes_opt/bo_tutorial/#do-bayesian-optimization-steps","title":"Do bayesian optimization steps\u00b6","text":"<p>To perform optimization we simply call <code>X.step()</code> in a loop. This allows us to do intermediate tasks in between optimization steps, such as examining the model and acquisition function at each step (as we demonstrate here).</p>"},{"location":"examples/single_objective_bayes_opt/bo_tutorial/#getting-the-optimization-result","title":"Getting the optimization result\u00b6","text":"<p>To get the best point (without evaluating it) we ask the generator to predict the optimum based on the posterior mean.</p>"},{"location":"examples/single_objective_bayes_opt/bo_tutorial/#customizing-optimization","title":"Customizing optimization\u00b6","text":"<p>Each generator has a set of options that can be modified to effect optimization behavior</p>"},{"location":"examples/single_objective_bayes_opt/custom_model/","title":"Custom GP modeling for BO","text":"In\u00a0[1]: Copied! <pre># Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport torch\nfrom xopt.vocs import VOCS\n\nmy_vocs = VOCS(\n    variables = {\"x\":[0,1]},\n    objectives = {\"y\":\"MAXIMIZE\"},\n    constraints = {\"c\": [\"LESS_THAN\", 0]}\n)\n</pre> # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import matplotlib.pyplot as plt import pandas as pd import torch from xopt.vocs import VOCS  my_vocs = VOCS(     variables = {\"x\":[0,1]},     objectives = {\"y\":\"MAXIMIZE\"},     constraints = {\"c\": [\"LESS_THAN\", 0]} )  In\u00a0[2]: Copied! <pre># define test functions\ndef y(x):\n    return torch.sin(2*3.14*x)\n\ndef c(x):\n    return 5.0*torch.cos(2*3.14*x + 0.25)\n\ntest_x = torch.linspace(*torch.tensor(my_vocs.bounds.flatten()), 100)\n\n# define training data to pass to the generator\ntrain_x = torch.tensor((0.2,0.5, 0.6))\ntrain_y = y(train_x)\ntrain_c = c(train_x)\n\ntraining_data = pd.DataFrame(\n    {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": train_c}\n)\n\ndef plot_ground_truth():\n    fig,ax = plt.subplots()\n    ax.plot(test_x, y(test_x),'--C0')\n    ax.plot(test_x, c(test_x),'--C1')\n    ax.plot(train_x, train_y,'oC0')\n    ax.plot(train_x, train_c,'oC1')\n\n    return ax\nplot_ground_truth()\n</pre> # define test functions def y(x):     return torch.sin(2*3.14*x)  def c(x):     return 5.0*torch.cos(2*3.14*x + 0.25)  test_x = torch.linspace(*torch.tensor(my_vocs.bounds.flatten()), 100)  # define training data to pass to the generator train_x = torch.tensor((0.2,0.5, 0.6)) train_y = y(train_x) train_c = c(train_x)  training_data = pd.DataFrame(     {\"x\": train_x.numpy(), \"y\": train_y.numpy(), \"c\": train_c} )  def plot_ground_truth():     fig,ax = plt.subplots()     ax.plot(test_x, y(test_x),'--C0')     ax.plot(test_x, c(test_x),'--C1')     ax.plot(train_x, train_y,'oC0')     ax.plot(train_x, train_c,'oC1')      return ax plot_ground_truth() Out[2]: <pre>&lt;Axes: &gt;</pre> In\u00a0[3]: Copied! <pre>from xopt.generators.bayesian.expected_improvement import ExpectedImprovementGenerator\nfrom xopt.generators.bayesian.models.standard import StandardModelConstructor\nfrom gpytorch.kernels import PeriodicKernel, ScaleKernel\n\n\n# note the creation of options beforehand\n# specify a periodic kernel for each output (objectives and constraints)\ncovar_module = {\"y\": ScaleKernel(PeriodicKernel())}\nmodel_constructor = StandardModelConstructor(\n    covar_modules=covar_module\n)\ngenerator = ExpectedImprovementGenerator(\n    vocs=my_vocs, model_constructor=model_constructor\n)\ngenerator\n</pre> from xopt.generators.bayesian.expected_improvement import ExpectedImprovementGenerator from xopt.generators.bayesian.models.standard import StandardModelConstructor from gpytorch.kernels import PeriodicKernel, ScaleKernel   # note the creation of options beforehand # specify a periodic kernel for each output (objectives and constraints) covar_module = {\"y\": ScaleKernel(PeriodicKernel())} model_constructor = StandardModelConstructor(     covar_modules=covar_module ) generator = ExpectedImprovementGenerator(     vocs=my_vocs, model_constructor=model_constructor ) generator Out[3]: <pre>ExpectedImprovementGenerator(vocs=VOCS(variables={'x': [0.0, 1.0]}, constraints={'c': ['LESS_THAN', 0.0]}, objectives={'y': 'MAXIMIZE'}, constants={}, observables=[]), data=Empty DataFrame\nColumns: []\nIndex: [], model=None, turbo_controller=None, use_cuda=False, model_constructor=StandardModelConstructor(name='standard', use_low_noise_prior=True, covar_modules={'y': ScaleKernel(\n  (base_kernel): PeriodicKernel(\n    (raw_lengthscale_constraint): Positive()\n    (raw_period_length_constraint): Positive()\n  )\n  (raw_outputscale_constraint): Positive()\n)}, mean_modules={}, trainable_mean_keys=[]), numerical_optimizer=LBFGSOptimizer(name='LBFGS', n_raw_samples=20, n_restarts=20, max_iter=2000), max_travel_distances=None, n_monte_carlo_samples=128)</pre> In\u00a0[4]: Copied! <pre># view custom model from data\ngenerator.add_data(training_data)\nmodel = generator.train_model()\n\nfig,ax = plt.subplots(2,1, sharex=\"all\")\nfig.set_size_inches(6,6)\nwith torch.no_grad():\n    post = model.posterior(test_x.reshape(-1,1,1).double())\n\n    for i in range(post.event_shape[-1]):\n        mean = post.mean[...,i].squeeze()\n        l,u = post.mvn.confidence_region()\n        ax[0].plot(test_x, mean,f\"C{i}\", label=generator.vocs.output_names[i])\n        ax[0].fill_between(test_x, l[...,i].squeeze(), u[...,i].squeeze(), alpha=0.5)\n\n    # plot ground truth\n    ax[0].plot(test_x, y(test_x),'C0--', label=\"y ground truth\")\n    ax[0].plot(test_x, c(test_x),'C1--', label=\"c ground truth\")\n\n    # plot training data\n    ax[0].plot(train_x, train_y,\"C0o\", label=\"y data\")\n    ax[0].plot(train_x, train_c,\"C1o\", label=\"c data\")\n    ax[0].legend()\n\n\n    acq = generator.get_acquisition(model)(test_x.reshape(-1,1,1).double())\n\n    ax[1].plot(test_x, acq, label='Acquisition Function')\n    ax[1].legend()\n</pre> # view custom model from data generator.add_data(training_data) model = generator.train_model()  fig,ax = plt.subplots(2,1, sharex=\"all\") fig.set_size_inches(6,6) with torch.no_grad():     post = model.posterior(test_x.reshape(-1,1,1).double())      for i in range(post.event_shape[-1]):         mean = post.mean[...,i].squeeze()         l,u = post.mvn.confidence_region()         ax[0].plot(test_x, mean,f\"C{i}\", label=generator.vocs.output_names[i])         ax[0].fill_between(test_x, l[...,i].squeeze(), u[...,i].squeeze(), alpha=0.5)      # plot ground truth     ax[0].plot(test_x, y(test_x),'C0--', label=\"y ground truth\")     ax[0].plot(test_x, c(test_x),'C1--', label=\"c ground truth\")      # plot training data     ax[0].plot(train_x, train_y,\"C0o\", label=\"y data\")     ax[0].plot(train_x, train_c,\"C1o\", label=\"c data\")     ax[0].legend()       acq = generator.get_acquisition(model)(test_x.reshape(-1,1,1).double())      ax[1].plot(test_x, acq, label='Acquisition Function')     ax[1].legend() In\u00a0[5]: Copied! <pre>model\n</pre> model Out[5]: <pre>ModelListGP(\n  (models): ModuleList(\n    (0): SingleTaskGP(\n      (likelihood): GaussianLikelihood(\n        (noise_covar): HomoskedasticNoise(\n          (noise_prior): GammaPrior()\n          (raw_noise_constraint): GreaterThan(1.000E-04)\n        )\n      )\n      (mean_module): ConstantMean()\n      (covar_module): ScaleKernel(\n        (base_kernel): PeriodicKernel(\n          (raw_lengthscale_constraint): Positive()\n          (raw_period_length_constraint): Positive()\n        )\n        (raw_outputscale_constraint): Positive()\n      )\n      (outcome_transform): Standardize()\n      (input_transform): Normalize()\n    )\n    (1): SingleTaskGP(\n      (likelihood): GaussianLikelihood(\n        (noise_covar): HomoskedasticNoise(\n          (noise_prior): GammaPrior()\n          (raw_noise_constraint): GreaterThan(1.000E-04)\n        )\n      )\n      (mean_module): ConstantMean()\n      (covar_module): ScaleKernel(\n        (base_kernel): MaternKernel(\n          (lengthscale_prior): GammaPrior()\n          (raw_lengthscale_constraint): Positive()\n        )\n        (outputscale_prior): GammaPrior()\n        (raw_outputscale_constraint): Positive()\n      )\n      (outcome_transform): Standardize()\n      (input_transform): Normalize()\n    )\n  )\n  (likelihood): LikelihoodList(\n    (likelihoods): ModuleList(\n      (0-1): 2 x GaussianLikelihood(\n        (noise_covar): HomoskedasticNoise(\n          (noise_prior): GammaPrior()\n          (raw_noise_constraint): GreaterThan(1.000E-04)\n        )\n      )\n    )\n  )\n)</pre> In\u00a0[6]: Copied! <pre># get the next point from the generator\ngenerator.generate(1)\n</pre> # get the next point from the generator generator.generate(1) Out[6]: x 0 0.272581 In\u00a0[7]: Copied! <pre>class ConstraintPrior(torch.nn.Module):\n    def forward(self, X):\n        return c(X).squeeze(dim=-1)\n\nmodel_constructor = StandardModelConstructor(\n    mean_modules={\"c\":ConstraintPrior()}\n)\ngenerator = ExpectedImprovementGenerator(\n    vocs=my_vocs, model_constructor=model_constructor)\n</pre> class ConstraintPrior(torch.nn.Module):     def forward(self, X):         return c(X).squeeze(dim=-1)  model_constructor = StandardModelConstructor(     mean_modules={\"c\":ConstraintPrior()} ) generator = ExpectedImprovementGenerator(     vocs=my_vocs, model_constructor=model_constructor) In\u00a0[8]: Copied! <pre># view custom model from data\ngenerator.add_data(training_data)\nmodel = generator.train_model()\ntest_x = torch.linspace(0,5, 100)\n\n\nfig,ax = plt.subplots(2,1, sharex=\"all\")\nfig.set_size_inches(6,6)\nwith torch.no_grad():\n    post = model.posterior(test_x.reshape(-1,1,1).double())\n\n    for i in range(post.event_shape[-1]):\n        mean = post.mean[...,i].squeeze()\n        l,u = post.mvn.confidence_region()\n        ax[0].plot(test_x, mean,f\"C{i}\", label=generator.vocs.output_names[i])\n        ax[0].fill_between(test_x, l[...,i].squeeze(), u[...,i].squeeze(), alpha=0.5)\n\n    # plot ground truth\n    ax[0].plot(test_x, y(test_x),'C0--', label=\"y ground truth\")\n    ax[0].plot(test_x, c(test_x),'C1--', label=\"c ground truth\")\n\n    # plot training data\n    ax[0].plot(train_x, train_y,\"C0o\", label=\"y data\")\n    ax[0].plot(train_x, train_c,\"C1o\", label=\"c data\")\n    ax[0].legend()\n\n\n    acq = generator.get_acquisition(model)(test_x.reshape(-1,1,1).double())\n\n    ax[1].plot(test_x, acq, label='Acquisition Function')\n    ax[1].legend()\n</pre> # view custom model from data generator.add_data(training_data) model = generator.train_model() test_x = torch.linspace(0,5, 100)   fig,ax = plt.subplots(2,1, sharex=\"all\") fig.set_size_inches(6,6) with torch.no_grad():     post = model.posterior(test_x.reshape(-1,1,1).double())      for i in range(post.event_shape[-1]):         mean = post.mean[...,i].squeeze()         l,u = post.mvn.confidence_region()         ax[0].plot(test_x, mean,f\"C{i}\", label=generator.vocs.output_names[i])         ax[0].fill_between(test_x, l[...,i].squeeze(), u[...,i].squeeze(), alpha=0.5)      # plot ground truth     ax[0].plot(test_x, y(test_x),'C0--', label=\"y ground truth\")     ax[0].plot(test_x, c(test_x),'C1--', label=\"c ground truth\")      # plot training data     ax[0].plot(train_x, train_y,\"C0o\", label=\"y data\")     ax[0].plot(train_x, train_c,\"C1o\", label=\"c data\")     ax[0].legend()       acq = generator.get_acquisition(model)(test_x.reshape(-1,1,1).double())      ax[1].plot(test_x, acq, label='Acquisition Function')     ax[1].legend() In\u00a0[9]: Copied! <pre>model\n</pre> model Out[9]: <pre>ModelListGP(\n  (models): ModuleList(\n    (0): SingleTaskGP(\n      (likelihood): GaussianLikelihood(\n        (noise_covar): HomoskedasticNoise(\n          (noise_prior): GammaPrior()\n          (raw_noise_constraint): GreaterThan(1.000E-04)\n        )\n      )\n      (mean_module): ConstantMean()\n      (covar_module): ScaleKernel(\n        (base_kernel): MaternKernel(\n          (lengthscale_prior): GammaPrior()\n          (raw_lengthscale_constraint): Positive()\n        )\n        (outputscale_prior): GammaPrior()\n        (raw_outputscale_constraint): Positive()\n      )\n      (outcome_transform): Standardize()\n      (input_transform): Normalize()\n    )\n    (1): SingleTaskGP(\n      (likelihood): GaussianLikelihood(\n        (noise_covar): HomoskedasticNoise(\n          (noise_prior): GammaPrior()\n          (raw_noise_constraint): GreaterThan(1.000E-04)\n        )\n      )\n      (mean_module): CustomMean(\n        (_model): ConstraintPrior()\n        (input_transformer): Normalize()\n        (outcome_transformer): Standardize()\n      )\n      (covar_module): ScaleKernel(\n        (base_kernel): MaternKernel(\n          (lengthscale_prior): GammaPrior()\n          (raw_lengthscale_constraint): Positive()\n        )\n        (outputscale_prior): GammaPrior()\n        (raw_outputscale_constraint): Positive()\n      )\n      (outcome_transform): Standardize()\n      (input_transform): Normalize()\n    )\n  )\n  (likelihood): LikelihoodList(\n    (likelihoods): ModuleList(\n      (0-1): 2 x GaussianLikelihood(\n        (noise_covar): HomoskedasticNoise(\n          (noise_prior): GammaPrior()\n          (raw_noise_constraint): GreaterThan(1.000E-04)\n        )\n      )\n    )\n  )\n)</pre> In\u00a0[10]: Copied! <pre>list(model.named_parameters())\n</pre> list(model.named_parameters()) Out[10]: <pre>[('models.0.likelihood.noise_covar.raw_noise',\n  Parameter containing:\n  tensor([-22.1123], dtype=torch.float64, requires_grad=True)),\n ('models.0.mean_module.raw_constant',\n  Parameter containing:\n  tensor(-0.2222, dtype=torch.float64, requires_grad=True)),\n ('models.0.covar_module.raw_outputscale',\n  Parameter containing:\n  tensor(3.0725, dtype=torch.float64, requires_grad=True)),\n ('models.0.covar_module.base_kernel.raw_lengthscale',\n  Parameter containing:\n  tensor([[-0.7308]], dtype=torch.float64, requires_grad=True)),\n ('models.1.likelihood.noise_covar.raw_noise',\n  Parameter containing:\n  tensor([-19.7026], dtype=torch.float64, requires_grad=True)),\n ('models.1.covar_module.raw_outputscale',\n  Parameter containing:\n  tensor(-6.7636, dtype=torch.float64, requires_grad=True)),\n ('models.1.covar_module.base_kernel.raw_lengthscale',\n  Parameter containing:\n  tensor([[-0.5597]], dtype=torch.float64, requires_grad=True))]</pre> In\u00a0[10]: Copied! <pre>\n</pre>"},{"location":"examples/single_objective_bayes_opt/custom_model/#custom-gp-modeling-for-bo","title":"Custom GP modeling for BO\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/custom_model/#custom-kernel-definition","title":"Custom kernel definition\u00b6","text":"<p>In this example we know that the target optimization function is periodic, so it makes sense to use a periodic kernel for the GP model with no noise. Here we define a function to create that model.</p>"},{"location":"examples/single_objective_bayes_opt/custom_model/#custom-prior-mean-function","title":"Custom prior mean function\u00b6","text":"<p>Here we assume we have some knowledge of the ground truth function, which we can take advantage of to speed up optimization. This \"prior mean\" function is specified by a pytorch module.</p>"},{"location":"examples/single_objective_bayes_opt/multi_fidelity_simple/","title":"Multi-fidelity BO","text":"In\u00a0[1]: Copied! <pre># set values if testing\nimport os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nN_MC_SAMPLES = 1 if SMOKE_TEST else 128\nN_RESTARTS = 1 if SMOKE_TEST else 20\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\n\nimport pandas as pd\nimport torch\n\ndef test_function(input_dict):\n    x = input_dict[\"x\"]\n    s = input_dict[\"s\"]\n    return {\"f\":np.sin(x + (1.0 - s)) * np.exp((-s+1)/2)}\n\n\n# define vocs\nfrom xopt import VOCS\nvocs = VOCS(\n    variables={\n        \"x\": [0, 2*math.pi],\n    },\n    objectives={\"f\": \"MINIMIZE\"},\n)\n</pre> # set values if testing import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") N_MC_SAMPLES = 1 if SMOKE_TEST else 128 N_RESTARTS = 1 if SMOKE_TEST else 20  import matplotlib.pyplot as plt import numpy as np import math  import pandas as pd import torch  def test_function(input_dict):     x = input_dict[\"x\"]     s = input_dict[\"s\"]     return {\"f\":np.sin(x + (1.0 - s)) * np.exp((-s+1)/2)}   # define vocs from xopt import VOCS vocs = VOCS(     variables={         \"x\": [0, 2*math.pi],     },     objectives={\"f\": \"MINIMIZE\"}, ) In\u00a0[2]: Copied! <pre>test_x = np.linspace(*vocs.bounds, 1000)\nfidelities = [0.0,0.5,1.0]\n\nfig,ax = plt.subplots()\nfor ele in fidelities:\n    f = test_function({\"x\":test_x, \"s\":ele})[\"f\"]\n    ax.plot(test_x, f,label=f\"s:{ele}\")\n\nax.legend()\n</pre> test_x = np.linspace(*vocs.bounds, 1000) fidelities = [0.0,0.5,1.0]  fig,ax = plt.subplots() for ele in fidelities:     f = test_function({\"x\":test_x, \"s\":ele})[\"f\"]     ax.plot(test_x, f,label=f\"s:{ele}\")  ax.legend() Out[2]: <pre>&lt;matplotlib.legend.Legend at 0x7f8704cf3a60&gt;</pre> In\u00a0[3]: Copied! <pre># create xopt object\nfrom xopt.generators.bayesian import MultiFidelityGenerator\nfrom xopt import Evaluator, Xopt\n\n# get and modify default generator options\ngenerator = MultiFidelityGenerator(vocs=vocs)\n\n# specify a custom cost function based on the fidelity parameter\ngenerator.cost_function = lambda s: s + 0.001\n\ngenerator.numerical_optimizer.n_restarts = N_RESTARTS\ngenerator.n_monte_carlo_samples = N_MC_SAMPLES\n\n# pass options to the generator\nevaluator = Evaluator(function=test_function)\n\nX = Xopt(vocs=vocs, generator=generator, evaluator=evaluator)\nX\n</pre> # create xopt object from xopt.generators.bayesian import MultiFidelityGenerator from xopt import Evaluator, Xopt  # get and modify default generator options generator = MultiFidelityGenerator(vocs=vocs)  # specify a custom cost function based on the fidelity parameter generator.cost_function = lambda s: s + 0.001  generator.numerical_optimizer.n_restarts = N_RESTARTS generator.n_monte_carlo_samples = N_MC_SAMPLES  # pass options to the generator evaluator = Evaluator(function=test_function)  X = Xopt(vocs=vocs, generator=generator, evaluator=evaluator) X Out[3]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: null}\ngenerator:\n  name: multi_fidelity\n  model: null\n  turbo_controller: null\n  use_cuda: false\n  model_constructor:\n    name: standard\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n    trainable_mean_keys: []\n  numerical_optimizer: {name: LBFGS, n_raw_samples: 20, n_restarts: 20, max_iter: 2000}\n  max_travel_distances: null\n  n_monte_carlo_samples: 128\n  reference_point: {f: 100.0, s: 0.0}\n  fidelity_parameter: s\n  cost_function: __main__.&lt;lambda&gt;\nevaluator:\n  function: __main__.test_function\n  max_workers: 1\n  function_kwargs: {}\n  vectorized: false\nvocs:\n  variables:\n    x: [0.0, 6.283185307179586]\n    s: [0, 1]\n  constraints: {}\n  objectives: {f: MINIMIZE, s: MAXIMIZE}\n  constants: {}\n  observables: []\n</pre> In\u00a0[4]: Copied! <pre># evaluate initial points at mixed fidelities to seed optimization\nX.evaluate_data(pd.DataFrame({\n    \"x\":[math.pi / 4, math.pi / 2., math.pi],\"s\":[0.0, 0.25, 0.0]\n}))\n</pre> # evaluate initial points at mixed fidelities to seed optimization X.evaluate_data(pd.DataFrame({     \"x\":[math.pi / 4, math.pi / 2., math.pi],\"s\":[0.0, 0.25, 0.0] })) Out[4]: x s f xopt_runtime xopt_error 1 0.785398 0.00 1.610902 0.000023 False 2 1.570796 0.25 1.064601 0.000006 False 3 3.141593 0.00 -1.387351 0.000003 False In\u00a0[5]: Copied! <pre># get the total cost of previous observations based on the cost function\nX.generator.calculate_total_cost()\n</pre> # get the total cost of previous observations based on the cost function X.generator.calculate_total_cost() Out[5]: <pre>tensor(0.2530, dtype=torch.float64)</pre> In\u00a0[6]: Copied! <pre># run optimization until the cost budget is exhausted\n# we subtract one unit to make sure we don't go over our eval budget\nbudget = 10\nwhile X.generator.calculate_total_cost() &lt; budget - 1:\n    X.step()\n    print(f\"n_samples: {len(X.data)} \"\n          f\"budget used: {X.generator.calculate_total_cost():.4} \"\n          f\"hypervolume: {X.generator.calculate_hypervolume():.4}\")\n</pre> # run optimization until the cost budget is exhausted # we subtract one unit to make sure we don't go over our eval budget budget = 10 while X.generator.calculate_total_cost() &lt; budget - 1:     X.step()     print(f\"n_samples: {len(X.data)} \"           f\"budget used: {X.generator.calculate_total_cost():.4} \"           f\"hypervolume: {X.generator.calculate_hypervolume():.4}\")  <pre>n_samples: 4 budget used: 0.6307 hypervolume: 37.23\nn_samples: 5 budget used: 1.169 hypervolume: 53.12\nn_samples: 6 budget used: 1.891 hypervolume: 72.01\nn_samples: 7 budget used: 2.817 hypervolume: 93.1\nn_samples: 8 budget used: 3.818 hypervolume: 100.6\nn_samples: 9 budget used: 4.819 hypervolume: 100.8\nn_samples: 10 budget used: 5.82 hypervolume: 100.8\nn_samples: 11 budget used: 6.821 hypervolume: 100.8\nn_samples: 12 budget used: 6.831 hypervolume: 100.8\nn_samples: 13 budget used: 7.832 hypervolume: 101.0\nn_samples: 14 budget used: 8.024 hypervolume: 101.1\nn_samples: 15 budget used: 8.452 hypervolume: 101.2\nn_samples: 16 budget used: 9.146 hypervolume: 101.2\n</pre> In\u00a0[7]: Copied! <pre>X.data\n</pre> X.data Out[7]: x s f xopt_runtime xopt_error 1 0.785398 0.000000 1.610902 0.000023 False 2 1.570796 0.250000 1.064601 0.000006 False 3 3.141593 0.000000 -1.387351 0.000003 False 4 1.139838 0.376659 1.340509 0.000016 False 5 1.637258 0.536944 1.087897 0.000015 False 6 2.664906 0.721754 0.226567 0.000015 False 7 3.801251 0.924537 -0.696467 0.000018 False 8 6.207738 1.000000 -0.075376 0.000017 False 9 5.278773 1.000000 -0.843847 0.000015 False 10 0.000000 1.000000 0.000000 0.000016 False 11 1.642512 1.000000 0.997430 0.000017 False 12 4.965574 0.009000 -0.526592 0.000016 False 13 4.626086 1.000000 -0.996278 0.000017 False 14 3.777406 0.190833 -1.486832 0.000016 False 15 3.971425 0.427254 -1.312793 0.000015 False 16 4.421071 0.692966 -1.165784 0.000017 False In\u00a0[8]: Copied! <pre># augment the bounds to add the fidelity parameter\nbounds = generator.vocs.bounds[::-1]\n\nmodel = generator.model\n\n# create mesh\nn = 50\nx = torch.linspace(*bounds.T[0], n)\ny = torch.linspace(*bounds.T[1], n)\nxx, yy = torch.meshgrid(x, y)\npts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()\n\nacq_func = generator.get_acquisition(model)\n\nvariable_names = generator.vocs.variable_names\nwith torch.no_grad():\n    print(pts.shape)\n    # get the model posterior\n    post = model.posterior(pts.unsqueeze(-2))\n    f_mean = post.mean[..., 0]\n    s_mean = post.mean[..., 1]\n\n\n    acq_pts = pts.unsqueeze(1)\n    acq = acq_func(acq_pts)\n\n    fig, ax0 = plt.subplots()\n    c = ax0.pcolor(xx, yy, f_mean.reshape(n, n))\n    fig.colorbar(c)\n    ax0.set_title(\"f-Mean prediction\")\n\n    fig, ax1 = plt.subplots()\n    c = ax1.pcolor(xx, yy, s_mean.reshape(n, n))\n    fig.colorbar(c)\n    ax1.set_title(\"s-Mean prediction\")\n\n    fig, ax2 = plt.subplots()\n    c = ax2.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")\n    fig.colorbar(c)\n    ax2.set_title(\"Acquisition function\")\n\n    X.data.plot(x=variable_names[0], y=variable_names[1],ax=ax2,style=\"oC1\")\n\n    # mark the next observation\n    next_pt = pts[torch.argmax(acq)]\n    ax2.plot(*next_pt,\"*r\",ms=10)\n\n    # mark the optimum at the max fidelity\n    best_loc = [1.0, 1.5*np.pi]\n    ax2.plot(*best_loc, \"*\",c=\"C4\")\n\n    for a in [ax0,ax1,ax2]:\n        a.set_xlabel(variable_names[0])\n        a.set_ylabel(variable_names[1])\n</pre> # augment the bounds to add the fidelity parameter bounds = generator.vocs.bounds[::-1]  model = generator.model  # create mesh n = 50 x = torch.linspace(*bounds.T[0], n) y = torch.linspace(*bounds.T[1], n) xx, yy = torch.meshgrid(x, y) pts = torch.hstack([ele.reshape(-1, 1) for ele in (xx, yy)]).double()  acq_func = generator.get_acquisition(model)  variable_names = generator.vocs.variable_names with torch.no_grad():     print(pts.shape)     # get the model posterior     post = model.posterior(pts.unsqueeze(-2))     f_mean = post.mean[..., 0]     s_mean = post.mean[..., 1]       acq_pts = pts.unsqueeze(1)     acq = acq_func(acq_pts)      fig, ax0 = plt.subplots()     c = ax0.pcolor(xx, yy, f_mean.reshape(n, n))     fig.colorbar(c)     ax0.set_title(\"f-Mean prediction\")      fig, ax1 = plt.subplots()     c = ax1.pcolor(xx, yy, s_mean.reshape(n, n))     fig.colorbar(c)     ax1.set_title(\"s-Mean prediction\")      fig, ax2 = plt.subplots()     c = ax2.pcolor(xx, yy, acq.reshape(n, n), cmap=\"Blues\")     fig.colorbar(c)     ax2.set_title(\"Acquisition function\")      X.data.plot(x=variable_names[0], y=variable_names[1],ax=ax2,style=\"oC1\")      # mark the next observation     next_pt = pts[torch.argmax(acq)]     ax2.plot(*next_pt,\"*r\",ms=10)      # mark the optimum at the max fidelity     best_loc = [1.0, 1.5*np.pi]     ax2.plot(*best_loc, \"*\",c=\"C4\")      for a in [ax0,ax1,ax2]:         a.set_xlabel(variable_names[0])         a.set_ylabel(variable_names[1])  <pre>torch.Size([2500, 2])\n</pre> <pre>/usr/share/miniconda3/envs/xopt-dev/lib/python3.9/site-packages/torch/functional.py:504: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at /home/conda/feedstock_root/build_artifacts/pytorch-recipe_1680607361662/work/aten/src/ATen/native/TensorShape.cpp:3483.)\n  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]\n/usr/share/miniconda3/envs/xopt-dev/lib/python3.9/site-packages/linear_operator/utils/cholesky.py:40: NumericalWarning: A not p.d., added jitter of 1.0e-08 to the diagonal\n  warnings.warn(\n</pre> In\u00a0[9]: Copied! <pre>X.data.plot(x=\"f\", y=\"s\", style=\"o-\")\n</pre> X.data.plot(x=\"f\", y=\"s\", style=\"o-\") Out[9]: <pre>&lt;Axes: xlabel='f'&gt;</pre> In\u00a0[10]: Copied! <pre>X.data\n</pre> X.data Out[10]: x s f xopt_runtime xopt_error 1 0.785398 0.000000 1.610902 0.000023 False 2 1.570796 0.250000 1.064601 0.000006 False 3 3.141593 0.000000 -1.387351 0.000003 False 4 1.139838 0.376659 1.340509 0.000016 False 5 1.637258 0.536944 1.087897 0.000015 False 6 2.664906 0.721754 0.226567 0.000015 False 7 3.801251 0.924537 -0.696467 0.000018 False 8 6.207738 1.000000 -0.075376 0.000017 False 9 5.278773 1.000000 -0.843847 0.000015 False 10 0.000000 1.000000 0.000000 0.000016 False 11 1.642512 1.000000 0.997430 0.000017 False 12 4.965574 0.009000 -0.526592 0.000016 False 13 4.626086 1.000000 -0.996278 0.000017 False 14 3.777406 0.190833 -1.486832 0.000016 False 15 3.971425 0.427254 -1.312793 0.000015 False 16 4.421071 0.692966 -1.165784 0.000017 False In\u00a0[11]: Copied! <pre># get optimal value at max fidelity, note that the actual maximum is 4.71\nX.generator.get_optimum().to_dict()\n</pre> # get optimal value at max fidelity, note that the actual maximum is 4.71 X.generator.get_optimum().to_dict() Out[11]: <pre>{'s': {0: 1.0}, 'x': {0: 4.7343374872993005}}</pre>"},{"location":"examples/single_objective_bayes_opt/multi_fidelity_simple/#multi-fidelity-bo","title":"Multi-fidelity BO\u00b6","text":"<p>Here we demonstrate how Multi-Fidelity Bayesian Optimization can be used to reduce the computational cost of optimization by using lower fidelity surrogate models. The goal is to learn functional dependance of the objective on input variables at low fidelities (which are cheap to compute) and use that information to quickly find the best objective value at higher fidelities (which are more expensive to compute). This assumes that there is some learnable correlation between the objective values at different fidelities.</p> <p>Xopt implements the MOMF (https://botorch.org/tutorials/Multi_objective_multi_fidelity_BO) algorithm which can be used to solve both single (this notebook) and multi-objective (see multi-objective BO section) multi-fidelity problems. Under the hood this algorithm attempts to solve a multi-objective optimization problem, where one objective is the function objective and the other is a simple fidelity objective, weighted by the <code>cost_function</code> of evaluating the objective at a given fidelity.</p>"},{"location":"examples/single_objective_bayes_opt/multi_fidelity_simple/#plot-the-test-function-in-input-fidelity-space","title":"plot the test function in input + fidelity space\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/multi_fidelity_simple/#plot-the-model-prediction-and-acquisition-function-inside-the-optimization-space","title":"Plot the model prediction and acquisition function inside the optimization space\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/multi_fidelity_simple/#plot-the-pareto-front","title":"Plot the Pareto front\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/time_dependent_bo/","title":"Time dependent upper confidence bound","text":"In\u00a0[1]: Copied! <pre># set values if testing\nimport os\nSMOKE_TEST = os.environ.get(\"SMOKE_TEST\")\nN_MC_SAMPLES = 1 if SMOKE_TEST else 128\nNUM_RESTARTS = 1 if SMOKE_TEST else 20\n\nfrom xopt.generators.bayesian.upper_confidence_bound import TDUpperConfidenceBoundGenerator\nfrom xopt.vocs import VOCS\nfrom xopt.evaluator import Evaluator\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> # set values if testing import os SMOKE_TEST = os.environ.get(\"SMOKE_TEST\") N_MC_SAMPLES = 1 if SMOKE_TEST else 128 NUM_RESTARTS = 1 if SMOKE_TEST else 20  from xopt.generators.bayesian.upper_confidence_bound import TDUpperConfidenceBoundGenerator from xopt.vocs import VOCS from xopt.evaluator import Evaluator import warnings warnings.filterwarnings(\"ignore\") In\u00a0[2]: Copied! <pre># test evaluate function and vocs\nimport time\nfrom xopt import Xopt\n\nstart_time = time.time()\ndef f(inputs):\n    x_ = inputs[\"x\"]\n    current_time = time.time()\n    t_ = current_time - start_time\n    y_ = 5*(x_ - t_*1e-2)**2\n    return {\"y\":y_, \"time\":current_time}\n\nvariables = {\"x\":[-1,1]}\nobjectives = {\"y\": \"MINIMIZE\"}\n\nvocs = VOCS(variables=variables, objectives=objectives)\nprint(vocs)\n\nevaluator = Evaluator(function=f)\ngenerator = TDUpperConfidenceBoundGenerator(vocs=vocs)\ngenerator.added_time=1.0\ngenerator.beta = 2.0\ngenerator.n_monte_carlo_samples = N_MC_SAMPLES\ngenerator.numerical_optimizer.n_restarts = NUM_RESTARTS\n\nX = Xopt(evaluator=evaluator, generator=generator, vocs=vocs)\nX\n</pre> # test evaluate function and vocs import time from xopt import Xopt  start_time = time.time() def f(inputs):     x_ = inputs[\"x\"]     current_time = time.time()     t_ = current_time - start_time     y_ = 5*(x_ - t_*1e-2)**2     return {\"y\":y_, \"time\":current_time}  variables = {\"x\":[-1,1]} objectives = {\"y\": \"MINIMIZE\"}  vocs = VOCS(variables=variables, objectives=objectives) print(vocs)  evaluator = Evaluator(function=f) generator = TDUpperConfidenceBoundGenerator(vocs=vocs) generator.added_time=1.0 generator.beta = 2.0 generator.n_monte_carlo_samples = N_MC_SAMPLES generator.numerical_optimizer.n_restarts = NUM_RESTARTS  X = Xopt(evaluator=evaluator, generator=generator, vocs=vocs) X <pre>variables={'x': [-1.0, 1.0]} constraints={} objectives={'y': 'MINIMIZE'} constants={} observables=[]\n</pre> Out[2]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: null}\ngenerator:\n  name: time_dependent_upper_confidence_bound\n  model: null\n  turbo_controller: null\n  use_cuda: false\n  model_constructor:\n    name: time_dependent\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n    trainable_mean_keys: []\n  numerical_optimizer: {name: LBFGS, n_raw_samples: 20, n_restarts: 20, max_iter: 2000}\n  max_travel_distances: null\n  n_monte_carlo_samples: 128\n  beta: 2.0\n  target_prediction_time: null\n  added_time: 1.0\nevaluator:\n  function: __main__.f\n  max_workers: 1\n  function_kwargs: {}\n  vectorized: false\nvocs:\n  variables:\n    x: [-1.0, 1.0]\n  constraints: {}\n  objectives: {y: MINIMIZE}\n  constants: {}\n  observables: []\n</pre> In\u00a0[3]: Copied! <pre>X.random_evaluate(1)\n\nfor _ in range(20):\n    # note that in this example we can ignore warnings if computation time is greater\n    # than added time\n    with warnings.catch_warnings():\n        warnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n        X.step()\n        time.sleep(0.1)\n\nprint(X.generator.generate(1))\n</pre> X.random_evaluate(1)  for _ in range(20):     # note that in this example we can ignore warnings if computation time is greater     # than added time     with warnings.catch_warnings():         warnings.filterwarnings(\"ignore\", category=RuntimeWarning)         X.step()         time.sleep(0.1)  print(X.generator.generate(1)) <pre>          x\n0  0.209847\n</pre> In\u00a0[4]: Copied! <pre>X.data\n</pre> X.data Out[4]: x y time xopt_runtime xopt_error 1 0.839527 3.518436 1.688092e+09 0.000007 False 2 -1.000000 5.107630 1.688092e+09 0.000009 False 3 0.242587 0.243848 1.688092e+09 0.000008 False 4 -0.118633 0.114652 1.688092e+09 0.000010 False 5 0.202077 0.125211 1.688092e+09 0.000009 False 6 -0.032936 0.038546 1.688092e+09 0.000010 False 7 0.093778 0.003883 1.688092e+09 0.000010 False 8 -0.105584 0.166592 1.688092e+09 0.000011 False 9 0.170355 0.033918 1.688092e+09 0.000010 False 10 0.057619 0.008574 1.688092e+09 0.000008 False 11 0.133914 0.002841 1.688092e+09 0.000008 False 12 0.092685 0.004043 1.688092e+09 0.000010 False 13 0.190034 0.016749 1.688092e+09 0.000010 False 14 0.115496 0.003838 1.688092e+09 0.000011 False 15 0.164948 0.000573 1.688092e+09 0.000011 False 16 0.141760 0.002766 1.688092e+09 0.000010 False 17 0.222488 0.010657 1.688092e+09 0.000010 False 18 0.164173 0.002689 1.688092e+09 0.000008 False 19 0.206973 0.000368 1.688092e+09 0.000010 False 20 0.187148 0.002484 1.688092e+09 0.000010 False 21 0.258657 0.007285 1.688092e+09 0.000008 False In\u00a0[5]: Copied! <pre># plot model\nimport torch\nfrom matplotlib import pyplot as plt  # plot model predictions\ndata = X.data\n\nxbounds = generator.vocs.bounds\ntbounds = [data[\"time\"].min(), data[\"time\"].max()]\n\ndef gt(inpts):\n    return 5*(inpts[:,1] - (inpts[:,0] - start_time)*1e-2)**2\n\nmodel = X.generator.model\nn = 200\nt = torch.linspace(*tbounds, n, dtype=torch.double)\nx = torch.linspace(*xbounds.flatten(), n, dtype=torch.double)\ntt, xx = torch.meshgrid(t, x)\npts = torch.hstack([ele.reshape(-1, 1) for ele in (tt, xx)]).double()\n\n#NOTE: the model inputs are such that t is the last dimension\ngp_pts = torch.flip(pts, dims=[-1])\n\ngt_vals = gt(pts)\n\nwith torch.no_grad():\n    post = model.posterior(gp_pts)\n\n    mean = post.mean\n    std = torch.sqrt(post.variance)\n\n    fig, ax = plt.subplots()\n    ax.set_title(\"model mean\")\n    ax.set_xlabel(\"unix time\")\n    ax.set_ylabel(\"x\")\n    c = ax.pcolor(tt, xx, mean.reshape(n,n))\n    fig.colorbar(c)\n\n    fig2, ax2 = plt.subplots()\n    ax2.set_title(\"model uncertainty\")\n    ax2.set_xlabel(\"unix time\")\n    ax2.set_ylabel(\"x\")\n    c = ax2.pcolor(tt, xx, std.reshape(n,n))\n    fig2.colorbar(c)\n\n    ax.plot(data[\"time\"].to_numpy(), data[\"x\"].to_numpy(),\"oC1\")\n    ax2.plot(data[\"time\"].to_numpy(), data[\"x\"].to_numpy(),\"oC1\")\n\n    fig3, ax3 = plt.subplots()\n    ax3.set_title(\"ground truth value\")\n    ax3.set_xlabel(\"unix time\")\n    ax3.set_ylabel(\"x\")\n    c = ax3.pcolor(tt, xx, gt_vals.reshape(n,n))\n    fig3.colorbar(c)\n</pre> # plot model import torch from matplotlib import pyplot as plt  # plot model predictions data = X.data  xbounds = generator.vocs.bounds tbounds = [data[\"time\"].min(), data[\"time\"].max()]  def gt(inpts):     return 5*(inpts[:,1] - (inpts[:,0] - start_time)*1e-2)**2  model = X.generator.model n = 200 t = torch.linspace(*tbounds, n, dtype=torch.double) x = torch.linspace(*xbounds.flatten(), n, dtype=torch.double) tt, xx = torch.meshgrid(t, x) pts = torch.hstack([ele.reshape(-1, 1) for ele in (tt, xx)]).double()  #NOTE: the model inputs are such that t is the last dimension gp_pts = torch.flip(pts, dims=[-1])  gt_vals = gt(pts)  with torch.no_grad():     post = model.posterior(gp_pts)      mean = post.mean     std = torch.sqrt(post.variance)      fig, ax = plt.subplots()     ax.set_title(\"model mean\")     ax.set_xlabel(\"unix time\")     ax.set_ylabel(\"x\")     c = ax.pcolor(tt, xx, mean.reshape(n,n))     fig.colorbar(c)      fig2, ax2 = plt.subplots()     ax2.set_title(\"model uncertainty\")     ax2.set_xlabel(\"unix time\")     ax2.set_ylabel(\"x\")     c = ax2.pcolor(tt, xx, std.reshape(n,n))     fig2.colorbar(c)      ax.plot(data[\"time\"].to_numpy(), data[\"x\"].to_numpy(),\"oC1\")     ax2.plot(data[\"time\"].to_numpy(), data[\"x\"].to_numpy(),\"oC1\")      fig3, ax3 = plt.subplots()     ax3.set_title(\"ground truth value\")     ax3.set_xlabel(\"unix time\")     ax3.set_ylabel(\"x\")     c = ax3.pcolor(tt, xx, gt_vals.reshape(n,n))     fig3.colorbar(c) In\u00a0[6]: Copied! <pre>list(model.named_parameters())\n</pre> list(model.named_parameters()) Out[6]: <pre>[('models.0.likelihood.noise_covar.raw_noise',\n  Parameter containing:\n  tensor([-26.5525], dtype=torch.float64, requires_grad=True)),\n ('models.0.mean_module.raw_constant',\n  Parameter containing:\n  tensor(2.5459, dtype=torch.float64, requires_grad=True)),\n ('models.0.covar_module.raw_outputscale',\n  Parameter containing:\n  tensor(2.7729, dtype=torch.float64, requires_grad=True)),\n ('models.0.covar_module.base_kernel.raw_lengthscale',\n  Parameter containing:\n  tensor([[-0.5087,  1.3106]], dtype=torch.float64, requires_grad=True))]</pre> In\u00a0[7]: Copied! <pre># plot the acquisition function\n# note that target time is only updated during the generate call\ntarget_time = generator.target_prediction_time\nprint(target_time-start_time)\nmy_acq_func = generator.get_acquisition(model)\n\nwith torch.no_grad():\n    acq_pts = x.unsqueeze(-1).unsqueeze(-1)\n    full_acq = my_acq_func.acq_func(gp_pts.unsqueeze(1))\n    fixed_acq = my_acq_func(acq_pts)\n\n    fig, ax = plt.subplots()\n    c = ax.pcolor(tt, xx, full_acq.reshape(n,n))\n    fig.colorbar(c)\n\n    fi2, ax2 = plt.subplots()\n    ax2.plot(x.flatten(), fixed_acq.flatten())\n</pre> # plot the acquisition function # note that target time is only updated during the generate call target_time = generator.target_prediction_time print(target_time-start_time) my_acq_func = generator.get_acquisition(model)  with torch.no_grad():     acq_pts = x.unsqueeze(-1).unsqueeze(-1)     full_acq = my_acq_func.acq_func(gp_pts.unsqueeze(1))     fixed_acq = my_acq_func(acq_pts)      fig, ax = plt.subplots()     c = ax.pcolor(tt, xx, full_acq.reshape(n,n))     fig.colorbar(c)      fi2, ax2 = plt.subplots()     ax2.plot(x.flatten(), fixed_acq.flatten()) <pre>23.150508880615234\n</pre> In\u00a0[7]: Copied! <pre>\n</pre>"},{"location":"examples/single_objective_bayes_opt/time_dependent_bo/#time-dependent-bayesian-optimization","title":"Time dependent Bayesian Optimization\u00b6","text":"<p>In this example we demonstrate time dependent optimization. In this case we are not only interested in finding an optimum point in input space, but also maintain the ideal point over time.</p>"},{"location":"examples/single_objective_bayes_opt/time_dependent_bo/#time-dependent-test-problem","title":"Time dependent test problem\u00b6","text":"<p>Optimization is carried out over a single variable <code>x</code>. The test function is a simple quadratic, with a minimum location that drifts in the positive <code>x</code> direction over (real) time.</p>"},{"location":"examples/single_objective_bayes_opt/turbo_tutorial/","title":"TuRBO Bayesian Optimization","text":"In\u00a0[1]: Copied! <pre>from xopt.vocs import VOCS\nimport math\n\n# define variables and function objectives\nvocs = VOCS(\n    variables={\"x\": [0, 2 * math.pi]},\n    objectives={\"f\": \"MINIMIZE\"},\n)\n</pre> from xopt.vocs import VOCS import math  # define variables and function objectives vocs = VOCS(     variables={\"x\": [0, 2 * math.pi]},     objectives={\"f\": \"MINIMIZE\"}, ) In\u00a0[2]: Copied! <pre># define a test function to optimize\nimport numpy as np\n\ndef sin_function(input_dict):\n    x = input_dict[\"x\"]\n    return {\"f\": -10*np.exp(-(x - np.pi)**2 / 0.01) + 0.5*np.sin(5*x)}\n</pre> # define a test function to optimize import numpy as np  def sin_function(input_dict):     x = input_dict[\"x\"]     return {\"f\": -10*np.exp(-(x - np.pi)**2 / 0.01) + 0.5*np.sin(5*x)} In\u00a0[3]: Copied! <pre>from xopt.evaluator import Evaluator\nfrom xopt.generators.bayesian import UpperConfidenceBoundGenerator\nfrom xopt import Xopt\n\n\nevaluator = Evaluator(function=sin_function)\ngenerator = UpperConfidenceBoundGenerator(\n    vocs=vocs, turbo_controller=\"optimize\"\n)\nX = Xopt(evaluator=evaluator, generator=generator, vocs=vocs)\n</pre> from xopt.evaluator import Evaluator from xopt.generators.bayesian import UpperConfidenceBoundGenerator from xopt import Xopt   evaluator = Evaluator(function=sin_function) generator = UpperConfidenceBoundGenerator(     vocs=vocs, turbo_controller=\"optimize\" ) X = Xopt(evaluator=evaluator, generator=generator, vocs=vocs) In\u00a0[4]: Copied! <pre>X\n</pre> X Out[4]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: null, max_evaluations: null}\ngenerator:\n  name: upper_confidence_bound\n  model: null\n  turbo_controller:\n    dim: 1\n    batch_size: 1\n    length: 0.25\n    length_min: 0.0078125\n    length_max: 2.0\n    failure_counter: 0\n    failure_tolerance: 2\n    success_counter: 0\n    success_tolerance: 2\n    center_x: null\n    scale_factor: 2.0\n    tkwargs: {dtype: torch.float64}\n    minimize: true\n    best_value: null\n  use_cuda: false\n  model_constructor:\n    name: standard\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n    trainable_mean_keys: []\n  numerical_optimizer: {name: LBFGS, n_raw_samples: 20, n_restarts: 20, max_iter: 2000}\n  max_travel_distances: null\n  n_monte_carlo_samples: 128\n  beta: 2.0\nevaluator:\n  function: __main__.sin_function\n  max_workers: 1\n  function_kwargs: {}\n  vectorized: false\nvocs:\n  variables:\n    x: [0.0, 6.283185307179586]\n  constraints: {}\n  objectives: {f: MINIMIZE}\n  constants: {}\n  observables: []\n</pre> In\u00a0[5]: Copied! <pre>import pandas as pd\nX.evaluate_data(pd.DataFrame({\"x\":[3.0, 1.75, 2.0]}))\n\n# inspect the gathered data\nX.data\n</pre> import pandas as pd X.evaluate_data(pd.DataFrame({\"x\":[3.0, 1.75, 2.0]}))  # inspect the gathered data X.data Out[5]: x f xopt_runtime xopt_error 1 3.00 -1.021664 0.000038 False 2 1.75 0.312362 0.000005 False 3 2.00 -0.272011 0.000003 False In\u00a0[6]: Copied! <pre># determine trust region from gathered data\ngenerator.train_model()\ngenerator.turbo_controller.set_center_point(generator.data)\ngenerator.turbo_controller.get_trust_region(generator.model)\n</pre> # determine trust region from gathered data generator.train_model() generator.turbo_controller.set_center_point(generator.data) generator.turbo_controller.get_trust_region(generator.model) Out[6]: <pre>tensor([[2.2146],\n        [3.7854]], dtype=torch.float64)</pre> In\u00a0[7]: Copied! <pre>import torch\nimport matplotlib.pyplot as plt\n\n# test points for plotting\ntest_x = torch.linspace(*X.vocs.bounds.flatten(),500).double()\n\nfor i in range(10):\n\n    # get the Gaussian process model from the generator\n    model = generator.train_model()\n\n    # get trust region\n    trust_region = generator.turbo_controller.get_trust_region(model)\\\n        .squeeze()\n    scale_factor = generator.turbo_controller.length\n    region_width = trust_region[1] - trust_region[0]\n    best_value = generator.turbo_controller.best_value\n\n    # get number of successes and failures\n    n_successes = generator.turbo_controller.success_counter\n    n_failures = generator.turbo_controller.failure_counter\n\n    # get acquisition function from generator\n    acq = X.generator.get_acquisition(model)\n\n    # calculate model posterior and acquisition function at each test point\n    # NOTE: need to add a dimension to the input tensor for evaluating the\n    # posterior and another for the acquisition function, see\n    # https://botorch.org/docs/batching for details\n    # NOTE: we use the `torch.no_grad()` environment to speed up computation by\n    # skipping calculations for backpropagation\n    with torch.no_grad():\n        posterior = model.posterior(test_x.unsqueeze(1))\n        acq_val = acq(test_x.reshape(-1,1,1))\n\n    # get mean function and confidence regions\n    mean = posterior.mean\n    l,u = posterior.mvn.confidence_region()\n\n    # plot model and acquisition function\n    fig,ax = plt.subplots(2,1,sharex=\"all\")\n\n    # add title for successes and failures\n    ax[0].set_title(f\"n_successes: {n_successes}, n_failures: {n_failures}, \"\n                    f\"scale_factor: {scale_factor}, region_width: {region_width:.2}, \"\n                    f\"best_value: {best_value:.4}\")\n\n    # plot model posterior\n    ax[0].plot(test_x, mean, label=\"Posterior mean\")\n    ax[0].fill_between(test_x, l, u,alpha=0.25, label=\"Posterior confidence region\")\n\n    # add data to model plot\n    ax[0].plot(X.data[\"x\"],X.data[\"f\"],\"C1o\", label=\"Training data\")\n\n    # plot true function\n    true_f = sin_function({\"x\": test_x})[\"f\"]\n    ax[0].plot(test_x, true_f,'--', label=\"Ground truth\")\n\n    # add legend\n    ax[0].legend()\n\n    # plot acquisition function\n    ax[1].plot(test_x, acq_val.flatten())\n\n    ax[0].set_ylabel(\"f\")\n    ax[1].set_ylabel(r\"$\\alpha(x)$\")\n    ax[1].set_xlabel(\"x\")\n\n    # plot trust region\n    for a in ax:\n        a.axvline(trust_region[0],c=\"r\")\n        a.axvline(trust_region[1],c=\"r\")\n\n    X.step()\n</pre> import torch import matplotlib.pyplot as plt  # test points for plotting test_x = torch.linspace(*X.vocs.bounds.flatten(),500).double()  for i in range(10):      # get the Gaussian process model from the generator     model = generator.train_model()      # get trust region     trust_region = generator.turbo_controller.get_trust_region(model)\\         .squeeze()     scale_factor = generator.turbo_controller.length     region_width = trust_region[1] - trust_region[0]     best_value = generator.turbo_controller.best_value      # get number of successes and failures     n_successes = generator.turbo_controller.success_counter     n_failures = generator.turbo_controller.failure_counter      # get acquisition function from generator     acq = X.generator.get_acquisition(model)      # calculate model posterior and acquisition function at each test point     # NOTE: need to add a dimension to the input tensor for evaluating the     # posterior and another for the acquisition function, see     # https://botorch.org/docs/batching for details     # NOTE: we use the `torch.no_grad()` environment to speed up computation by     # skipping calculations for backpropagation     with torch.no_grad():         posterior = model.posterior(test_x.unsqueeze(1))         acq_val = acq(test_x.reshape(-1,1,1))      # get mean function and confidence regions     mean = posterior.mean     l,u = posterior.mvn.confidence_region()      # plot model and acquisition function     fig,ax = plt.subplots(2,1,sharex=\"all\")      # add title for successes and failures     ax[0].set_title(f\"n_successes: {n_successes}, n_failures: {n_failures}, \"                     f\"scale_factor: {scale_factor}, region_width: {region_width:.2}, \"                     f\"best_value: {best_value:.4}\")      # plot model posterior     ax[0].plot(test_x, mean, label=\"Posterior mean\")     ax[0].fill_between(test_x, l, u,alpha=0.25, label=\"Posterior confidence region\")      # add data to model plot     ax[0].plot(X.data[\"x\"],X.data[\"f\"],\"C1o\", label=\"Training data\")      # plot true function     true_f = sin_function({\"x\": test_x})[\"f\"]     ax[0].plot(test_x, true_f,'--', label=\"Ground truth\")      # add legend     ax[0].legend()      # plot acquisition function     ax[1].plot(test_x, acq_val.flatten())      ax[0].set_ylabel(\"f\")     ax[1].set_ylabel(r\"$\\alpha(x)$\")     ax[1].set_xlabel(\"x\")      # plot trust region     for a in ax:         a.axvline(trust_region[0],c=\"r\")         a.axvline(trust_region[1],c=\"r\")      X.step()  In\u00a0[8]: Copied! <pre># access the collected data\ngenerator.turbo_controller\n</pre> # access the collected data generator.turbo_controller Out[8]: <pre>OptimizeTurboController(vocs=VOCS(variables={'x': [0.0, 6.283185307179586]}, constraints={}, objectives={'f': 'MINIMIZE'}, constants={}, observables=[]), dim=1, batch_size=1, length=0.25, length_min=0.0078125, length_max=2.0, failure_counter=1, failure_tolerance=2, success_counter=0, success_tolerance=2, center_x={'x': 3.146341372618669}, scale_factor=2.0, tkwargs={'dtype': torch.float64}, minimize=True, best_value=-9.989345756490977)</pre> In\u00a0[9]: Copied! <pre>X.data\n</pre> X.data Out[9]: x f xopt_runtime xopt_error 1 3.000000 -1.021664 0.000038 False 2 1.750000 0.312362 0.000005 False 3 2.000000 -0.272011 0.000003 False 4 3.785398 0.038679 0.000020 False 5 2.635285 0.286456 0.000019 False 6 3.233219 -4.540228 0.000019 False 7 3.384296 -0.496082 0.000021 False 8 3.172044 -9.190237 0.000021 False 9 3.564743 -0.427575 0.000020 False 10 3.134431 -9.930942 0.000021 False 11 3.146341 -9.989346 0.000021 False 12 2.360943 -0.345060 0.000019 False 13 3.143723 -10.000788 0.000020 False In\u00a0[10]: Copied! <pre>list(model.named_parameters())\n</pre> list(model.named_parameters()) Out[10]: <pre>[('models.0.likelihood.noise_covar.raw_noise',\n  Parameter containing:\n  tensor([-24.1368], dtype=torch.float64, requires_grad=True)),\n ('models.0.mean_module.raw_constant',\n  Parameter containing:\n  tensor(0.4972, dtype=torch.float64, requires_grad=True)),\n ('models.0.covar_module.raw_outputscale',\n  Parameter containing:\n  tensor(0.0344, dtype=torch.float64, requires_grad=True)),\n ('models.0.covar_module.base_kernel.raw_lengthscale',\n  Parameter containing:\n  tensor([[-3.9117]], dtype=torch.float64, requires_grad=True))]</pre>"},{"location":"examples/single_objective_bayes_opt/turbo_tutorial/#turbo-bayesian-optimization","title":"TuRBO Bayesian Optimization\u00b6","text":"<p>In this tutorial we demonstrate the use of Xopt to preform Trust Region Bayesian Optimization (TuRBO) on a simple test problem. During optimization of high dimensional input spaces off the shelf BO tends to over-emphasize exploration which severely degrades optimization performance. TuRBO attempts to prevent this by maintaining a surrogate model over a local (trust) region centered on the best observation so far and restricting optimization inside that local region. The trust region is expanded and contracted based on the number of <code>successful</code> (observations that improve over the best observed point) or <code>unsuccessful</code> (no improvement) observations in a row. See https://botorch.org/tutorials/turbo_1 for details.</p>"},{"location":"examples/single_objective_bayes_opt/turbo_tutorial/#define-the-test-problem","title":"Define the test problem\u00b6","text":"<p>Here we define a simple optimization problem, where we attempt to minimize a function in the domian [0,2*pi]. Note that the function used to evaluate the objective function takes a dictionary as input and returns a dictionary as the output.</p>"},{"location":"examples/single_objective_bayes_opt/turbo_tutorial/#create-xopt-objects","title":"Create Xopt objects\u00b6","text":"<p>Create the evaluator to evaluate our test function and create a generator that uses the Upper Confidence Bound acqusition function to perform Bayesian Optimization.</p>"},{"location":"examples/single_objective_bayes_opt/turbo_tutorial/#generate-and-evaluate-initial-points","title":"Generate and evaluate initial points\u00b6","text":"<p>To begin optimization, we must generate some random initial data points. The first call to <code>X.step()</code> will generate and evaluate a number of randomly points specified by the generator. Note that if we add data to xopt before calling <code>X.step()</code> by assigning the data to <code>X.data</code>, calls to <code>X.step()</code> will ignore the random generation and proceed to generating points via Bayesian optimization.</p>"},{"location":"examples/single_objective_bayes_opt/turbo_tutorial/#do-bayesian-optimization-steps","title":"Do bayesian optimization steps\u00b6","text":"<p>Notice that when the number of successive successes or failures reaches 2 the trust region expands or contracts and counters are reset to zero. Counters are also reset to zero during alternate successes/failures. Finally, the model is most accurate inside the trust region, which supports our goal of local optimization.</p>"},{"location":"examples/single_objective_bayes_opt/upper_confidence_bound/","title":"Upper Confidence Bound BO","text":"In\u00a0[1]: Copied! <pre># Ignore all warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport torch\nimport yaml\n\nimport matplotlib.pyplot as plt\nfrom xopt import Xopt\n</pre> # Ignore all warnings import warnings warnings.filterwarnings(\"ignore\")  import torch import yaml  import matplotlib.pyplot as plt from xopt import Xopt <p>The <code>Xopt</code> object can be instantiated from a JSON or YAML file, or a dict, with the proper structure.</p> <p>Here we will make one</p> In\u00a0[2]: Copied! <pre># Make a proper input file.\nYAML = \"\"\"\nxopt: \n    dump_file: dump.yaml\ngenerator:\n  name: upper_confidence_bound\n  beta: 0.1\n\nevaluator:\n  function: xopt.resources.test_functions.sinusoid_1d.evaluate_sinusoid\n\nvocs:\n  variables:\n    x1: [0, 6.28]\n  objectives:\n    y1: 'MINIMIZE'\n\"\"\"\nconfig = yaml.safe_load(YAML)\n</pre> # Make a proper input file. YAML = \"\"\" xopt:      dump_file: dump.yaml generator:   name: upper_confidence_bound   beta: 0.1  evaluator:   function: xopt.resources.test_functions.sinusoid_1d.evaluate_sinusoid  vocs:   variables:     x1: [0, 6.28]   objectives:     y1: 'MINIMIZE' \"\"\" config = yaml.safe_load(YAML) In\u00a0[3]: Copied! <pre>X = Xopt(config=config)\nX\n</pre> X = Xopt(config=config) X Out[3]: <pre>\n            Xopt\n________________________________\nVersion: 0+untagged.1.gec8863e\nData size: 0\nConfig as YAML:\nxopt: {asynch: false, strict: false, dump_file: dump.yaml, max_evaluations: null}\ngenerator:\n  name: upper_confidence_bound\n  model: null\n  turbo_controller: null\n  use_cuda: false\n  model_constructor:\n    name: standard\n    use_low_noise_prior: true\n    covar_modules: {}\n    mean_modules: {}\n    trainable_mean_keys: []\n  numerical_optimizer: {name: LBFGS, n_raw_samples: 20, n_restarts: 20, max_iter: 2000}\n  max_travel_distances: null\n  n_monte_carlo_samples: 128\n  beta: 0.1\nevaluator:\n  function: xopt.resources.test_functions.sinusoid_1d.evaluate_sinusoid\n  max_workers: 1\n  function_kwargs: {}\n  vectorized: false\nvocs:\n  variables:\n    x1: [0.0, 6.28]\n  constraints: {}\n  objectives: {y1: MINIMIZE}\n  constants: {}\n  observables: []\n</pre> In\u00a0[4]: Copied! <pre>X.random_evaluate(3)\nfor i in range(5):\n    print(i)\n    X.step()\n</pre> X.random_evaluate(3) for i in range(5):     print(i)     X.step() <pre>0\n1\n2\n3\n4\n</pre> In\u00a0[5]: Copied! <pre>X.data\n</pre> X.data Out[5]: x1 y1 c1 xopt_runtime xopt_error 1 3.414400 -0.269436 -13.137499 0.000024 False 2 0.768383 0.694973 -3.336387 0.000004 False 3 4.032904 -0.777896 -17.234972 0.000004 False 4 5.569853 -0.654357 -15.082780 0.000016 False 5 4.643638 -0.997638 -18.589961 0.000015 False 6 4.672451 -0.999203 -18.530850 0.000017 False 7 4.676017 -0.999339 -18.525623 0.000015 False 8 4.677273 -0.999383 -18.523895 0.000017 False In\u00a0[6]: Copied! <pre>model = X.generator.model\nbounds = X.vocs.bounds\n\ntest_x = torch.linspace(*bounds.flatten(), 100).double()\n\ntrain_x = torch.tensor(X.data[\"x1\"].to_numpy())\ntrain_y = torch.tensor(X.data[\"y1\"].to_numpy())\n\nfig, ax = plt.subplots()\nwith torch.no_grad():\n    post = model.models[0].posterior(test_x.reshape(-1,1,1))\n    mean = post.mean.flatten()\n    std = post.variance.sqrt().flatten()\n\n    lower = mean - std\n    upper = mean + std\n\nax.plot(test_x, mean)\nax.fill_between(test_x, lower, upper, alpha=0.5)\nax.plot(\n    train_x.flatten(),\n    train_y.flatten(),\n    \"+\"\n)\nax.set_xlabel(\"x1\")\nax.set_ylabel(\"y1\")\n</pre> model = X.generator.model bounds = X.vocs.bounds  test_x = torch.linspace(*bounds.flatten(), 100).double()  train_x = torch.tensor(X.data[\"x1\"].to_numpy()) train_y = torch.tensor(X.data[\"y1\"].to_numpy())  fig, ax = plt.subplots() with torch.no_grad():     post = model.models[0].posterior(test_x.reshape(-1,1,1))     mean = post.mean.flatten()     std = post.variance.sqrt().flatten()      lower = mean - std     upper = mean + std  ax.plot(test_x, mean) ax.fill_between(test_x, lower, upper, alpha=0.5) ax.plot(     train_x.flatten(),     train_y.flatten(),     \"+\" ) ax.set_xlabel(\"x1\") ax.set_ylabel(\"y1\")  Out[6]: <pre>Text(0, 0.5, 'y1')</pre> In\u00a0[7]: Copied! <pre># Cleanup\n!rm dump.yaml\n</pre> # Cleanup !rm dump.yaml In\u00a0[7]: Copied! <pre>\n</pre>"},{"location":"examples/single_objective_bayes_opt/upper_confidence_bound/#upper-confidence-bound-bo","title":"Upper Confidence Bound BO\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/upper_confidence_bound/#run-optimization","title":"Run Optimization\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/upper_confidence_bound/#view-output-data","title":"View output data\u00b6","text":""},{"location":"examples/single_objective_bayes_opt/upper_confidence_bound/#visualize-model-used-by-upper-confidence-bound","title":"Visualize model used by upper confidence bound\u00b6","text":"<p>Models are kept in a list, in this case that list has one element, the model created for the objective <code>y1</code>.</p>"}]}